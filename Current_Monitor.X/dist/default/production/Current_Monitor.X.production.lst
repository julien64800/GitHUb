

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Apr 13 16:20:30 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26  0000                     
    27                           ; Version 1.41
    28                           ; Generated 25/01/2017 GMT
    29                           ; 
    30                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F8722 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     
    62                           	psect	smallconst
    63  001000                     __psmallconst:
    64                           	opt stack 0
    65  001000  00                 	db	0
    66  001001                     _dpowers:
    67                           	opt stack 0
    68  001001  0001               	dw	1
    69  001003  000A               	dw	10
    70  001005  0064               	dw	100
    71  001007  03E8               	dw	1000
    72  001009  2710               	dw	10000
    73  00100B                     __end_of_dpowers:
    74                           	opt stack 0
    75  0000                     _EECON2	set	4007
    76  0000                     _INTCONbits	set	4082
    77  0000                     _EEDATA	set	4008
    78  0000                     _EEADR	set	4009
    79  0000                     _EECON1bits	set	4006
    80  0000                     _ADRESH	set	4036
    81  0000                     _ADCON0bits	set	4034
    82  0000                     _ADCON2	set	4032
    83  0000                     _ADCON1	set	4033
    84  0000                     _ADCON0	set	4034
    85  0000                     _PORTA	set	3968
    86  0000                     _PORTD	set	3971
    87  0000                     _TXREG1	set	4013
    88  0000                     _RCREG1	set	4014
    89  0000                     _PIR1bits	set	3998
    90  0000                     _RCSTA1bits	set	4011
    91  0000                     _SPBRG1	set	4015
    92  0000                     _BAUDCON1bits	set	3966
    93  0000                     _TXSTA1bits	set	4012
    94  0000                     _TRISCbits	set	3988
    95  0000                     _TRISA	set	3986
    96  0000                     _TRISD	set	3989
    97  0000                     _RCONbits	set	4048
    98  00100B                     STR_2:
    99  00100B  41                 	db	65	;'A'
   100  00100C  63                 	db	99	;'c'
   101  00100D  71                 	db	113	;'q'
   102  00100E  75                 	db	117	;'u'
   103  00100F  69                 	db	105	;'i'
   104  001010  73                 	db	115	;'s'
   105  001011  69                 	db	105	;'i'
   106  001012  74                 	db	116	;'t'
   107  001013  69                 	db	105	;'i'
   108  001014  6F                 	db	111	;'o'
   109  001015  6E                 	db	110	;'n'
   110  001016  20                 	db	32
   111  001017  63                 	db	99	;'c'
   112  001018  6F                 	db	111	;'o'
   113  001019  6D                 	db	109	;'m'
   114  00101A  70                 	db	112	;'p'
   115  00101B  6C                 	db	108	;'l'
   116  00101C  65                 	db	101	;'e'
   117  00101D  74                 	db	116	;'t'
   118  00101E  65                 	db	101	;'e'
   119  00101F  64                 	db	100	;'d'
   120  001020  20                 	db	32
   121  001021  70                 	db	112	;'p'
   122  001022  72                 	db	114	;'r'
   123  001023  65                 	db	101	;'e'
   124  001024  73                 	db	115	;'s'
   125  001025  73                 	db	115	;'s'
   126  001026  20                 	db	32
   127  001027  53                 	db	83	;'S'
   128  001028  20                 	db	32
   129  001029  74                 	db	116	;'t'
   130  00102A  6F                 	db	111	;'o'
   131  00102B  20                 	db	32
   132  00102C  72                 	db	114	;'r'
   133  00102D  65                 	db	101	;'e'
   134  00102E  61                 	db	97	;'a'
   135  00102F  64                 	db	100	;'d'
   136  001030  20                 	db	32
   137  001031  6F                 	db	111	;'o'
   138  001032  72                 	db	114	;'r'
   139  001033  20                 	db	32
   140  001034  52                 	db	82	;'R'
   141  001035  20                 	db	32
   142  001036  74                 	db	116	;'t'
   143  001037  6F                 	db	111	;'o'
   144  001038  20                 	db	32
   145  001039  72                 	db	114	;'r'
   146  00103A  65                 	db	101	;'e'
   147  00103B  73                 	db	115	;'s'
   148  00103C  65                 	db	101	;'e'
   149  00103D  74                 	db	116	;'t'
   150  00103E  3A                 	db	58	;':'
   151  00103F  20                 	db	32
   152  001040  0A                 	db	10
   153  001041  00                 	db	0
   154  001042                     STR_1:
   155  001042  41                 	db	65	;'A'
   156  001043  63                 	db	99	;'c'
   157  001044  71                 	db	113	;'q'
   158  001045  75                 	db	117	;'u'
   159  001046  69                 	db	105	;'i'
   160  001047  73                 	db	115	;'s'
   161  001048  69                 	db	105	;'i'
   162  001049  74                 	db	116	;'t'
   163  00104A  69                 	db	105	;'i'
   164  00104B  6F                 	db	111	;'o'
   165  00104C  6E                 	db	110	;'n'
   166  00104D  20                 	db	32
   167  00104E  69                 	db	105	;'i'
   168  00104F  6E                 	db	110	;'n'
   169  001050  20                 	db	32
   170  001051  70                 	db	112	;'p'
   171  001052  72                 	db	114	;'r'
   172  001053  6F                 	db	111	;'o'
   173  001054  67                 	db	103	;'g'
   174  001055  72                 	db	114	;'r'
   175  001056  65                 	db	101	;'e'
   176  001057  73                 	db	115	;'s'
   177  001058  73                 	db	115	;'s'
   178  001059  20                 	db	32
   179  00105A  70                 	db	112	;'p'
   180  00105B  6C                 	db	108	;'l'
   181  00105C  65                 	db	101	;'e'
   182  00105D  61                 	db	97	;'a'
   183  00105E  73                 	db	115	;'s'
   184  00105F  65                 	db	101	;'e'
   185  001060  20                 	db	32
   186  001061  77                 	db	119	;'w'
   187  001062  61                 	db	97	;'a'
   188  001063  69                 	db	105	;'i'
   189  001064  74                 	db	116	;'t'
   190  001065  3A                 	db	58	;':'
   191  001066  20                 	db	32
   192  001067  0A                 	db	10
   193  001068  00                 	db	0
   194  001069                     STR_4:
   195  001069  41                 	db	65	;'A'
   196  00106A  76                 	db	118	;'v'
   197  00106B  65                 	db	101	;'e'
   198  00106C  72                 	db	114	;'r'
   199  00106D  61                 	db	97	;'a'
   200  00106E  67                 	db	103	;'g'
   201  00106F  65                 	db	101	;'e'
   202  001070  20                 	db	32
   203  001071  6F                 	db	111	;'o'
   204  001072  66                 	db	102	;'f'
   205  001073  20                 	db	32
   206  001074  6C                 	db	108	;'l'
   207  001075  61                 	db	97	;'a'
   208  001076  73                 	db	115	;'s'
   209  001077  74                 	db	116	;'t'
   210  001078  20                 	db	32
   211  001079  35                 	db	53	;'5'
   212  00107A  30                 	db	48	;'0'
   213  00107B  20                 	db	32
   214  00107C  53                 	db	83	;'S'
   215  00107D  61                 	db	97	;'a'
   216  00107E  6D                 	db	109	;'m'
   217  00107F  70                 	db	112	;'p'
   218  001080  6C                 	db	108	;'l'
   219  001081  65                 	db	101	;'e'
   220  001082  73                 	db	115	;'s'
   221  001083  3A                 	db	58	;':'
   222  001084  20                 	db	32
   223  001085  25                 	db	37
   224  001086  64                 	db	100	;'d'
   225  001087  20                 	db	32
   226  001088  6D                 	db	109	;'m'
   227  001089  41                 	db	65	;'A'
   228  00108A  20                 	db	32
   229  00108B  0A                 	db	10
   230  00108C  00                 	db	0
   231  00108D                     STR_3:
   232  00108D  53                 	db	83	;'S'
   233  00108E  61                 	db	97	;'a'
   234  00108F  6D                 	db	109	;'m'
   235  001090  70                 	db	112	;'p'
   236  001091  6C                 	db	108	;'l'
   237  001092  69                 	db	105	;'i'
   238  001093  6E                 	db	110	;'n'
   239  001094  67                 	db	103	;'g'
   240  001095  20                 	db	32
   241  001096  6E                 	db	110	;'n'
   242  001097  75                 	db	117	;'u'
   243  001098  6D                 	db	109	;'m'
   244  001099  62                 	db	98	;'b'
   245  00109A  65                 	db	101	;'e'
   246  00109B  72                 	db	114	;'r'
   247  00109C  20                 	db	32
   248  00109D  25                 	db	37
   249  00109E  64                 	db	100	;'d'
   250  00109F  3A                 	db	58	;':'
   251  0010A0  20                 	db	32
   252  0010A1  25                 	db	37
   253  0010A2  64                 	db	100	;'d'
   254  0010A3  20                 	db	32
   255  0010A4  6D                 	db	109	;'m'
   256  0010A5  41                 	db	65	;'A'
   257  0010A6  20                 	db	32
   258  0010A7  3A                 	db	58	;':'
   259  0010A8  0A                 	db	10
   260  0010A9  00                 	db	0
   261                           
   262                           ; #config settings
   263  0010AA  00                 	db	0	; dummy byte at the end
   264  0000                     
   265                           	psect	cinit
   266  001572                     __pcinit:
   267                           	opt stack 0
   268  001572                     start_initialization:
   269                           	opt stack 0
   270  001572                     __initialization:
   271                           	opt stack 0
   272                           
   273                           ; Clear objects allocated to BANK0 (150 bytes)
   274  001572  EE00  F060         	lfsr	0,__pbssBANK0
   275  001576  0E96               	movlw	150
   276  001578                     clear_0:
   277  001578  6AEE               	clrf	postinc0,c
   278  00157A  06E8               	decf	wreg,f,c
   279  00157C  E1FD               	bnz	clear_0
   280                           
   281                           ; Clear objects allocated to COMRAM (13 bytes)
   282  00157E  EE00  F027         	lfsr	0,__pbssCOMRAM
   283  001582  0E0D               	movlw	13
   284  001584                     clear_1:
   285  001584  6AEE               	clrf	postinc0,c
   286  001586  06E8               	decf	wreg,f,c
   287  001588  E1FD               	bnz	clear_1
   288  00158A                     end_of_initialization:
   289                           	opt stack 0
   290  00158A                     __end_of__initialization:
   291                           	opt stack 0
   292  00158A  0100               	movlb	0
   293  00158C  EF04  F009         	goto	_main	;jump to C main() function
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           
   297                           	psect	bssCOMRAM
   298  000027                     __pbssCOMRAM:
   299                           	opt stack 0
   300  000027                     _x:
   301                           	opt stack 0
   302  000027                     	ds	2
   303  000029                     _a:
   304                           	opt stack 0
   305  000029                     	ds	2
   306  00002B                     _Keyboard:
   307                           	opt stack 0
   308  00002B                     	ds	1
   309  00002C                     _Average:
   310                           	opt stack 0
   311  00002C                     	ds	1
   312  00002D                     _result_EEPROM:
   313                           	opt stack 0
   314  00002D                     	ds	1
   315  00002E                     _Resistor:
   316                           	opt stack 0
   317  00002E                     	ds	1
   318  00002F                     _Current:
   319                           	opt stack 0
   320  00002F                     	ds	1
   321  000030                     _Voltage_Drop:
   322                           	opt stack 0
   323  000030                     	ds	1
   324  000031                     _b:
   325                           	opt stack 0
   326  000031                     	ds	3
   327                           postinc0	equ	0xFEE
   328                           wreg	equ	0xFE8
   329                           
   330                           	psect	bssBANK0
   331  000060                     __pbssBANK0:
   332                           	opt stack 0
   333  000060                     _Sample_for_Average:
   334                           	opt stack 0
   335  000060                     	ds	50
   336  000092                     _EEPROM_read:
   337                           	opt stack 0
   338  000092                     	ds	50
   339  0000C4                     _Sample:
   340                           	opt stack 0
   341  0000C4                     	ds	50
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           
   345                           	psect	cstackCOMRAM
   346  000001                     __pcstackCOMRAM:
   347                           	opt stack 0
   348  000001                     ??_Analog_Capture_ON:
   349  000001                     ?___awdiv:
   350                           	opt stack 0
   351  000001                     ?___lwdiv:
   352                           	opt stack 0
   353  000001                     Send_to_UART@i:
   354                           	opt stack 0
   355  000001                     EEPROM_Write@value:
   356                           	opt stack 0
   357  000001                     ___awdiv@dividend:
   358                           	opt stack 0
   359  000001                     ___lwdiv@dividend:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x0
   363  000001                     	ds	2
   364  000003                     EEPROM_Write@address:
   365                           	opt stack 0
   366  000003                     Analog_Capture_ON@x:
   367                           	opt stack 0
   368  000003                     ___awdiv@divisor:
   369                           	opt stack 0
   370  000003                     ___lwdiv@divisor:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x2
   374  000003                     	ds	2
   375  000005                     ___awdiv@counter:
   376                           	opt stack 0
   377  000005                     ___lwdiv@quotient:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x4
   381  000005                     	ds	1
   382  000006                     ___awdiv@sign:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0x5
   386  000006                     	ds	1
   387  000007                     ___lwdiv@counter:
   388                           	opt stack 0
   389  000007                     ___awdiv@quotient:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0x6
   393  000007                     	ds	1
   394  000008                     ?___lwmod:
   395                           	opt stack 0
   396  000008                     ___lwmod@dividend:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x7
   400  000008                     	ds	1
   401  000009                     Average_Function@x:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0x8
   405  000009                     	ds	1
   406  00000A                     ___lwmod@divisor:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x9
   410  00000A                     	ds	1
   411  00000B                     EEPROM_Read@address:
   412                           	opt stack 0
   413                           
   414                           ; 1 bytes @ 0xA
   415  00000B                     	ds	1
   416  00000C                     ___lwmod@counter:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0xB
   420  00000C                     	ds	1
   421  00000D                     ?_sprintf:
   422                           	opt stack 0
   423  00000D                     sprintf@sp:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0xC
   427  00000D                     	ds	2
   428  00000F                     sprintf@f:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0xE
   432  00000F                     	ds	6
   433  000015                     ??_sprintf:
   434                           
   435                           ; 1 bytes @ 0x14
   436  000015                     	ds	1
   437  000016                     sprintf@ap:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0x15
   441  000016                     	ds	2
   442  000018                     sprintf@flag:
   443                           	opt stack 0
   444                           
   445                           ; 1 bytes @ 0x17
   446  000018                     	ds	1
   447  000019                     sprintf@prec:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0x18
   451  000019                     	ds	1
   452  00001A                     sprintf@val:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x19
   456  00001A                     	ds	2
   457  00001C                     sprintf@c:
   458                           	opt stack 0
   459                           
   460                           ; 1 bytes @ 0x1B
   461  00001C                     	ds	1
   462  00001D                     ??_main:
   463                           
   464                           ; 1 bytes @ 0x1C
   465  00001D                     	ds	2
   466  00001F                     main@i:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0x1E
   470  00001F                     	ds	2
   471  000021                     main@i_615:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x20
   475  000021                     	ds	2
   476  000023                     main@x:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x22
   480  000023                     	ds	1
   481  000024                     main@y:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0x23
   485  000024                     	ds	1
   486  000025                     main@x_612:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x24
   490  000025                     	ds	2
   491                           postinc0	equ	0xFEE
   492                           wreg	equ	0xFE8
   493                           
   494 ;;
   495 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   496 ;;
   497 ;; *************** function _main *****************
   498 ;; Defined at:
   499 ;;		line 40 in file "Current_Monitor.c"
   500 ;; Parameters:    Size  Location     Type
   501 ;;		None
   502 ;; Auto vars:     Size  Location     Type
   503 ;;  i               2   30[COMRAM] int 
   504 ;;  x               2   36[COMRAM] int 
   505 ;;  i               2   32[COMRAM] int 
   506 ;;  y               1   35[COMRAM] unsigned char 
   507 ;;  x               1   34[COMRAM] unsigned char 
   508 ;; Return value:  Size  Location     Type
   509 ;;                  1    wreg      void 
   510 ;; Registers used:
   511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   512 ;; Tracked objects:
   513 ;;		On entry : 0/0
   514 ;;		On exit  : 0/0
   515 ;;		Unchanged: 0/0
   516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   518 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   519 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   520 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   521 ;;Total ram usage:       10 bytes
   522 ;; Hardware stack levels required when called:    3
   523 ;; This function calls:
   524 ;;		_Analog_Capture_OFF
   525 ;;		_Analog_Capture_ON
   526 ;;		_EEPROM_Read
   527 ;;		_EEPROM_Write
   528 ;;		_Initialize_Analog
   529 ;;		_Initialize_UART
   530 ;;		_Read_UART_Input
   531 ;;		_Send_to_UART
   532 ;;		_sprintf
   533 ;; This function is called by:
   534 ;;		Startup code after reset
   535 ;; This function uses a non-reentrant model
   536 ;;
   537                           
   538                           	psect	text0
   539  001208                     __ptext0:
   540                           	opt stack 0
   541  001208                     _main:
   542                           	opt stack 28
   543                           
   544                           ;Current_Monitor.c: 42: RCONbits.RI=0;
   545                           
   546                           ;incstack = 0
   547  001208  98D0               	bcf	4048,4,c	;volatile
   548                           
   549                           ;Current_Monitor.c: 43: TRISD=0x00;
   550  00120A  0E00               	movlw	0
   551  00120C  6E95               	movwf	3989,c	;volatile
   552                           
   553                           ;Current_Monitor.c: 44: TRISA=0xFF;
   554  00120E  6892               	setf	3986,c	;volatile
   555                           
   556                           ;Current_Monitor.c: 45: Initialize_UART();
   557  001210  ECD6  F00A         	call	_Initialize_UART	;wreg free
   558                           
   559                           ;Current_Monitor.c: 46: sprintf(b,"Acquisition in progress please wait: \n");
   560  001214  0E31               	movlw	low _b
   561  001216  6E0D               	movwf	sprintf@sp,c
   562  001218  0E00               	movlw	high _b
   563  00121A  6E0E               	movwf	sprintf@sp+1,c
   564  00121C  0E42               	movlw	low STR_1
   565  00121E  6E0F               	movwf	sprintf@f,c
   566  001220  0E10               	movlw	high STR_1
   567  001222  6E10               	movwf	sprintf@f+1,c
   568  001224  EC56  F008         	call	_sprintf	;wreg free
   569                           
   570                           ;Current_Monitor.c: 47: Send_to_UART();
   571  001228  EC72  F00A         	call	_Send_to_UART	;wreg free
   572                           
   573                           ;Current_Monitor.c: 48: Initialize_Analog();
   574  00122C  ECC8  F00A         	call	_Initialize_Analog	;wreg free
   575                           
   576                           ;Current_Monitor.c: 49: Analog_Capture_ON ();
   577  001230  ECD6  F009         	call	_Analog_Capture_ON	;wreg free
   578                           
   579                           ;Current_Monitor.c: 51: for (uint8_t x=0,y=0;x<=50,y<=50;x++,y++)
   580  001234  0E00               	movlw	0
   581  001236  6E23               	movwf	main@x,c
   582  001238  0E00               	movlw	0
   583  00123A  6E24               	movwf	main@y,c
   584  00123C  D014               	goto	l1396
   585  00123E                     l1390:
   586                           
   587                           ;Current_Monitor.c: 52: {
   588                           ;Current_Monitor.c: 53: EEPROM_Write(x,Sample[y]);
   589  00123E  5024               	movf	main@y,w,c
   590  001240  0D01               	mullw	1
   591  001242  0EC4               	movlw	low _Sample
   592  001244  24F3               	addwf	prodl,w,c
   593  001246  6ED9               	movwf	fsr2l,c
   594  001248  0E00               	movlw	high _Sample
   595  00124A  20F4               	addwfc	prodh,w,c
   596  00124C  6EDA               	movwf	fsr2h,c
   597  00124E  50DF               	movf	indf2,w,c
   598  001250  6E1D               	movwf	??_main& (0+255),c
   599  001252  6A1E               	clrf	(??_main+1)& (0+255),c
   600  001254  C01D  F001         	movff	??_main,EEPROM_Write@value
   601  001258  C01E  F002         	movff	??_main+1,EEPROM_Write@value+1
   602  00125C  5023               	movf	main@x,w,c
   603  00125E  ECA6  F00A         	call	_EEPROM_Write
   604  001262  2A23               	incf	main@x,f,c
   605  001264  2A24               	incf	main@y,f,c
   606  001266                     l1396:
   607  001266  0E32               	movlw	50
   608  001268  6424               	cpfsgt	main@y,c
   609  00126A  D7E9               	goto	l1390
   610  00126C                     l1398:
   611                           
   612                           ;Current_Monitor.c: 58: {
   613                           ;Current_Monitor.c: 59: sprintf(b,"Acquisition completed press S to read or R to reset: 
      +                          \n");
   614  00126C  0E31               	movlw	low _b
   615  00126E  6E0D               	movwf	sprintf@sp,c
   616  001270  0E00               	movlw	high _b
   617  001272  6E0E               	movwf	sprintf@sp+1,c
   618  001274  0E0B               	movlw	low STR_2
   619  001276  6E0F               	movwf	sprintf@f,c
   620  001278  0E10               	movlw	high STR_2
   621  00127A  6E10               	movwf	sprintf@f+1,c
   622  00127C  EC56  F008         	call	_sprintf	;wreg free
   623                           
   624                           ;Current_Monitor.c: 60: Send_to_UART();
   625  001280  EC72  F00A         	call	_Send_to_UART	;wreg free
   626                           
   627                           ;Current_Monitor.c: 61: Read_UART_Input();
   628  001284  ECE0  F00A         	call	_Read_UART_Input	;wreg free
   629                           
   630                           ;Current_Monitor.c: 62: if(Keyboard=='R')
   631  001288  0E52               	movlw	82
   632  00128A  182B               	xorwf	_Keyboard,w,c
   633  00128C  A4D8               	btfss	status,2,c
   634  00128E  D003               	goto	l1408
   635  001290  6AFA               	clrf	pclath,c	;# 
   636  001292  EF00 F000          	goto	0	;# 
   637  001296                     l1408:
   638                           
   639                           ;Current_Monitor.c: 66: }
   640                           ;Current_Monitor.c: 68: if(Keyboard=='S')
   641  001296  0E53               	movlw	83
   642  001298  182B               	xorwf	_Keyboard,w,c
   643  00129A  A4D8               	btfss	status,2,c
   644  00129C  D7E7               	goto	l1398
   645                           
   646                           ;Current_Monitor.c: 69: {
   647                           ;Current_Monitor.c: 70: Send_to_UART();
   648  00129E  EC72  F00A         	call	_Send_to_UART	;wreg free
   649                           
   650                           ;Current_Monitor.c: 71: Analog_Capture_OFF();
   651  0012A2  ECE6  F00A         	call	_Analog_Capture_OFF	;wreg free
   652                           
   653                           ;Current_Monitor.c: 72: for(int x=0;x<=50;x++)
   654  0012A6  0E00               	movlw	0
   655  0012A8  6E26               	movwf	main@x_612+1,c
   656  0012AA  0E00               	movlw	0
   657  0012AC  6E25               	movwf	main@x_612,c
   658  0012AE                     l1416:
   659  0012AE  BE26               	btfsc	main@x_612+1,7,c
   660  0012B0  D006               	goto	l1420
   661  0012B2  5026               	movf	main@x_612+1,w,c
   662  0012B4  E123               	bnz	l1434
   663  0012B6  0E33               	movlw	51
   664  0012B8  5C25               	subwf	main@x_612,w,c
   665  0012BA  B0D8               	btfsc	status,0,c
   666  0012BC  D01F               	goto	l1434
   667  0012BE                     l1420:
   668                           
   669                           ;Current_Monitor.c: 73: {
   670                           ;Current_Monitor.c: 74: EEPROM_Read(x);
   671  0012BE  5025               	movf	main@x_612,w,c
   672  0012C0  EC91  F00A         	call	_EEPROM_Read
   673                           
   674                           ;Current_Monitor.c: 75: int i =0;
   675  0012C4  0E00               	movlw	0
   676  0012C6  6E20               	movwf	main@i+1,c
   677  0012C8  0E00               	movlw	0
   678  0012CA  6E1F               	movwf	main@i,c
   679                           
   680                           ;Current_Monitor.c: 76: i++;
   681  0012CC  4A1F               	infsnz	main@i,f,c
   682  0012CE  2A20               	incf	main@i+1,f,c
   683                           
   684                           ;Current_Monitor.c: 77: sprintf(b,"Sampling number %d: %d mA :\n",x,result_EEPROM);
   685  0012D0  0E31               	movlw	low _b
   686  0012D2  6E0D               	movwf	sprintf@sp,c
   687  0012D4  0E00               	movlw	high _b
   688  0012D6  6E0E               	movwf	sprintf@sp+1,c
   689  0012D8  0E8D               	movlw	low STR_3
   690  0012DA  6E0F               	movwf	sprintf@f,c
   691  0012DC  0E10               	movlw	high STR_3
   692  0012DE  6E10               	movwf	sprintf@f+1,c
   693  0012E0  C025  F011         	movff	main@x_612,?_sprintf+4
   694  0012E4  C026  F012         	movff	main@x_612+1,?_sprintf+5
   695  0012E8  C02D  F013         	movff	_result_EEPROM,?_sprintf+6
   696  0012EC  6A14               	clrf	?_sprintf+7,c
   697  0012EE  EC56  F008         	call	_sprintf	;wreg free
   698                           
   699                           ;Current_Monitor.c: 78: Send_to_UART();
   700  0012F2  EC72  F00A         	call	_Send_to_UART	;wreg free
   701  0012F6  4A25               	infsnz	main@x_612,f,c
   702  0012F8  2A26               	incf	main@x_612+1,f,c
   703  0012FA  D7D9               	goto	l1416
   704  0012FC                     l1434:
   705                           
   706                           ;Current_Monitor.c: 79: }
   707                           ;Current_Monitor.c: 80: int i =0;
   708  0012FC  0E00               	movlw	0
   709  0012FE  6E22               	movwf	main@i_615+1,c
   710  001300  0E00               	movlw	0
   711  001302  6E21               	movwf	main@i_615,c
   712                           
   713                           ;Current_Monitor.c: 81: i++;
   714  001304  4A21               	infsnz	main@i_615,f,c
   715  001306  2A22               	incf	main@i_615+1,f,c
   716                           
   717                           ;Current_Monitor.c: 82: sprintf(b,"Average of last 50 Samples: %d mA \n",Average);
   718  001308  0E31               	movlw	low _b
   719  00130A  6E0D               	movwf	sprintf@sp,c
   720  00130C  0E00               	movlw	high _b
   721  00130E  6E0E               	movwf	sprintf@sp+1,c
   722  001310  0E69               	movlw	low STR_4
   723  001312  6E0F               	movwf	sprintf@f,c
   724  001314  0E10               	movlw	high STR_4
   725  001316  6E10               	movwf	sprintf@f+1,c
   726  001318  C02C  F011         	movff	_Average,?_sprintf+4
   727  00131C  6A12               	clrf	?_sprintf+5,c
   728  00131E  EC56  F008         	call	_sprintf	;wreg free
   729                           
   730                           ;Current_Monitor.c: 83: Send_to_UART();
   731  001322  EC72  F00A         	call	_Send_to_UART	;wreg free
   732  001326  D7A2               	goto	l1398
   733  001328                     __end_of_main:
   734                           	opt stack 0
   735                           pclath	equ	0xFFA
   736                           prodh	equ	0xFF4
   737                           prodl	equ	0xFF3
   738                           postinc0	equ	0xFEE
   739                           wreg	equ	0xFE8
   740                           indf2	equ	0xFDF
   741                           fsr2h	equ	0xFDA
   742                           fsr2l	equ	0xFD9
   743                           status	equ	0xFD8
   744                           
   745 ;; *************** function _sprintf *****************
   746 ;; Defined at:
   747 ;;		line 492 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
   748 ;; Parameters:    Size  Location     Type
   749 ;;  sp              2   12[COMRAM] PTR unsigned char 
   750 ;;		 -> b(3), 
   751 ;;  f               2   14[COMRAM] PTR const unsigned char 
   752 ;;		 -> STR_4(36), STR_3(29), STR_2(55), STR_1(39), 
   753 ;; Auto vars:     Size  Location     Type
   754 ;;  tmpval          4    0        struct .
   755 ;;  cp              3    0        PTR const unsigned char 
   756 ;;  val             2   25[COMRAM] unsigned int 
   757 ;;  ap              2   21[COMRAM] PTR void [1]
   758 ;;		 -> ?_sprintf(2), 
   759 ;;  len             2    0        unsigned int 
   760 ;;  c               1   27[COMRAM] char 
   761 ;;  prec            1   24[COMRAM] char 
   762 ;;  flag            1   23[COMRAM] unsigned char 
   763 ;; Return value:  Size  Location     Type
   764 ;;                  2   12[COMRAM] int 
   765 ;; Registers used:
   766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   767 ;; Tracked objects:
   768 ;;		On entry : 0/0
   769 ;;		On exit  : 0/0
   770 ;;		Unchanged: 0/0
   771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   772 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   773 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   774 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   775 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   776 ;;Total ram usage:       16 bytes
   777 ;; Hardware stack levels used:    1
   778 ;; Hardware stack levels required when called:    1
   779 ;; This function calls:
   780 ;;		___lwdiv
   781 ;;		___lwmod
   782 ;; This function is called by:
   783 ;;		_main
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           	psect	text1
   788  0010AC                     __ptext1:
   789                           	opt stack 0
   790  0010AC                     _sprintf:
   791                           	opt stack 29
   792                           
   793                           ;doprnt.c: 494: va_list ap;
   794                           ;doprnt.c: 499: signed char c;
   795                           ;doprnt.c: 506: signed char prec;
   796                           ;doprnt.c: 508: unsigned char flag;
   797                           ;doprnt.c: 523: union {
   798                           ;doprnt.c: 524: unsigned long vd;
   799                           ;doprnt.c: 525: double integ;
   800                           ;doprnt.c: 526: } tmpval;
   801                           ;doprnt.c: 528: unsigned int val;
   802                           ;doprnt.c: 529: unsigned len;
   803                           ;doprnt.c: 530: const char * cp;
   804                           ;doprnt.c: 533: *ap = __va_start();
   805                           
   806                           ;incstack = 0
   807  0010AC  0E11               	movlw	low (?_sprintf+4)
   808  0010AE  6E16               	movwf	sprintf@ap,c
   809  0010B0  0E00               	movlw	high (?_sprintf+4)
   810  0010B2  6E17               	movwf	sprintf@ap+1,c
   811                           
   812                           ;doprnt.c: 536: while(c = *f++) {
   813  0010B4  D094               	goto	l1292
   814  0010B6                     l1240:
   815                           
   816                           ;doprnt.c: 538: if(c != '%')
   817  0010B6  0E25               	movlw	37
   818  0010B8  181C               	xorwf	sprintf@c,w,c
   819  0010BA  B4D8               	btfsc	status,2,c
   820  0010BC  D009               	goto	l1246
   821                           
   822                           ;doprnt.c: 540: {
   823                           ;doprnt.c: 541: ((*sp++ = (c)));
   824  0010BE  C00D  FFD9         	movff	sprintf@sp,fsr2l
   825  0010C2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   826  0010C6  C01C  FFDF         	movff	sprintf@c,indf2
   827  0010CA  4A0D               	infsnz	sprintf@sp,f,c
   828  0010CC  2A0E               	incf	sprintf@sp+1,f,c
   829                           
   830                           ;doprnt.c: 542: continue;
   831  0010CE  D087               	goto	l1292
   832  0010D0                     l1246:
   833                           
   834                           ;doprnt.c: 543: }
   835                           ;doprnt.c: 548: flag = 0;
   836  0010D0  0E00               	movlw	0
   837  0010D2  6E18               	movwf	sprintf@flag,c
   838                           
   839                           ;doprnt.c: 822: }
   840                           
   841                           ;doprnt.c: 813: continue;
   842                           
   843                           ;doprnt.c: 802: default:
   844                           
   845                           ;doprnt.c: 698: case 'i':
   846                           ;doprnt.c: 699: break;
   847                           
   848                           ;doprnt.c: 697: case 'd':
   849                           
   850                           ;doprnt.c: 638: goto alldone;
   851                           
   852                           ;doprnt.c: 637: case 0:
   853                           
   854                           ;doprnt.c: 635: switch(c = *f++) {
   855  0010D4  C00F  FFF6         	movff	sprintf@f,tblptrl
   856  0010D8  C010  FFF7         	movff	sprintf@f+1,tblptrh
   857  0010DC  4A0F               	infsnz	sprintf@f,f,c
   858  0010DE  2A10               	incf	sprintf@f+1,f,c
   859  0010E0                     	if	0	;tblptru may be non-zero
   860  0010E0                     	endif
   861  0010E0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
   862  0010E0  0E00               	movlw	low (__mediumconst shr (0+16))
   863  0010E2  6EF8               	movwf	tblptru,c
   864  0010E4                     	endif
   865  0010E4  0008               	tblrd		*
   866  0010E6  CFF5 F01C          	movff	tablat,sprintf@c
   867  0010EA  501C               	movf	sprintf@c,w,c
   868                           
   869                           ; Switch size 1, requested type "space"
   870                           ; Number of cases is 3, Range of values is 0 to 105
   871                           ; switch strategies available:
   872                           ; Name         Instructions Cycles
   873                           ; simple_byte           10     6 (average)
   874                           ;	Chosen strategy is simple_byte
   875  0010EC  0A00               	xorlw	0	; case 0
   876  0010EE  B4D8               	btfsc	status,2,c
   877  0010F0  D084               	goto	l1294
   878  0010F2  0A64               	xorlw	100	; case 100
   879  0010F4  B4D8               	btfsc	status,2,c
   880  0010F6  D003               	goto	l1252
   881  0010F8  0A0D               	xorlw	13	; case 105
   882  0010FA  A4D8               	btfss	status,2,c
   883  0010FC  D070               	goto	l1292
   884  0010FE                     l1252:
   885                           
   886                           ;doprnt.c: 1253: {
   887                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   888  0010FE  C016  FFD9         	movff	sprintf@ap,fsr2l
   889  001102  C017  FFDA         	movff	sprintf@ap+1,fsr2h
   890  001106  CFDE F01A          	movff	postinc2,sprintf@val
   891  00110A  CFDD F01B          	movff	postdec2,sprintf@val+1
   892  00110E  0E02               	movlw	2
   893  001110  2616               	addwf	sprintf@ap,f,c
   894  001112  0E00               	movlw	0
   895  001114  2217               	addwfc	sprintf@ap+1,f,c
   896                           
   897                           ;doprnt.c: 1261: if((int)val < 0) {
   898  001116  AE1B               	btfss	sprintf@val+1,7,c
   899  001118  D006               	goto	l1262
   900                           
   901                           ;doprnt.c: 1262: flag |= 0x03;
   902  00111A  0E03               	movlw	3
   903  00111C  1218               	iorwf	sprintf@flag,f,c
   904                           
   905                           ;doprnt.c: 1263: val = -val;
   906  00111E  6C1A               	negf	sprintf@val,c
   907  001120  1E1B               	comf	sprintf@val+1,f,c
   908  001122  B0D8               	btfsc	status,0,c
   909  001124  2A1B               	incf	sprintf@val+1,f,c
   910  001126                     l1262:
   911                           
   912                           ;doprnt.c: 1264: }
   913                           ;doprnt.c: 1266: }
   914                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   915  001126  0E01               	movlw	1
   916  001128  6E1C               	movwf	sprintf@c,c
   917  00112A                     l1264:
   918  00112A  0E05               	movlw	5
   919  00112C  181C               	xorwf	sprintf@c,w,c
   920  00112E  B4D8               	btfsc	status,2,c
   921  001130  D015               	goto	l1276
   922                           
   923                           ;doprnt.c: 1306: if(val < dpowers[c])
   924  001132  501C               	movf	sprintf@c,w,c
   925  001134  0D02               	mullw	2
   926  001136  0E01               	movlw	low _dpowers
   927  001138  24F3               	addwf	prodl,w,c
   928  00113A  6EF6               	movwf	tblptrl,c
   929  00113C  0E10               	movlw	high _dpowers
   930  00113E  20F4               	addwfc	prodh,w,c
   931  001140  6EF7               	movwf	tblptrh,c
   932  001142                     	if	1	;There are 3 active tblptr bytes
   933  001142  6AF8               	clrf	tblptru,c
   934  001144  0E00               	movlw	low (__mediumconst shr (0+16))
   935  001146  22F8               	addwfc	tblptru,f,c
   936  001148                     	endif
   937  001148  0009               	tblrd		*+
   938  00114A  50F5               	movf	tablat,w,c
   939  00114C  5C1A               	subwf	sprintf@val,w,c
   940  00114E  0009               	tblrd		*+
   941  001150  50F5               	movf	tablat,w,c
   942  001152  581B               	subwfb	sprintf@val+1,w,c
   943  001154  A0D8               	btfss	status,0,c
   944  001156  D002               	goto	l1276
   945                           
   946                           ;doprnt.c: 1307: break;
   947  001158  2A1C               	incf	sprintf@c,f,c
   948  00115A  D7E7               	goto	l1264
   949  00115C                     l1276:
   950                           
   951                           ;doprnt.c: 1422: {
   952                           ;doprnt.c: 1438: if(flag & 0x03)
   953  00115C  C018  F015         	movff	sprintf@flag,??_sprintf
   954  001160  0E03               	movlw	3
   955  001162  1615               	andwf	??_sprintf,f,c
   956  001164  B4D8               	btfsc	status,2,c
   957  001166  D008               	goto	l1282
   958                           
   959                           ;doprnt.c: 1439: ((*sp++ = ('-')));
   960  001168  C00D  FFD9         	movff	sprintf@sp,fsr2l
   961  00116C  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   962  001170  0E2D               	movlw	45
   963  001172  6EDF               	movwf	indf2,c
   964  001174  4A0D               	infsnz	sprintf@sp,f,c
   965  001176  2A0E               	incf	sprintf@sp+1,f,c
   966  001178                     l1282:
   967                           
   968                           ;doprnt.c: 1469: }
   969                           ;doprnt.c: 1472: prec = c;
   970  001178  C01C  F019         	movff	sprintf@c,sprintf@prec
   971                           
   972                           ;doprnt.c: 1474: while(prec--) {
   973  00117C  D02C               	goto	l1290
   974  00117E                     l1284:
   975                           
   976                           ;doprnt.c: 1478: {
   977                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
   978  00117E  5019               	movf	sprintf@prec,w,c
   979  001180  0D02               	mullw	2
   980  001182  0E01               	movlw	low _dpowers
   981  001184  24F3               	addwf	prodl,w,c
   982  001186  6EF6               	movwf	tblptrl,c
   983  001188  0E10               	movlw	high _dpowers
   984  00118A  20F4               	addwfc	prodh,w,c
   985  00118C  6EF7               	movwf	tblptrh,c
   986  00118E                     	if	1	;There are 3 active tblptr bytes
   987  00118E  6AF8               	clrf	tblptru,c
   988  001190  0E00               	movlw	low (__mediumconst shr (0+16))
   989  001192  22F8               	addwfc	tblptru,f,c
   990  001194                     	endif
   991  001194  0009               	tblrd		*+
   992  001196  CFF5 F003          	movff	tablat,___lwdiv@divisor
   993  00119A  000A               	tblrd		*-
   994  00119C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   995  0011A0  C01A  F001         	movff	sprintf@val,___lwdiv@dividend
   996  0011A4  C01B  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
   997  0011A8  EC05  F00A         	call	___lwdiv	;wreg free
   998  0011AC  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   999  0011B0  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1000  0011B4  0E00               	movlw	0
  1001  0011B6  6E0B               	movwf	___lwmod@divisor+1,c
  1002  0011B8  0E0A               	movlw	10
  1003  0011BA  6E0A               	movwf	___lwmod@divisor,c
  1004  0011BC  EC51  F00A         	call	___lwmod	;wreg free
  1005  0011C0  5008               	movf	?___lwmod,w,c
  1006  0011C2  0F30               	addlw	48
  1007  0011C4  6E1C               	movwf	sprintf@c,c
  1008                           
  1009                           ;doprnt.c: 1523: }
  1010                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1011  0011C6  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1012  0011CA  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1013  0011CE  C01C  FFDF         	movff	sprintf@c,indf2
  1014  0011D2  4A0D               	infsnz	sprintf@sp,f,c
  1015  0011D4  2A0E               	incf	sprintf@sp+1,f,c
  1016  0011D6                     l1290:
  1017  0011D6  0619               	decf	sprintf@prec,f,c
  1018  0011D8  2819               	incf	sprintf@prec,w,c
  1019  0011DA  A4D8               	btfss	status,2,c
  1020  0011DC  D7D0               	goto	l1284
  1021  0011DE                     l1292:
  1022  0011DE  C00F  FFF6         	movff	sprintf@f,tblptrl
  1023  0011E2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1024  0011E6  4A0F               	infsnz	sprintf@f,f,c
  1025  0011E8  2A10               	incf	sprintf@f+1,f,c
  1026  0011EA                     	if	0	;tblptru may be non-zero
  1027  0011EA                     	endif
  1028  0011EA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1029  0011EA  0E00               	movlw	low (__mediumconst shr (0+16))
  1030  0011EC  6EF8               	movwf	tblptru,c
  1031  0011EE                     	endif
  1032  0011EE  0008               	tblrd		*
  1033  0011F0  CFF5 F01C          	movff	tablat,sprintf@c
  1034  0011F4  501C               	movf	sprintf@c,w,c
  1035  0011F6  A4D8               	btfss	status,2,c
  1036  0011F8  D75E               	goto	l1240
  1037  0011FA                     l1294:
  1038                           
  1039                           ;doprnt.c: 1538: *sp = 0;
  1040  0011FA  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1041  0011FE  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1042  001202  0E00               	movlw	0
  1043  001204  6EDF               	movwf	indf2,c
  1044  001206  0012               	return	
  1045  001208                     __end_of_sprintf:
  1046                           	opt stack 0
  1047                           pclath	equ	0xFFA
  1048                           tblptru	equ	0xFF8
  1049                           tblptrh	equ	0xFF7
  1050                           tblptrl	equ	0xFF6
  1051                           tablat	equ	0xFF5
  1052                           prodh	equ	0xFF4
  1053                           prodl	equ	0xFF3
  1054                           postinc0	equ	0xFEE
  1055                           wreg	equ	0xFE8
  1056                           indf2	equ	0xFDF
  1057                           postinc2	equ	0xFDE
  1058                           postdec2	equ	0xFDD
  1059                           fsr2h	equ	0xFDA
  1060                           fsr2l	equ	0xFD9
  1061                           status	equ	0xFD8
  1062                           
  1063 ;; *************** function ___lwmod *****************
  1064 ;; Defined at:
  1065 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  1066 ;; Parameters:    Size  Location     Type
  1067 ;;  dividend        2    7[COMRAM] unsigned int 
  1068 ;;  divisor         2    9[COMRAM] unsigned int 
  1069 ;; Auto vars:     Size  Location     Type
  1070 ;;  counter         1   11[COMRAM] unsigned char 
  1071 ;; Return value:  Size  Location     Type
  1072 ;;                  2    7[COMRAM] unsigned int 
  1073 ;; Registers used:
  1074 ;;		wreg, status,2, status,0
  1075 ;; Tracked objects:
  1076 ;;		On entry : 0/0
  1077 ;;		On exit  : 0/0
  1078 ;;		Unchanged: 0/0
  1079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1080 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1081 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1083 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1084 ;;Total ram usage:        5 bytes
  1085 ;; Hardware stack levels used:    1
  1086 ;; This function calls:
  1087 ;;		Nothing
  1088 ;; This function is called by:
  1089 ;;		_sprintf
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           	psect	text2
  1094  0014A2                     __ptext2:
  1095                           	opt stack 0
  1096  0014A2                     ___lwmod:
  1097                           	opt stack 29
  1098                           
  1099                           ;incstack = 0
  1100  0014A2  500A               	movf	___lwmod@divisor,w,c
  1101  0014A4  100B               	iorwf	___lwmod@divisor+1,w,c
  1102  0014A6  B4D8               	btfsc	status,2,c
  1103  0014A8  D018               	goto	l603
  1104  0014AA  0E01               	movlw	1
  1105  0014AC  6E0C               	movwf	___lwmod@counter,c
  1106  0014AE  D004               	goto	l1220
  1107  0014B0                     l1218:
  1108  0014B0  90D8               	bcf	status,0,c
  1109  0014B2  360A               	rlcf	___lwmod@divisor,f,c
  1110  0014B4  360B               	rlcf	___lwmod@divisor+1,f,c
  1111  0014B6  2A0C               	incf	___lwmod@counter,f,c
  1112  0014B8                     l1220:
  1113  0014B8  AE0B               	btfss	___lwmod@divisor+1,7,c
  1114  0014BA  D7FA               	goto	l1218
  1115  0014BC                     l1222:
  1116  0014BC  500A               	movf	___lwmod@divisor,w,c
  1117  0014BE  5C08               	subwf	___lwmod@dividend,w,c
  1118  0014C0  500B               	movf	___lwmod@divisor+1,w,c
  1119  0014C2  5809               	subwfb	___lwmod@dividend+1,w,c
  1120  0014C4  A0D8               	btfss	status,0,c
  1121  0014C6  D004               	goto	l1226
  1122  0014C8  500A               	movf	___lwmod@divisor,w,c
  1123  0014CA  5E08               	subwf	___lwmod@dividend,f,c
  1124  0014CC  500B               	movf	___lwmod@divisor+1,w,c
  1125  0014CE  5A09               	subwfb	___lwmod@dividend+1,f,c
  1126  0014D0                     l1226:
  1127  0014D0  90D8               	bcf	status,0,c
  1128  0014D2  320B               	rrcf	___lwmod@divisor+1,f,c
  1129  0014D4  320A               	rrcf	___lwmod@divisor,f,c
  1130  0014D6  2E0C               	decfsz	___lwmod@counter,f,c
  1131  0014D8  D7F1               	goto	l1222
  1132  0014DA                     l603:
  1133  0014DA  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1134  0014DE  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1135  0014E2  0012               	return		;funcret
  1136  0014E4                     __end_of___lwmod:
  1137                           	opt stack 0
  1138                           pclath	equ	0xFFA
  1139                           tblptru	equ	0xFF8
  1140                           tblptrh	equ	0xFF7
  1141                           tblptrl	equ	0xFF6
  1142                           tablat	equ	0xFF5
  1143                           prodh	equ	0xFF4
  1144                           prodl	equ	0xFF3
  1145                           postinc0	equ	0xFEE
  1146                           wreg	equ	0xFE8
  1147                           indf2	equ	0xFDF
  1148                           postinc2	equ	0xFDE
  1149                           postdec2	equ	0xFDD
  1150                           fsr2h	equ	0xFDA
  1151                           fsr2l	equ	0xFD9
  1152                           status	equ	0xFD8
  1153                           
  1154 ;; *************** function ___lwdiv *****************
  1155 ;; Defined at:
  1156 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  1157 ;; Parameters:    Size  Location     Type
  1158 ;;  dividend        2    0[COMRAM] unsigned int 
  1159 ;;  divisor         2    2[COMRAM] unsigned int 
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;  quotient        2    4[COMRAM] unsigned int 
  1162 ;;  counter         1    6[COMRAM] unsigned char 
  1163 ;; Return value:  Size  Location     Type
  1164 ;;                  2    0[COMRAM] unsigned int 
  1165 ;; Registers used:
  1166 ;;		wreg, status,2, status,0
  1167 ;; Tracked objects:
  1168 ;;		On entry : 0/0
  1169 ;;		On exit  : 0/0
  1170 ;;		Unchanged: 0/0
  1171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1172 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1173 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1175 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1176 ;;Total ram usage:        7 bytes
  1177 ;; Hardware stack levels used:    1
  1178 ;; This function calls:
  1179 ;;		Nothing
  1180 ;; This function is called by:
  1181 ;;		_sprintf
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           	psect	text3
  1186  00140A                     __ptext3:
  1187                           	opt stack 0
  1188  00140A                     ___lwdiv:
  1189                           	opt stack 29
  1190                           
  1191                           ;incstack = 0
  1192  00140A  0E00               	movlw	0
  1193  00140C  6E06               	movwf	___lwdiv@quotient+1,c
  1194  00140E  0E00               	movlw	0
  1195  001410  6E05               	movwf	___lwdiv@quotient,c
  1196  001412  5003               	movf	___lwdiv@divisor,w,c
  1197  001414  1004               	iorwf	___lwdiv@divisor+1,w,c
  1198  001416  B4D8               	btfsc	status,2,c
  1199  001418  D01C               	goto	l593
  1200  00141A  0E01               	movlw	1
  1201  00141C  6E07               	movwf	___lwdiv@counter,c
  1202  00141E  D004               	goto	l1200
  1203  001420                     l1198:
  1204  001420  90D8               	bcf	status,0,c
  1205  001422  3603               	rlcf	___lwdiv@divisor,f,c
  1206  001424  3604               	rlcf	___lwdiv@divisor+1,f,c
  1207  001426  2A07               	incf	___lwdiv@counter,f,c
  1208  001428                     l1200:
  1209  001428  AE04               	btfss	___lwdiv@divisor+1,7,c
  1210  00142A  D7FA               	goto	l1198
  1211  00142C                     l1202:
  1212  00142C  90D8               	bcf	status,0,c
  1213  00142E  3605               	rlcf	___lwdiv@quotient,f,c
  1214  001430  3606               	rlcf	___lwdiv@quotient+1,f,c
  1215  001432  5003               	movf	___lwdiv@divisor,w,c
  1216  001434  5C01               	subwf	___lwdiv@dividend,w,c
  1217  001436  5004               	movf	___lwdiv@divisor+1,w,c
  1218  001438  5802               	subwfb	___lwdiv@dividend+1,w,c
  1219  00143A  A0D8               	btfss	status,0,c
  1220  00143C  D005               	goto	l1210
  1221  00143E  5003               	movf	___lwdiv@divisor,w,c
  1222  001440  5E01               	subwf	___lwdiv@dividend,f,c
  1223  001442  5004               	movf	___lwdiv@divisor+1,w,c
  1224  001444  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1225  001446  8005               	bsf	___lwdiv@quotient,0,c
  1226  001448                     l1210:
  1227  001448  90D8               	bcf	status,0,c
  1228  00144A  3204               	rrcf	___lwdiv@divisor+1,f,c
  1229  00144C  3203               	rrcf	___lwdiv@divisor,f,c
  1230  00144E  2E07               	decfsz	___lwdiv@counter,f,c
  1231  001450  D7ED               	goto	l1202
  1232  001452                     l593:
  1233  001452  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1234  001456  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1235  00145A  0012               	return		;funcret
  1236  00145C                     __end_of___lwdiv:
  1237                           	opt stack 0
  1238                           pclath	equ	0xFFA
  1239                           tblptru	equ	0xFF8
  1240                           tblptrh	equ	0xFF7
  1241                           tblptrl	equ	0xFF6
  1242                           tablat	equ	0xFF5
  1243                           prodh	equ	0xFF4
  1244                           prodl	equ	0xFF3
  1245                           postinc0	equ	0xFEE
  1246                           wreg	equ	0xFE8
  1247                           indf2	equ	0xFDF
  1248                           postinc2	equ	0xFDE
  1249                           postdec2	equ	0xFDD
  1250                           fsr2h	equ	0xFDA
  1251                           fsr2l	equ	0xFD9
  1252                           status	equ	0xFD8
  1253                           
  1254 ;; *************** function _Send_to_UART *****************
  1255 ;; Defined at:
  1256 ;;		line 114 in file "Current_Monitor.c"
  1257 ;; Parameters:    Size  Location     Type
  1258 ;;		None
  1259 ;; Auto vars:     Size  Location     Type
  1260 ;;  i               2    0[COMRAM] int 
  1261 ;; Return value:  Size  Location     Type
  1262 ;;                  1    wreg      void 
  1263 ;; Registers used:
  1264 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1265 ;; Tracked objects:
  1266 ;;		On entry : 0/0
  1267 ;;		On exit  : 0/0
  1268 ;;		Unchanged: 0/0
  1269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1271 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1274 ;;Total ram usage:        2 bytes
  1275 ;; Hardware stack levels used:    1
  1276 ;; This function calls:
  1277 ;;		Nothing
  1278 ;; This function is called by:
  1279 ;;		_main
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text4
  1284  0014E4                     __ptext4:
  1285                           	opt stack 0
  1286  0014E4                     _Send_to_UART:
  1287                           	opt stack 30
  1288                           
  1289                           ;Current_Monitor.c: 117: int i=0;
  1290                           
  1291                           ;incstack = 0
  1292  0014E4  0E00               	movlw	0
  1293  0014E6  6E02               	movwf	Send_to_UART@i+1,c
  1294  0014E8  0E00               	movlw	0
  1295  0014EA  6E01               	movwf	Send_to_UART@i,c
  1296                           
  1297                           ;Current_Monitor.c: 119: while (b[i]!='\0')
  1298  0014EC  D010               	goto	l1306
  1299  0014EE                     l1300:
  1300                           
  1301                           ;Current_Monitor.c: 120: {
  1302                           ;Current_Monitor.c: 122: TXREG1=(b[i++]);
  1303  0014EE  0E31               	movlw	low _b
  1304  0014F0  2401               	addwf	Send_to_UART@i,w,c
  1305  0014F2  6ED9               	movwf	fsr2l,c
  1306  0014F4  0E00               	movlw	high _b
  1307  0014F6  2002               	addwfc	Send_to_UART@i+1,w,c
  1308  0014F8  6EDA               	movwf	fsr2h,c
  1309  0014FA  50DF               	movf	indf2,w,c
  1310  0014FC  6EAD               	movwf	4013,c	;volatile
  1311  0014FE  4A01               	infsnz	Send_to_UART@i,f,c
  1312  001500  2A02               	incf	Send_to_UART@i+1,f,c
  1313                           
  1314                           ;Current_Monitor.c: 123: _delay((unsigned long)((50)*(10000000/4000000.0)));
  1315  001502  0E29               	movlw	41
  1316  001504                     u777:
  1317  001504  2EE8               	decfsz	wreg,f,c
  1318  001506  D7FE               	bra	u777
  1319  001508  D000               	nop2	
  1320  00150A                     l119:
  1321  00150A  A89E               	btfss	3998,4,c	;volatile
  1322  00150C  D7FE               	goto	l119
  1323  00150E                     l1306:
  1324  00150E  0E31               	movlw	low _b
  1325  001510  2401               	addwf	Send_to_UART@i,w,c
  1326  001512  6ED9               	movwf	fsr2l,c
  1327  001514  0E00               	movlw	high _b
  1328  001516  2002               	addwfc	Send_to_UART@i+1,w,c
  1329  001518  6EDA               	movwf	fsr2h,c
  1330  00151A  50DF               	movf	indf2,w,c
  1331  00151C  B4D8               	btfsc	status,2,c
  1332  00151E  0012               	return	
  1333  001520  D7E6               	goto	l1300
  1334  001522                     __end_of_Send_to_UART:
  1335                           	opt stack 0
  1336                           pclath	equ	0xFFA
  1337                           tblptru	equ	0xFF8
  1338                           tblptrh	equ	0xFF7
  1339                           tblptrl	equ	0xFF6
  1340                           tablat	equ	0xFF5
  1341                           prodh	equ	0xFF4
  1342                           prodl	equ	0xFF3
  1343                           postinc0	equ	0xFEE
  1344                           wreg	equ	0xFE8
  1345                           indf2	equ	0xFDF
  1346                           postinc2	equ	0xFDE
  1347                           postdec2	equ	0xFDD
  1348                           fsr2h	equ	0xFDA
  1349                           fsr2l	equ	0xFD9
  1350                           status	equ	0xFD8
  1351                           
  1352 ;; *************** function _Read_UART_Input *****************
  1353 ;; Defined at:
  1354 ;;		line 104 in file "Current_Monitor.c"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;		None
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;		None
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  1    wreg      void 
  1361 ;; Registers used:
  1362 ;;		None
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1372 ;;Total ram usage:        0 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; This function calls:
  1375 ;;		Nothing
  1376 ;; This function is called by:
  1377 ;;		_main
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text5
  1382  0015C0                     __ptext5:
  1383                           	opt stack 0
  1384  0015C0                     _Read_UART_Input:
  1385                           	opt stack 30
  1386                           
  1387                           ;Current_Monitor.c: 107: RCSTA1bits.CREN=1;
  1388                           
  1389                           ;incstack = 0
  1390  0015C0  88AB               	bsf	4011,4,c	;volatile
  1391  0015C2                     l111:
  1392  0015C2  AA9E               	btfss	3998,5,c	;volatile
  1393  0015C4  D7FE               	goto	l111
  1394                           
  1395                           ;Current_Monitor.c: 109: Keyboard=RCREG1;
  1396  0015C6  CFAE F02B          	movff	4014,_Keyboard	;volatile
  1397  0015CA  0012               	return		;funcret
  1398  0015CC                     __end_of_Read_UART_Input:
  1399                           	opt stack 0
  1400                           pclath	equ	0xFFA
  1401                           tblptru	equ	0xFF8
  1402                           tblptrh	equ	0xFF7
  1403                           tblptrl	equ	0xFF6
  1404                           tablat	equ	0xFF5
  1405                           prodh	equ	0xFF4
  1406                           prodl	equ	0xFF3
  1407                           postinc0	equ	0xFEE
  1408                           wreg	equ	0xFE8
  1409                           indf2	equ	0xFDF
  1410                           postinc2	equ	0xFDE
  1411                           postdec2	equ	0xFDD
  1412                           fsr2h	equ	0xFDA
  1413                           fsr2l	equ	0xFD9
  1414                           status	equ	0xFD8
  1415                           
  1416 ;; *************** function _Initialize_UART *****************
  1417 ;; Defined at:
  1418 ;;		line 89 in file "Current_Monitor.c"
  1419 ;; Parameters:    Size  Location     Type
  1420 ;;		None
  1421 ;; Auto vars:     Size  Location     Type
  1422 ;;		None
  1423 ;; Return value:  Size  Location     Type
  1424 ;;                  1    wreg      void 
  1425 ;; Registers used:
  1426 ;;		wreg, status,2
  1427 ;; Tracked objects:
  1428 ;;		On entry : 0/0
  1429 ;;		On exit  : 0/0
  1430 ;;		Unchanged: 0/0
  1431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1436 ;;Total ram usage:        0 bytes
  1437 ;; Hardware stack levels used:    1
  1438 ;; This function calls:
  1439 ;;		Nothing
  1440 ;; This function is called by:
  1441 ;;		_main
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           	psect	text6
  1446  0015AC                     __ptext6:
  1447                           	opt stack 0
  1448  0015AC                     _Initialize_UART:
  1449                           	opt stack 30
  1450                           
  1451                           ;Current_Monitor.c: 91: TRISCbits.RC7=1;
  1452                           
  1453                           ;incstack = 0
  1454  0015AC  8E94               	bsf	3988,7,c	;volatile
  1455                           
  1456                           ;Current_Monitor.c: 92: TRISCbits.RC6=0;
  1457  0015AE  9C94               	bcf	3988,6,c	;volatile
  1458                           
  1459                           ;Current_Monitor.c: 95: TXSTA1bits.SYNC=0;
  1460  0015B0  98AC               	bcf	4012,4,c	;volatile
  1461                           
  1462                           ;Current_Monitor.c: 96: TXSTA1bits.BRGH=0;
  1463  0015B2  94AC               	bcf	4012,2,c	;volatile
  1464                           
  1465                           ;Current_Monitor.c: 97: BAUDCON1bits.BRG16=0;
  1466  0015B4  967E               	bcf	3966,3,c	;volatile
  1467                           
  1468                           ;Current_Monitor.c: 98: SPBRG1=15;
  1469  0015B6  0E0F               	movlw	15
  1470  0015B8  6EAF               	movwf	4015,c	;volatile
  1471                           
  1472                           ;Current_Monitor.c: 99: RCSTA1bits.SPEN=1;
  1473  0015BA  8EAB               	bsf	4011,7,c	;volatile
  1474                           
  1475                           ;Current_Monitor.c: 100: TXSTA1bits.TXEN=1;
  1476  0015BC  8AAC               	bsf	4012,5,c	;volatile
  1477  0015BE  0012               	return		;funcret
  1478  0015C0                     __end_of_Initialize_UART:
  1479                           	opt stack 0
  1480                           pclath	equ	0xFFA
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           prodh	equ	0xFF4
  1486                           prodl	equ	0xFF3
  1487                           postinc0	equ	0xFEE
  1488                           wreg	equ	0xFE8
  1489                           indf2	equ	0xFDF
  1490                           postinc2	equ	0xFDE
  1491                           postdec2	equ	0xFDD
  1492                           fsr2h	equ	0xFDA
  1493                           fsr2l	equ	0xFD9
  1494                           status	equ	0xFD8
  1495                           
  1496 ;; *************** function _Initialize_Analog *****************
  1497 ;; Defined at:
  1498 ;;		line 129 in file "Current_Monitor.c"
  1499 ;; Parameters:    Size  Location     Type
  1500 ;;		None
  1501 ;; Auto vars:     Size  Location     Type
  1502 ;;		None
  1503 ;; Return value:  Size  Location     Type
  1504 ;;                  1    wreg      void 
  1505 ;; Registers used:
  1506 ;;		wreg, status,2
  1507 ;; Tracked objects:
  1508 ;;		On entry : 0/0
  1509 ;;		On exit  : 0/0
  1510 ;;		Unchanged: 0/0
  1511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1516 ;;Total ram usage:        0 bytes
  1517 ;; Hardware stack levels used:    1
  1518 ;; This function calls:
  1519 ;;		Nothing
  1520 ;; This function is called by:
  1521 ;;		_main
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524                           
  1525                           	psect	text7
  1526  001590                     __ptext7:
  1527                           	opt stack 0
  1528  001590                     _Initialize_Analog:
  1529                           	opt stack 30
  1530                           
  1531                           ;Current_Monitor.c: 133: TRISA=0xff;
  1532                           
  1533                           ;incstack = 0
  1534  001590  6892               	setf	3986,c	;volatile
  1535                           
  1536                           ;Current_Monitor.c: 134: TRISD=0x00;
  1537  001592  0E00               	movlw	0
  1538  001594  6E95               	movwf	3989,c	;volatile
  1539                           
  1540                           ;Current_Monitor.c: 135: PORTD=0x00;
  1541  001596  0E00               	movlw	0
  1542  001598  6E83               	movwf	3971,c	;volatile
  1543                           
  1544                           ;Current_Monitor.c: 136: PORTA=0x00;
  1545  00159A  0E00               	movlw	0
  1546  00159C  6E80               	movwf	3968,c	;volatile
  1547                           
  1548                           ;Current_Monitor.c: 139: ADCON0=0b00000001;
  1549  00159E  0E01               	movlw	1
  1550  0015A0  6EC2               	movwf	4034,c	;volatile
  1551                           
  1552                           ;Current_Monitor.c: 140: ADCON1=0b00000000;
  1553  0015A2  0E00               	movlw	0
  1554  0015A4  6EC1               	movwf	4033,c	;volatile
  1555                           
  1556                           ;Current_Monitor.c: 141: ADCON2=0b00000000;
  1557  0015A6  0E00               	movlw	0
  1558  0015A8  6EC0               	movwf	4032,c	;volatile
  1559  0015AA  0012               	return		;funcret
  1560  0015AC                     __end_of_Initialize_Analog:
  1561                           	opt stack 0
  1562                           pclath	equ	0xFFA
  1563                           tblptru	equ	0xFF8
  1564                           tblptrh	equ	0xFF7
  1565                           tblptrl	equ	0xFF6
  1566                           tablat	equ	0xFF5
  1567                           prodh	equ	0xFF4
  1568                           prodl	equ	0xFF3
  1569                           postinc0	equ	0xFEE
  1570                           wreg	equ	0xFE8
  1571                           indf2	equ	0xFDF
  1572                           postinc2	equ	0xFDE
  1573                           postdec2	equ	0xFDD
  1574                           fsr2h	equ	0xFDA
  1575                           fsr2l	equ	0xFD9
  1576                           status	equ	0xFD8
  1577                           
  1578 ;; *************** function _EEPROM_Write *****************
  1579 ;; Defined at:
  1580 ;;		line 171 in file "Current_Monitor.c"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;  address         1    wreg     unsigned char 
  1583 ;;  value           2    0[COMRAM] PTR unsigned char 
  1584 ;;		 -> RAM(3935), 
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;  address         1    2[COMRAM] unsigned char 
  1587 ;; Return value:  Size  Location     Type
  1588 ;;                  1    wreg      void 
  1589 ;; Registers used:
  1590 ;;		wreg, status,2
  1591 ;; Tracked objects:
  1592 ;;		On entry : 0/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1596 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1597 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1599 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1600 ;;Total ram usage:        3 bytes
  1601 ;; Hardware stack levels used:    1
  1602 ;; This function calls:
  1603 ;;		Nothing
  1604 ;; This function is called by:
  1605 ;;		_main
  1606 ;; This function uses a non-reentrant model
  1607 ;;
  1608                           
  1609                           	psect	text8
  1610  00154C                     __ptext8:
  1611                           	opt stack 0
  1612  00154C                     _EEPROM_Write:
  1613                           	opt stack 30
  1614                           
  1615                           ;incstack = 0
  1616                           ;EEPROM_Write@address stored from wreg
  1617  00154C  6E03               	movwf	EEPROM_Write@address,c
  1618                           
  1619                           ;Current_Monitor.c: 174: EECON1bits.WREN=1;
  1620  00154E  84A6               	bsf	4006,2,c	;volatile
  1621                           
  1622                           ;Current_Monitor.c: 175: EEADR=address ;
  1623  001550  C003  FFA9         	movff	EEPROM_Write@address,4009	;volatile
  1624                           
  1625                           ;Current_Monitor.c: 176: EEDATA=value;
  1626  001554  C001  FFA8         	movff	EEPROM_Write@value,4008	;volatile
  1627                           
  1628                           ;Current_Monitor.c: 177: EECON1bits.EEPGD=0;
  1629  001558  9EA6               	bcf	4006,7,c	;volatile
  1630                           
  1631                           ;Current_Monitor.c: 178: EECON1bits.CFGS=0;
  1632  00155A  9CA6               	bcf	4006,6,c	;volatile
  1633                           
  1634                           ;Current_Monitor.c: 179: INTCONbits.GIE=0;
  1635  00155C  9EF2               	bcf	intcon,7,c	;volatile
  1636                           
  1637                           ;Current_Monitor.c: 182: EECON2=0x55;
  1638  00155E  0E55               	movlw	85
  1639  001560  6EA7               	movwf	4007,c	;volatile
  1640                           
  1641                           ;Current_Monitor.c: 183: EECON2=0xAA;
  1642  001562  0EAA               	movlw	170
  1643  001564  6EA7               	movwf	4007,c	;volatile
  1644                           
  1645                           ;Current_Monitor.c: 184: EECON1bits.WR=1;
  1646  001566  82A6               	bsf	4006,1,c	;volatile
  1647                           
  1648                           ;Current_Monitor.c: 187: INTCONbits.GIE=1;
  1649  001568  8EF2               	bsf	intcon,7,c	;volatile
  1650  00156A                     l141:
  1651  00156A  B2A6               	btfsc	4006,1,c	;volatile
  1652  00156C  D7FE               	goto	l141
  1653                           
  1654                           ;Current_Monitor.c: 189: EECON1bits.WREN = 0;
  1655  00156E  94A6               	bcf	4006,2,c	;volatile
  1656  001570  0012               	return		;funcret
  1657  001572                     __end_of_EEPROM_Write:
  1658                           	opt stack 0
  1659                           pclath	equ	0xFFA
  1660                           tblptru	equ	0xFF8
  1661                           tblptrh	equ	0xFF7
  1662                           tblptrl	equ	0xFF6
  1663                           tablat	equ	0xFF5
  1664                           prodh	equ	0xFF4
  1665                           prodl	equ	0xFF3
  1666                           intcon	equ	0xFF2
  1667                           postinc0	equ	0xFEE
  1668                           wreg	equ	0xFE8
  1669                           indf2	equ	0xFDF
  1670                           postinc2	equ	0xFDE
  1671                           postdec2	equ	0xFDD
  1672                           fsr2h	equ	0xFDA
  1673                           fsr2l	equ	0xFD9
  1674                           status	equ	0xFD8
  1675                           
  1676 ;; *************** function _EEPROM_Read *****************
  1677 ;; Defined at:
  1678 ;;		line 194 in file "Current_Monitor.c"
  1679 ;; Parameters:    Size  Location     Type
  1680 ;;  address         1    wreg     unsigned char 
  1681 ;; Auto vars:     Size  Location     Type
  1682 ;;  address         1   10[COMRAM] unsigned char 
  1683 ;; Return value:  Size  Location     Type
  1684 ;;                  1    wreg      void 
  1685 ;; Registers used:
  1686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1687 ;; Tracked objects:
  1688 ;;		On entry : 0/0
  1689 ;;		On exit  : 0/0
  1690 ;;		Unchanged: 0/0
  1691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1693 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1695 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1696 ;;Total ram usage:        1 bytes
  1697 ;; Hardware stack levels used:    1
  1698 ;; Hardware stack levels required when called:    2
  1699 ;; This function calls:
  1700 ;;		_Average_Function
  1701 ;; This function is called by:
  1702 ;;		_main
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           	psect	text9
  1707  001522                     __ptext9:
  1708                           	opt stack 0
  1709  001522                     _EEPROM_Read:
  1710                           	opt stack 28
  1711                           
  1712                           ;incstack = 0
  1713                           ;EEPROM_Read@address stored from wreg
  1714  001522  6E0B               	movwf	EEPROM_Read@address,c
  1715                           
  1716                           ;Current_Monitor.c: 197: EEADR=address;
  1717  001524  C00B  FFA9         	movff	EEPROM_Read@address,4009	;volatile
  1718                           
  1719                           ;Current_Monitor.c: 198: EECON1bits.EEPGD=0;
  1720  001528  9EA6               	bcf	4006,7,c	;volatile
  1721                           
  1722                           ;Current_Monitor.c: 199: EECON1bits.CFGS=0;
  1723  00152A  9CA6               	bcf	4006,6,c	;volatile
  1724                           
  1725                           ;Current_Monitor.c: 200: EECON1bits.RD=1;
  1726  00152C  80A6               	bsf	4006,0,c	;volatile
  1727                           
  1728                           ;Current_Monitor.c: 201: result_EEPROM=EEDATA;
  1729  00152E  CFA8 F02D          	movff	4008,_result_EEPROM	;volatile
  1730                           
  1731                           ;Current_Monitor.c: 202: Sample_for_Average[x++]=result_EEPROM;
  1732  001532  0E60               	movlw	low _Sample_for_Average
  1733  001534  2427               	addwf	_x,w,c
  1734  001536  6ED9               	movwf	fsr2l,c
  1735  001538  0E00               	movlw	high _Sample_for_Average
  1736  00153A  2028               	addwfc	_x+1,w,c
  1737  00153C  6EDA               	movwf	fsr2h,c
  1738  00153E  C02D  FFDF         	movff	_result_EEPROM,indf2
  1739  001542  4A27               	infsnz	_x,f,c
  1740  001544  2A28               	incf	_x+1,f,c
  1741                           
  1742                           ;Current_Monitor.c: 203: Average_Function();
  1743  001546  EC2E  F00A         	call	_Average_Function	;wreg free
  1744  00154A  0012               	return		;funcret
  1745  00154C                     __end_of_EEPROM_Read:
  1746                           	opt stack 0
  1747                           pclath	equ	0xFFA
  1748                           tblptru	equ	0xFF8
  1749                           tblptrh	equ	0xFF7
  1750                           tblptrl	equ	0xFF6
  1751                           tablat	equ	0xFF5
  1752                           prodh	equ	0xFF4
  1753                           prodl	equ	0xFF3
  1754                           intcon	equ	0xFF2
  1755                           postinc0	equ	0xFEE
  1756                           wreg	equ	0xFE8
  1757                           indf2	equ	0xFDF
  1758                           postinc2	equ	0xFDE
  1759                           postdec2	equ	0xFDD
  1760                           fsr2h	equ	0xFDA
  1761                           fsr2l	equ	0xFD9
  1762                           status	equ	0xFD8
  1763                           
  1764 ;; *************** function _Average_Function *****************
  1765 ;; Defined at:
  1766 ;;		line 227 in file "Current_Monitor.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;		None
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;  x               2    8[COMRAM] int 
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  1    wreg      void 
  1773 ;; Registers used:
  1774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1781 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1783 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1784 ;;Total ram usage:        2 bytes
  1785 ;; Hardware stack levels used:    1
  1786 ;; Hardware stack levels required when called:    1
  1787 ;; This function calls:
  1788 ;;		___awdiv
  1789 ;; This function is called by:
  1790 ;;		_EEPROM_Read
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794                           	psect	text10
  1795  00145C                     __ptext10:
  1796                           	opt stack 0
  1797  00145C                     _Average_Function:
  1798                           	opt stack 28
  1799                           
  1800                           ;Current_Monitor.c: 230: for(int x=1;x<=50;x++)
  1801                           
  1802                           ;incstack = 0
  1803  00145C  0E00               	movlw	0
  1804  00145E  6E0A               	movwf	Average_Function@x+1,c
  1805  001460  0E01               	movlw	1
  1806  001462  6E09               	movwf	Average_Function@x,c
  1807  001464                     l1180:
  1808  001464  BE0A               	btfsc	Average_Function@x+1,7,c
  1809  001466  D006               	goto	l1184
  1810  001468  500A               	movf	Average_Function@x+1,w,c
  1811  00146A  E10F               	bnz	l1190
  1812  00146C  0E33               	movlw	51
  1813  00146E  5C09               	subwf	Average_Function@x,w,c
  1814  001470  B0D8               	btfsc	status,0,c
  1815  001472  D00B               	goto	l1190
  1816  001474                     l1184:
  1817                           
  1818                           ;Current_Monitor.c: 231: {
  1819                           ;Current_Monitor.c: 232: Average +=Sample_for_Average[x];
  1820  001474  0E60               	movlw	low _Sample_for_Average
  1821  001476  2409               	addwf	Average_Function@x,w,c
  1822  001478  6ED9               	movwf	fsr2l,c
  1823  00147A  0E00               	movlw	high _Sample_for_Average
  1824  00147C  200A               	addwfc	Average_Function@x+1,w,c
  1825  00147E  6EDA               	movwf	fsr2h,c
  1826  001480  50DF               	movf	indf2,w,c
  1827  001482  262C               	addwf	_Average,f,c
  1828  001484  4A09               	infsnz	Average_Function@x,f,c
  1829  001486  2A0A               	incf	Average_Function@x+1,f,c
  1830  001488  D7ED               	goto	l1180
  1831  00148A                     l1190:
  1832                           
  1833                           ;Current_Monitor.c: 234: }
  1834                           ;Current_Monitor.c: 235: Average=Average/50;
  1835  00148A  C02C  F001         	movff	_Average,___awdiv@dividend
  1836  00148E  6A02               	clrf	___awdiv@dividend+1,c
  1837  001490  0E00               	movlw	0
  1838  001492  6E04               	movwf	___awdiv@divisor+1,c
  1839  001494  0E32               	movlw	50
  1840  001496  6E03               	movwf	___awdiv@divisor,c
  1841  001498  EC94  F009         	call	___awdiv	;wreg free
  1842  00149C  5001               	movf	?___awdiv,w,c
  1843  00149E  6E2C               	movwf	_Average,c
  1844  0014A0  0012               	return		;funcret
  1845  0014A2                     __end_of_Average_Function:
  1846                           	opt stack 0
  1847                           pclath	equ	0xFFA
  1848                           tblptru	equ	0xFF8
  1849                           tblptrh	equ	0xFF7
  1850                           tblptrl	equ	0xFF6
  1851                           tablat	equ	0xFF5
  1852                           prodh	equ	0xFF4
  1853                           prodl	equ	0xFF3
  1854                           intcon	equ	0xFF2
  1855                           postinc0	equ	0xFEE
  1856                           wreg	equ	0xFE8
  1857                           indf2	equ	0xFDF
  1858                           postinc2	equ	0xFDE
  1859                           postdec2	equ	0xFDD
  1860                           fsr2h	equ	0xFDA
  1861                           fsr2l	equ	0xFD9
  1862                           status	equ	0xFD8
  1863                           
  1864 ;; *************** function ___awdiv *****************
  1865 ;; Defined at:
  1866 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;  dividend        2    0[COMRAM] int 
  1869 ;;  divisor         2    2[COMRAM] int 
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;  quotient        2    6[COMRAM] int 
  1872 ;;  sign            1    5[COMRAM] unsigned char 
  1873 ;;  counter         1    4[COMRAM] unsigned char 
  1874 ;; Return value:  Size  Location     Type
  1875 ;;                  2    0[COMRAM] int 
  1876 ;; Registers used:
  1877 ;;		wreg, status,2, status,0
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1883 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1884 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;Total ram usage:        8 bytes
  1888 ;; Hardware stack levels used:    1
  1889 ;; This function calls:
  1890 ;;		Nothing
  1891 ;; This function is called by:
  1892 ;;		_Average_Function
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           	psect	text11
  1897  001328                     __ptext11:
  1898                           	opt stack 0
  1899  001328                     ___awdiv:
  1900                           	opt stack 28
  1901                           
  1902                           ;incstack = 0
  1903  001328  0E00               	movlw	0
  1904  00132A  6E06               	movwf	___awdiv@sign,c
  1905  00132C  AE04               	btfss	___awdiv@divisor+1,7,c
  1906  00132E  D006               	goto	l1142
  1907  001330  6C03               	negf	___awdiv@divisor,c
  1908  001332  1E04               	comf	___awdiv@divisor+1,f,c
  1909  001334  B0D8               	btfsc	status,0,c
  1910  001336  2A04               	incf	___awdiv@divisor+1,f,c
  1911  001338  0E01               	movlw	1
  1912  00133A  6E06               	movwf	___awdiv@sign,c
  1913  00133C                     l1142:
  1914  00133C  AE02               	btfss	___awdiv@dividend+1,7,c
  1915  00133E  D006               	goto	l1148
  1916  001340  6C01               	negf	___awdiv@dividend,c
  1917  001342  1E02               	comf	___awdiv@dividend+1,f,c
  1918  001344  B0D8               	btfsc	status,0,c
  1919  001346  2A02               	incf	___awdiv@dividend+1,f,c
  1920  001348  0E01               	movlw	1
  1921  00134A  1A06               	xorwf	___awdiv@sign,f,c
  1922  00134C                     l1148:
  1923  00134C  0E00               	movlw	0
  1924  00134E  6E08               	movwf	___awdiv@quotient+1,c
  1925  001350  0E00               	movlw	0
  1926  001352  6E07               	movwf	___awdiv@quotient,c
  1927  001354  5003               	movf	___awdiv@divisor,w,c
  1928  001356  1004               	iorwf	___awdiv@divisor+1,w,c
  1929  001358  B4D8               	btfsc	status,2,c
  1930  00135A  D01C               	goto	l1170
  1931  00135C  0E01               	movlw	1
  1932  00135E  6E05               	movwf	___awdiv@counter,c
  1933  001360  D004               	goto	l1156
  1934  001362                     l1154:
  1935  001362  90D8               	bcf	status,0,c
  1936  001364  3603               	rlcf	___awdiv@divisor,f,c
  1937  001366  3604               	rlcf	___awdiv@divisor+1,f,c
  1938  001368  2A05               	incf	___awdiv@counter,f,c
  1939  00136A                     l1156:
  1940  00136A  AE04               	btfss	___awdiv@divisor+1,7,c
  1941  00136C  D7FA               	goto	l1154
  1942  00136E                     l1158:
  1943  00136E  90D8               	bcf	status,0,c
  1944  001370  3607               	rlcf	___awdiv@quotient,f,c
  1945  001372  3608               	rlcf	___awdiv@quotient+1,f,c
  1946  001374  5003               	movf	___awdiv@divisor,w,c
  1947  001376  5C01               	subwf	___awdiv@dividend,w,c
  1948  001378  5004               	movf	___awdiv@divisor+1,w,c
  1949  00137A  5802               	subwfb	___awdiv@dividend+1,w,c
  1950  00137C  A0D8               	btfss	status,0,c
  1951  00137E  D005               	goto	l1166
  1952  001380  5003               	movf	___awdiv@divisor,w,c
  1953  001382  5E01               	subwf	___awdiv@dividend,f,c
  1954  001384  5004               	movf	___awdiv@divisor+1,w,c
  1955  001386  5A02               	subwfb	___awdiv@dividend+1,f,c
  1956  001388  8007               	bsf	___awdiv@quotient,0,c
  1957  00138A                     l1166:
  1958  00138A  90D8               	bcf	status,0,c
  1959  00138C  3204               	rrcf	___awdiv@divisor+1,f,c
  1960  00138E  3203               	rrcf	___awdiv@divisor,f,c
  1961  001390  2E05               	decfsz	___awdiv@counter,f,c
  1962  001392  D7ED               	goto	l1158
  1963  001394                     l1170:
  1964  001394  5006               	movf	___awdiv@sign,w,c
  1965  001396  B4D8               	btfsc	status,2,c
  1966  001398  D004               	goto	l1174
  1967  00139A  6C07               	negf	___awdiv@quotient,c
  1968  00139C  1E08               	comf	___awdiv@quotient+1,f,c
  1969  00139E  B0D8               	btfsc	status,0,c
  1970  0013A0  2A08               	incf	___awdiv@quotient+1,f,c
  1971  0013A2                     l1174:
  1972  0013A2  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1973  0013A6  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1974  0013AA  0012               	return	
  1975  0013AC                     __end_of___awdiv:
  1976                           	opt stack 0
  1977                           pclath	equ	0xFFA
  1978                           tblptru	equ	0xFF8
  1979                           tblptrh	equ	0xFF7
  1980                           tblptrl	equ	0xFF6
  1981                           tablat	equ	0xFF5
  1982                           prodh	equ	0xFF4
  1983                           prodl	equ	0xFF3
  1984                           intcon	equ	0xFF2
  1985                           postinc0	equ	0xFEE
  1986                           wreg	equ	0xFE8
  1987                           indf2	equ	0xFDF
  1988                           postinc2	equ	0xFDE
  1989                           postdec2	equ	0xFDD
  1990                           fsr2h	equ	0xFDA
  1991                           fsr2l	equ	0xFD9
  1992                           status	equ	0xFD8
  1993                           
  1994 ;; *************** function _Analog_Capture_ON *****************
  1995 ;; Defined at:
  1996 ;;		line 146 in file "Current_Monitor.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;		None
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;  x               2    2[COMRAM] int 
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  1    wreg      void 
  2003 ;; Registers used:
  2004 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2011 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2012 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2013 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2014 ;;Total ram usage:        4 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; This function calls:
  2017 ;;		Nothing
  2018 ;; This function is called by:
  2019 ;;		_main
  2020 ;; This function uses a non-reentrant model
  2021 ;;
  2022                           
  2023                           	psect	text12
  2024  0013AC                     __ptext12:
  2025                           	opt stack 0
  2026  0013AC                     _Analog_Capture_ON:
  2027                           	opt stack 30
  2028                           
  2029                           ;Current_Monitor.c: 149: for(int x=0;x<=50;x++)
  2030                           
  2031                           ;incstack = 0
  2032  0013AC  0E00               	movlw	0
  2033  0013AE  6E04               	movwf	Analog_Capture_ON@x+1,c
  2034  0013B0  0E00               	movlw	0
  2035  0013B2  6E03               	movwf	Analog_Capture_ON@x,c
  2036  0013B4                     l1314:
  2037  0013B4  BE04               	btfsc	Analog_Capture_ON@x+1,7,c
  2038  0013B6  D006               	goto	l129
  2039  0013B8  5004               	movf	Analog_Capture_ON@x+1,w,c
  2040  0013BA  E126               	bnz	l135
  2041  0013BC  0E33               	movlw	51
  2042  0013BE  5C03               	subwf	Analog_Capture_ON@x,w,c
  2043  0013C0  B0D8               	btfsc	status,0,c
  2044  0013C2  0012               	return	
  2045  0013C4                     l129:
  2046                           
  2047                           ;Current_Monitor.c: 150: {
  2048                           ;Current_Monitor.c: 151: ADCON0bits.GO_DONE=1;
  2049  0013C4  82C2               	bsf	4034,1,c	;volatile
  2050  0013C6                     l131:
  2051  0013C6  B2C2               	btfsc	4034,1,c	;volatile
  2052  0013C8  D7FE               	goto	l131
  2053                           
  2054                           ;Current_Monitor.c: 153: Sample[x]=ADRESH;
  2055  0013CA  0EC4               	movlw	low _Sample
  2056  0013CC  2403               	addwf	Analog_Capture_ON@x,w,c
  2057  0013CE  6ED9               	movwf	fsr2l,c
  2058  0013D0  0E00               	movlw	high _Sample
  2059  0013D2  2004               	addwfc	Analog_Capture_ON@x+1,w,c
  2060  0013D4  6EDA               	movwf	fsr2h,c
  2061  0013D6  CFC4 FFDF          	movff	4036,indf2	;volatile
  2062                           
  2063                           ;Current_Monitor.c: 155: _delay((unsigned long)((500)*(10000000/4000.0)));
  2064  0013DA  0E07               	movlw	7
  2065  0013DC  6E02               	movwf	(??_Analog_Capture_ON+1)& (0+255),c
  2066  0013DE  0E58               	movlw	88
  2067  0013E0  6E01               	movwf	??_Analog_Capture_ON& (0+255),c
  2068  0013E2  0E5A               	movlw	90
  2069  0013E4                     u787:
  2070  0013E4  2EE8               	decfsz	wreg,f,c
  2071  0013E6  D7FE               	bra	u787
  2072  0013E8  2E01               	decfsz	??_Analog_Capture_ON& (0+255),f,c
  2073  0013EA  D7FC               	bra	u787
  2074  0013EC  2E02               	decfsz	(??_Analog_Capture_ON+1)& (0+255),f,c
  2075  0013EE  D7FA               	bra	u787
  2076                           
  2077                           ;Current_Monitor.c: 156: if(x==50)
  2078  0013F0  0E32               	movlw	50
  2079  0013F2  1803               	xorwf	Analog_Capture_ON@x,w,c
  2080  0013F4  1004               	iorwf	Analog_Capture_ON@x+1,w,c
  2081  0013F6  A4D8               	btfss	status,2,c
  2082  0013F8  D004               	goto	l1326
  2083                           
  2084                           ;Current_Monitor.c: 157: {
  2085                           ;Current_Monitor.c: 158: x=51;
  2086  0013FA  0E00               	movlw	0
  2087  0013FC  6E04               	movwf	Analog_Capture_ON@x+1,c
  2088  0013FE  0E33               	movlw	51
  2089  001400  6E03               	movwf	Analog_Capture_ON@x,c
  2090  001402                     l1326:
  2091  001402  4A03               	infsnz	Analog_Capture_ON@x,f,c
  2092  001404  2A04               	incf	Analog_Capture_ON@x+1,f,c
  2093  001406  D7D6               	goto	l1314
  2094  001408                     l135:
  2095  001408  0012               	return		;funcret
  2096  00140A                     __end_of_Analog_Capture_ON:
  2097                           	opt stack 0
  2098                           pclath	equ	0xFFA
  2099                           tblptru	equ	0xFF8
  2100                           tblptrh	equ	0xFF7
  2101                           tblptrl	equ	0xFF6
  2102                           tablat	equ	0xFF5
  2103                           prodh	equ	0xFF4
  2104                           prodl	equ	0xFF3
  2105                           intcon	equ	0xFF2
  2106                           postinc0	equ	0xFEE
  2107                           wreg	equ	0xFE8
  2108                           indf2	equ	0xFDF
  2109                           postinc2	equ	0xFDE
  2110                           postdec2	equ	0xFDD
  2111                           fsr2h	equ	0xFDA
  2112                           fsr2l	equ	0xFD9
  2113                           status	equ	0xFD8
  2114                           
  2115 ;; *************** function _Analog_Capture_OFF *****************
  2116 ;; Defined at:
  2117 ;;		line 164 in file "Current_Monitor.c"
  2118 ;; Parameters:    Size  Location     Type
  2119 ;;		None
  2120 ;; Auto vars:     Size  Location     Type
  2121 ;;		None
  2122 ;; Return value:  Size  Location     Type
  2123 ;;                  1    wreg      void 
  2124 ;; Registers used:
  2125 ;;		None
  2126 ;; Tracked objects:
  2127 ;;		On entry : 0/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2135 ;;Total ram usage:        0 bytes
  2136 ;; Hardware stack levels used:    1
  2137 ;; This function calls:
  2138 ;;		Nothing
  2139 ;; This function is called by:
  2140 ;;		_main
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144                           	psect	text13
  2145  0015CC                     __ptext13:
  2146                           	opt stack 0
  2147  0015CC                     _Analog_Capture_OFF:
  2148                           	opt stack 30
  2149                           
  2150                           ;Current_Monitor.c: 166: ADCON0bits.ADON=0;
  2151                           
  2152                           ;incstack = 0
  2153  0015CC  90C2               	bcf	4034,0,c	;volatile
  2154  0015CE  0012               	return		;funcret
  2155  0015D0                     __end_of_Analog_Capture_OFF:
  2156                           	opt stack 0
  2157                           pclath	equ	0xFFA
  2158                           tblptru	equ	0xFF8
  2159                           tblptrh	equ	0xFF7
  2160                           tblptrl	equ	0xFF6
  2161                           tablat	equ	0xFF5
  2162                           prodh	equ	0xFF4
  2163                           prodl	equ	0xFF3
  2164                           intcon	equ	0xFF2
  2165                           postinc0	equ	0xFEE
  2166                           wreg	equ	0xFE8
  2167                           indf2	equ	0xFDF
  2168                           postinc2	equ	0xFDE
  2169                           postdec2	equ	0xFDD
  2170                           fsr2h	equ	0xFDA
  2171                           fsr2l	equ	0xFD9
  2172                           status	equ	0xFD8
  2173                           pclath	equ	0xFFA
  2174                           tblptru	equ	0xFF8
  2175                           tblptrh	equ	0xFF7
  2176                           tblptrl	equ	0xFF6
  2177                           tablat	equ	0xFF5
  2178                           prodh	equ	0xFF4
  2179                           prodl	equ	0xFF3
  2180                           intcon	equ	0xFF2
  2181                           postinc0	equ	0xFEE
  2182                           wreg	equ	0xFE8
  2183                           indf2	equ	0xFDF
  2184                           postinc2	equ	0xFDE
  2185                           postdec2	equ	0xFDD
  2186                           fsr2h	equ	0xFDA
  2187                           fsr2l	equ	0xFD9
  2188                           status	equ	0xFD8
  2189                           
  2190                           	psect	rparam
  2191  0000                     pclath	equ	0xFFA
  2192                           tblptru	equ	0xFF8
  2193                           tblptrh	equ	0xFF7
  2194                           tblptrl	equ	0xFF6
  2195                           tablat	equ	0xFF5
  2196                           prodh	equ	0xFF4
  2197                           prodl	equ	0xFF3
  2198                           intcon	equ	0xFF2
  2199                           postinc0	equ	0xFEE
  2200                           wreg	equ	0xFE8
  2201                           indf2	equ	0xFDF
  2202                           postinc2	equ	0xFDE
  2203                           postdec2	equ	0xFDD
  2204                           fsr2h	equ	0xFDA
  2205                           fsr2l	equ	0xFD9
  2206                           status	equ	0xFD8


Data Sizes:
    Strings     159
    Constant    10
    Data        0
    BSS         163
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     38      51
    BANK0           160      0     150
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 55
		 -> STR_4(CODE[36]), STR_3(CODE[29]), STR_2(CODE[55]), STR_1(CODE[39]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 3
		 -> b(COMRAM[3]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    EEPROM_Write@value	PTR unsigned char  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _EEPROM_Read->_Average_Function
    _Average_Function->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    2493
                                             28 COMRAM    10    10      0
                 _Analog_Capture_OFF
                  _Analog_Capture_ON
                        _EEPROM_Read
                       _EEPROM_Write
                  _Initialize_Analog
                    _Initialize_UART
                    _Read_UART_Input
                       _Send_to_UART
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    17      8    1566
                                             12 COMRAM    16     8      8
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Send_to_UART                                         2     2      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Read_UART_Input                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Initialize_UART                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Initialize_Analog                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         3     1      2     108
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Read                                          1     1      0     518
                                             10 COMRAM     1     1      0
                   _Average_Function
 ---------------------------------------------------------------------------------
 (2) _Average_Function                                     2     2      0     496
                                              8 COMRAM     2     2      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Analog_Capture_ON                                    4     4      0      91
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Analog_Capture_OFF                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Analog_Capture_OFF
   _Analog_Capture_ON
   _EEPROM_Read
     _Average_Function
       ___awdiv
   _EEPROM_Write
   _Initialize_Analog
   _Initialize_UART
   _Read_UART_Input
   _Send_to_UART
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      96       5       93.8%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     26      33       1       53.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C9      32        0.0%
DATA                 0      0      C9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Apr 13 16:20:30 2017

                          _a 0029                            _b 0031                            _x 0027  
               ___awdiv@sign 0006                  __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                __CFG_OSC$HS 000000                 __CFG_CP4$OFF 000000                 __CFG_CP5$OFF 000000  
               __CFG_CP6$OFF 000000            ??_Read_UART_Input 0001                 __CFG_CP7$OFF 000000  
                __CFG_LVP$ON 000000                          l111 15C2                          l131 13C6  
                        l141 156A                          l135 1408                          l119 150A  
                        l129 13C4                          l603 14DA                          l593 1452  
               __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000                          u777 1504  
                        u787 13E4                          prod 000FF3                          wreg 000FE8  
                 _TXSTA1bits 000FAC                 __CFG_MODE$MC 000000                 __CFG_WDT$OFF 000000  
                       l1200 1428                         l1210 1448                         l1202 142C  
                       l1300 14EE                         l1220 14B8                         l1142 133C  
                       l1222 14BC                         l1240 10B6                         l1314 13B4  
                       l1154 1362                         l1170 1394                         l1306 150E  
                       l1226 14D0                         l1218 14B0                         l1156 136A  
                       l1148 134C                         l1180 1464                         l1252 10FE  
                       l1420 12BE                         l1326 1402                         l1174 13A2  
                       l1166 138A                         l1158 136E                         l1190 148A  
                       l1262 1126                         l1246 10D0                         l1184 1474  
                       l1264 112A                         l1416 12AE                         l1408 1296  
                       l1290 11D6                         l1282 1178                         l1434 12FC  
                       l1284 117E                         l1276 115C                         l1292 11DE  
                       l1198 1420                         l1294 11FA                         l1390 123E  
                       l1396 1266                         l1398 126C                         STR_1 1042  
                       STR_2 100B                         STR_3 108D                         STR_4 1069  
               _Voltage_Drop 0030                         _main 1208                         fsr2h 000FDA  
                       indf2 000FDF                         fsr2l 000FD9                         prodh 000FF4  
                       prodl 000FF3                         start 0000                __CFG_IESO$OFF 000000  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000         __end_of_EEPROM_Write 1572  
                      PCLATH 000FFA                 _BAUDCON1bits 000F7E                __CFG_WAIT$OFF 000000  
                      ?_main 0001              __end_of___awdiv 13AC                        _EEADR 000FA9  
            ___awdiv@divisor 0003              __end_of___lwdiv 145C              __end_of___lwmod 14E4  
            ___awdiv@counter 0005                        _PORTA 000F80                        _PORTD 000F83  
                      _TRISA 000F92                        _TRISD 000F95                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000                __CFG_WRT4$OFF 000000                __CFG_WRT5$OFF 000000  
              __CFG_WRT6$OFF 000000                __CFG_WRT7$OFF 000000               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000               __CFG_EBTR4$OFF 000000               __CFG_EBTR5$OFF 000000  
             __CFG_EBTR6$OFF 000000               __CFG_EBTR7$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000  
            __end_of_dpowers 100B                        main@i 001F                        main@x 0023  
                      main@y 0024                        tablat 000FF5                        status 000FD8  
            __end_of_sprintf 1208         __size_of_EEPROM_Read 002A              __initialization 1572  
               __end_of_main 1328                       ??_main 001D             _Average_Function 145C  
              __activetblptr 000003                       _ADCON0 000FC2                       _ADCON1 000FC1  
                     _ADCON2 000FC0                       _ADRESH 000FC4                       _EEDATA 000FA8  
                     _EECON2 000FA7             ___awdiv@dividend 0001              __CFG_BBSIZ$BB2K 000000  
                     _RCREG1 000FAE                       _SPBRG1 000FAF                       _TXREG1 000FAD  
         _Sample_for_Average 0060               __CFG_XINST$OFF 000000                       _Sample 00C4  
                  ??___awdiv 0005                    ??___lwdiv 0005                Send_to_UART@i 0001  
                  ??___lwmod 000C                       clear_0 1578                       clear_1 1584  
           ___awdiv@quotient 0007                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                    ??_sprintf 0015  
                 __accesstop 0060      __end_of__initialization 158A            EEPROM_Write@value 0001  
              ___rparam_used 000001        __size_of_EEPROM_Write 0026              _Read_UART_Input 15C0  
              ?_Send_to_UART 0001               __pcstackCOMRAM 0001     __size_of_Initialize_UART 0014  
               _EEPROM_Write 154C                   __pbssBANK0 0060   __end_of_Analog_Capture_OFF 15D0  
             ??_Send_to_UART 0001      __end_of_Read_UART_Input 15CC                      _Average 002C  
   __end_of_Average_Function 14A2                      _Current 002F                      __Hparam 0000  
                    __Lparam 0000                      ___awdiv 1328                      ___lwdiv 140A  
                    ___lwmod 14A2                 __psmallconst 1000              __CFG_STVREN$OFF 000000  
                    __pcinit 1572                      __ramtop 1000                      __ptext0 1208  
                    __ptext1 10AC                      __ptext2 14A2                      __ptext3 140A  
                    __ptext4 14E4                      __ptext5 15C0                      __ptext6 15AC  
                    __ptext7 1590                      __ptext8 154C                      __ptext9 1522  
                    _dpowers 1001            ??_Initialize_UART 0001                      _sprintf 10AC  
       end_of_initialization 158A                ??_EEPROM_Read 000B                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE                    _TRISCbits 000F94  
       __end_of_Send_to_UART 1522             ?_Read_UART_Input 0001          __end_of_EEPROM_Read 154C  
        start_initialization 1572           _Analog_Capture_OFF 15CC             __CFG_LPT1OSC$OFF 000000  
        ?_Analog_Capture_OFF 0001                  __pbssCOMRAM 0027                  sprintf@flag 0018  
                _EEPROM_Read 1522                  sprintf@prec 0019                  _EEPROM_read 0092  
       ??_Analog_Capture_OFF 0001            ?_Average_Function 0001             ___lwdiv@dividend 0001  
          __CFG_CCP2MX$PORTC 000000           ??_Average_Function 0009              _Initialize_UART 15AC  
                   ?___awdiv 0001                     ?___lwdiv 0001                     ?___lwmod 0008  
      __size_of_Send_to_UART 003E            _Initialize_Analog 1590                  __smallconst 1000  
         ?_Initialize_Analog 0001             ___lwdiv@quotient 0005                     ?_sprintf 000D  
        ??_Initialize_Analog 0001                     _PIR1bits 000F9E        __CFG_DATABW$DATA16BIT 000000  
               _Send_to_UART 14E4                     _RCONbits 000FD0             __CFG_WDTPS$32768 000000  
  __end_of_Initialize_Analog 15AC            __CFG_ECCPMX$PORTE 000000                   _ADCON0bits 000FC2  
                  main@i_615 0021                    main@x_612 0025                     _Keyboard 002B  
    __end_of_Initialize_UART 15C0                   _EECON1bits 000FA6                     __Hrparam 0000  
                   __Lrparam 0000                     _Resistor 002E           __CFG_BOREN$SBORDIS 000000  
          _Analog_Capture_ON 13AC             __size_of___awdiv 0084           ?_Analog_Capture_ON 0001  
           __size_of___lwdiv 0052             __size_of___lwmod 0042                _result_EEPROM 002D  
                 sprintf@val 001A          ??_Analog_Capture_ON 0001              ___lwdiv@divisor 0003  
            ___lwdiv@counter 0007                     __ptext10 145C                     __ptext11 1328  
                   __ptext12 13AC                     __ptext13 15CC                ?_EEPROM_Write 0001  
           __size_of_sprintf 015C                __size_of_main 0120    __end_of_Analog_Capture_ON 140A  
         Analog_Capture_ON@x 0003     __size_of_Read_UART_Input 000C   __size_of_Initialize_Analog 001C  
      __CFG_ADDRBW$ADDR20BIT 000000                   _INTCONbits 000FF2               ??_EEPROM_Write 0003  
                  sprintf@ap 0016                    sprintf@sp 000D             ___lwmod@dividend 0008  
               ?_EEPROM_Read 0001             ?_Initialize_UART 0001                   _RCSTA1bits 000FAB  
         EEPROM_Read@address 000B            Average_Function@x 0009    __size_of_Average_Function 0046  
                   sprintf@c 001C                     sprintf@f 000F              ___lwmod@divisor 000A  
            ___lwmod@counter 000C  __size_of_Analog_Capture_OFF 0004          EEPROM_Write@address 0003  
 __size_of_Analog_Capture_ON 005E  
