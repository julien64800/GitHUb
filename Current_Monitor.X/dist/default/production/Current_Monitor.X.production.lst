

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Apr 12 16:39:01 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30  0000                     
    31                           ; Version 1.41
    32                           ; Generated 25/01/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F8722 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  0015F8                     __pidataCOMRAM:
    68                           	opt stack 0
    69                           
    70                           ;initializer for _text
    71  0015F8  0D                 	db	13
    72  0015F9  20                 	db	32
    73                           
    74                           	psect	smallconst
    75  001000                     __psmallconst:
    76                           	opt stack 0
    77  001000  00                 	db	0
    78  001001                     _dpowers:
    79                           	opt stack 0
    80  001001  0001               	dw	1
    81  001003  000A               	dw	10
    82  001005  0064               	dw	100
    83  001007  03E8               	dw	1000
    84  001009  2710               	dw	10000
    85  00100B                     __end_of_dpowers:
    86                           	opt stack 0
    87  0000                     _EECON2	set	4007
    88  0000                     _INTCONbits	set	4082
    89  0000                     _EEDATA	set	4008
    90  0000                     _EEADR	set	4009
    91  0000                     _EECON1bits	set	4006
    92  0000                     _ADRESH	set	4036
    93  0000                     _ADCON0bits	set	4034
    94  0000                     _ADCON2	set	4032
    95  0000                     _ADCON1	set	4033
    96  0000                     _ADCON0	set	4034
    97  0000                     _MEMCONbits	set	3996
    98  0000                     _PORTA	set	3968
    99  0000                     _PORTD	set	3971
   100  0000                     _TXREG1	set	4013
   101  0000                     _RCREG1	set	4014
   102  0000                     _PIR1bits	set	3998
   103  0000                     _RCSTA1bits	set	4011
   104  0000                     _SPBRG1	set	4015
   105  0000                     _BAUDCON1bits	set	3966
   106  0000                     _TRISCbits	set	3988
   107  0000                     _TXSTA1bits	set	4012
   108  0000                     _TRISA	set	3986
   109  0000                     _TRISD	set	3989
   110  00100B                     STR_3:
   111  00100B  41                 	db	65	;'A'
   112  00100C  76                 	db	118	;'v'
   113  00100D  65                 	db	101	;'e'
   114  00100E  72                 	db	114	;'r'
   115  00100F  61                 	db	97	;'a'
   116  001010  67                 	db	103	;'g'
   117  001011  65                 	db	101	;'e'
   118  001012  20                 	db	32
   119  001013  6F                 	db	111	;'o'
   120  001014  66                 	db	102	;'f'
   121  001015  20                 	db	32
   122  001016  6C                 	db	108	;'l'
   123  001017  61                 	db	97	;'a'
   124  001018  73                 	db	115	;'s'
   125  001019  74                 	db	116	;'t'
   126  00101A  20                 	db	32
   127  00101B  35                 	db	53	;'5'
   128  00101C  30                 	db	48	;'0'
   129  00101D  20                 	db	32
   130  00101E  53                 	db	83	;'S'
   131  00101F  61                 	db	97	;'a'
   132  001020  6D                 	db	109	;'m'
   133  001021  70                 	db	112	;'p'
   134  001022  6C                 	db	108	;'l'
   135  001023  65                 	db	101	;'e'
   136  001024  73                 	db	115	;'s'
   137  001025  3A                 	db	58	;':'
   138  001026  20                 	db	32
   139  001027  25                 	db	37
   140  001028  64                 	db	100	;'d'
   141  001029  20                 	db	32
   142  00102A  6D                 	db	109	;'m'
   143  00102B  41                 	db	65	;'A'
   144  00102C  00                 	db	0
   145  00102D                     STR_1:
   146  00102D  50                 	db	80	;'P'
   147  00102E  72                 	db	114	;'r'
   148  00102F  65                 	db	101	;'e'
   149  001030  73                 	db	115	;'s'
   150  001031  73                 	db	115	;'s'
   151  001032  20                 	db	32
   152  001033  53                 	db	83	;'S'
   153  001034  20                 	db	32
   154  001035  74                 	db	116	;'t'
   155  001036  6F                 	db	111	;'o'
   156  001037  20                 	db	32
   157  001038  53                 	db	83	;'S'
   158  001039  74                 	db	116	;'t'
   159  00103A  61                 	db	97	;'a'
   160  00103B  72                 	db	114	;'r'
   161  00103C  74                 	db	116	;'t'
   162  00103D  20                 	db	32
   163  00103E  43                 	db	67	;'C'
   164  00103F  6F                 	db	111	;'o'
   165  001040  6D                 	db	109	;'m'
   166  001041  6D                 	db	109	;'m'
   167  001042  75                 	db	117	;'u'
   168  001043  6E                 	db	110	;'n'
   169  001044  69                 	db	105	;'i'
   170  001045  63                 	db	99	;'c'
   171  001046  61                 	db	97	;'a'
   172  001047  74                 	db	116	;'t'
   173  001048  69                 	db	105	;'i'
   174  001049  6F                 	db	111	;'o'
   175  00104A  6E                 	db	110	;'n'
   176  00104B  3A                 	db	58	;':'
   177  00104C  00                 	db	0
   178  00104D                     STR_2:
   179  00104D  53                 	db	83	;'S'
   180  00104E  61                 	db	97	;'a'
   181  00104F  6D                 	db	109	;'m'
   182  001050  70                 	db	112	;'p'
   183  001051  6C                 	db	108	;'l'
   184  001052  69                 	db	105	;'i'
   185  001053  6E                 	db	110	;'n'
   186  001054  67                 	db	103	;'g'
   187  001055  20                 	db	32
   188  001056  6E                 	db	110	;'n'
   189  001057  75                 	db	117	;'u'
   190  001058  6D                 	db	109	;'m'
   191  001059  62                 	db	98	;'b'
   192  00105A  65                 	db	101	;'e'
   193  00105B  72                 	db	114	;'r'
   194  00105C  20                 	db	32
   195  00105D  25                 	db	37
   196  00105E  64                 	db	100	;'d'
   197  00105F  3A                 	db	58	;':'
   198  001060  20                 	db	32
   199  001061  25                 	db	37
   200  001062  64                 	db	100	;'d'
   201  001063  20                 	db	32
   202  001064  6D                 	db	109	;'m'
   203  001065  41                 	db	65	;'A'
   204  001066  20                 	db	32
   205  001067  3A                 	db	58	;':'
   206  001068  00                 	db	0
   207                           
   208                           ; #config settings
   209  001069  00                 	db	0	; dummy byte at the end
   210  0000                     
   211                           	psect	cinit
   212  0014B4                     __pcinit:
   213                           	opt stack 0
   214  0014B4                     start_initialization:
   215                           	opt stack 0
   216  0014B4                     __initialization:
   217                           	opt stack 0
   218                           
   219                           ; Initialize objects allocated to COMRAM (2 bytes)
   220                           ; load TBLPTR registers with __pidataCOMRAM
   221  0014B4  0EF8               	movlw	low __pidataCOMRAM
   222  0014B6  6EF6               	movwf	tblptrl,c
   223  0014B8  0E15               	movlw	high __pidataCOMRAM
   224  0014BA  6EF7               	movwf	tblptrh,c
   225  0014BC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   226  0014BE  6EF8               	movwf	tblptru,c
   227  0014C0  0009               	tblrd		*+	;fetch initializer
   228  0014C2  CFF5 F038          	movff	tablat,__pdataCOMRAM
   229  0014C6  0009               	tblrd		*+	;fetch initializer
   230  0014C8  CFF5 F039          	movff	tablat,__pdataCOMRAM+1
   231                           
   232                           ; Clear objects allocated to BANK1 (100 bytes)
   233  0014CC  EE01  F000         	lfsr	0,__pbssBANK1
   234  0014D0  0E64               	movlw	100
   235  0014D2                     clear_0:
   236  0014D2  6AEE               	clrf	postinc0,c
   237  0014D4  06E8               	decf	wreg,f,c
   238  0014D6  E1FD               	bnz	clear_0
   239                           
   240                           ; Clear objects allocated to BANK0 (150 bytes)
   241  0014D8  EE00  F060         	lfsr	0,__pbssBANK0
   242  0014DC  0E96               	movlw	150
   243  0014DE                     clear_1:
   244  0014DE  6AEE               	clrf	postinc0,c
   245  0014E0  06E8               	decf	wreg,f,c
   246  0014E2  E1FD               	bnz	clear_1
   247                           
   248                           ; Clear objects allocated to COMRAM (17 bytes)
   249  0014E4  EE00  F027         	lfsr	0,__pbssCOMRAM
   250  0014E8  0E11               	movlw	17
   251  0014EA                     clear_2:
   252  0014EA  6AEE               	clrf	postinc0,c
   253  0014EC  06E8               	decf	wreg,f,c
   254  0014EE  E1FD               	bnz	clear_2
   255  0014F0                     end_of_initialization:
   256                           	opt stack 0
   257  0014F0                     __end_of__initialization:
   258                           	opt stack 0
   259  0014F0  0100               	movlb	0
   260  0014F2  EFE3  F008         	goto	_main	;jump to C main() function
   261                           tblptru	equ	0xFF8
   262                           tblptrh	equ	0xFF7
   263                           tblptrl	equ	0xFF6
   264                           tablat	equ	0xFF5
   265                           postinc0	equ	0xFEE
   266                           wreg	equ	0xFE8
   267                           
   268                           	psect	bssCOMRAM
   269  000027                     __pbssCOMRAM:
   270                           	opt stack 0
   271  000027                     _Average:
   272                           	opt stack 0
   273  000027                     	ds	2
   274  000029                     _x:
   275                           	opt stack 0
   276  000029                     	ds	2
   277  00002B                     _a:
   278                           	opt stack 0
   279  00002B                     	ds	2
   280  00002D                     _Keyboard:
   281                           	opt stack 0
   282  00002D                     	ds	1
   283  00002E                     _result_EEPROM:
   284                           	opt stack 0
   285  00002E                     	ds	1
   286  00002F                     _EEPROM_address:
   287                           	opt stack 0
   288  00002F                     	ds	1
   289  000030                     _Sample_Number:
   290                           	opt stack 0
   291  000030                     	ds	1
   292  000031                     _EEPROM_W:
   293                           	opt stack 0
   294  000031                     	ds	1
   295  000032                     _Resistor:
   296                           	opt stack 0
   297  000032                     	ds	1
   298  000033                     _Current:
   299                           	opt stack 0
   300  000033                     	ds	1
   301  000034                     _Voltage_Drop:
   302                           	opt stack 0
   303  000034                     	ds	1
   304  000035                     _b:
   305                           	opt stack 0
   306  000035                     	ds	3
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314                           	psect	dataCOMRAM
   315  000038                     __pdataCOMRAM:
   316                           	opt stack 0
   317  000038                     _text:
   318                           	opt stack 0
   319  000038                     	ds	2
   320                           tblptru	equ	0xFF8
   321                           tblptrh	equ	0xFF7
   322                           tblptrl	equ	0xFF6
   323                           tablat	equ	0xFF5
   324                           postinc0	equ	0xFEE
   325                           wreg	equ	0xFE8
   326                           
   327                           	psect	bssBANK0
   328  000060                     __pbssBANK0:
   329                           	opt stack 0
   330  000060                     _Sample:
   331                           	opt stack 0
   332  000060                     	ds	100
   333  0000C4                     _EEPROM_read:
   334                           	opt stack 0
   335  0000C4                     	ds	50
   336                           tblptru	equ	0xFF8
   337                           tblptrh	equ	0xFF7
   338                           tblptrl	equ	0xFF6
   339                           tablat	equ	0xFF5
   340                           postinc0	equ	0xFEE
   341                           wreg	equ	0xFE8
   342                           
   343                           	psect	bssBANK1
   344  000100                     __pbssBANK1:
   345                           	opt stack 0
   346  000100                     _Sample_for_Average:
   347                           	opt stack 0
   348  000100                     	ds	100
   349                           tblptru	equ	0xFF8
   350                           tblptrh	equ	0xFF7
   351                           tblptrl	equ	0xFF6
   352                           tablat	equ	0xFF5
   353                           postinc0	equ	0xFEE
   354                           wreg	equ	0xFE8
   355                           
   356                           	psect	cstackCOMRAM
   357  000001                     __pcstackCOMRAM:
   358                           	opt stack 0
   359  000001                     ??_Analog_Capture_ON:
   360  000001                     ?___awdiv:
   361                           	opt stack 0
   362  000001                     ?___lwdiv:
   363                           	opt stack 0
   364  000001                     Send_Command@Command:
   365                           	opt stack 0
   366  000001                     EEPROM_Write@value:
   367                           	opt stack 0
   368  000001                     ___awdiv@dividend:
   369                           	opt stack 0
   370  000001                     ___lwdiv@dividend:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x0
   374  000001                     	ds	1
   375  000002                     Send_Sampling@i:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x1
   379  000002                     	ds	1
   380  000003                     ??_EEPROM_Write:
   381  000003                     Analog_Capture_ON@x:
   382                           	opt stack 0
   383  000003                     ___awdiv@divisor:
   384                           	opt stack 0
   385  000003                     ___lwdiv@divisor:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x2
   389  000003                     	ds	1
   390  000004                     EEPROM_Write@address:
   391                           	opt stack 0
   392                           
   393                           ; 1 bytes @ 0x3
   394  000004                     	ds	1
   395  000005                     ___awdiv@counter:
   396                           	opt stack 0
   397  000005                     ___lwdiv@quotient:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x4
   401  000005                     	ds	1
   402  000006                     ___awdiv@sign:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x5
   406  000006                     	ds	1
   407  000007                     ___lwdiv@counter:
   408                           	opt stack 0
   409  000007                     ___awdiv@quotient:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x6
   413  000007                     	ds	1
   414  000008                     ?___lwmod:
   415                           	opt stack 0
   416  000008                     ___lwmod@dividend:
   417                           	opt stack 0
   418                           
   419                           ; 2 bytes @ 0x7
   420  000008                     	ds	1
   421  000009                     Average_Function@x:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0x8
   425  000009                     	ds	1
   426  00000A                     ___lwmod@divisor:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x9
   430  00000A                     	ds	1
   431  00000B                     ??_EEPROM_Read:
   432                           
   433                           ; 1 bytes @ 0xA
   434  00000B                     	ds	1
   435  00000C                     ___lwmod@counter:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0xB
   439  00000C                     	ds	1
   440  00000D                     ?_sprintf:
   441                           	opt stack 0
   442  00000D                     EEPROM_Read@address:
   443                           	opt stack 0
   444  00000D                     sprintf@sp:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0xC
   448  00000D                     	ds	2
   449  00000F                     sprintf@f:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0xE
   453  00000F                     	ds	6
   454  000015                     ??_sprintf:
   455                           
   456                           ; 1 bytes @ 0x14
   457  000015                     	ds	1
   458  000016                     sprintf@ap:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x15
   462  000016                     	ds	2
   463  000018                     sprintf@flag:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0x17
   467  000018                     	ds	1
   468  000019                     sprintf@prec:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x18
   472  000019                     	ds	1
   473  00001A                     sprintf@val:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x19
   477  00001A                     	ds	2
   478  00001C                     sprintf@c:
   479                           	opt stack 0
   480                           
   481                           ; 1 bytes @ 0x1B
   482  00001C                     	ds	1
   483  00001D                     main@i:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x1C
   487  00001D                     	ds	2
   488  00001F                     main@i_574:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x1E
   492  00001F                     	ds	2
   493  000021                     main@x:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x20
   497  000021                     	ds	2
   498  000023                     main@y:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0x22
   502  000023                     	ds	2
   503  000025                     main@x_571:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x24
   507  000025                     	ds	2
   508                           tblptru	equ	0xFF8
   509                           tblptrh	equ	0xFF7
   510                           tblptrl	equ	0xFF6
   511                           tablat	equ	0xFF5
   512                           postinc0	equ	0xFEE
   513                           wreg	equ	0xFE8
   514                           
   515 ;;
   516 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   517 ;;
   518 ;; *************** function _main *****************
   519 ;; Defined at:
   520 ;;		line 151 in file "Current_Monitor.c"
   521 ;; Parameters:    Size  Location     Type
   522 ;;		None
   523 ;; Auto vars:     Size  Location     Type
   524 ;;  i               2   28[COMRAM] int 
   525 ;;  i               2   30[COMRAM] int 
   526 ;;  x               2   36[COMRAM] int 
   527 ;;  y               2   34[COMRAM] int 
   528 ;;  x               2   32[COMRAM] int 
   529 ;; Return value:  Size  Location     Type
   530 ;;                  1    wreg      void 
   531 ;; Registers used:
   532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   533 ;; Tracked objects:
   534 ;;		On entry : 0/0
   535 ;;		On exit  : 0/0
   536 ;;		Unchanged: 0/0
   537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   539 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   541 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   542 ;;Total ram usage:       10 bytes
   543 ;; Hardware stack levels required when called:    3
   544 ;; This function calls:
   545 ;;		_Analog_Capture_OFF
   546 ;;		_Analog_Capture_ON
   547 ;;		_EEPROM_Read
   548 ;;		_EEPROM_Write
   549 ;;		_Initialize_Analog
   550 ;;		_Initialize_UART
   551 ;;		_Read_UART_Input
   552 ;;		_Send_Sampling
   553 ;;		_sprintf
   554 ;; This function is called by:
   555 ;;		Startup code after reset
   556 ;; This function uses a non-reentrant model
   557 ;;
   558                           
   559                           	psect	text0
   560  0011C6                     __ptext0:
   561                           	opt stack 0
   562  0011C6                     _main:
   563                           	opt stack 28
   564                           
   565                           ;Current_Monitor.c: 153: TRISD=0x00;
   566                           
   567                           ;incstack = 0
   568  0011C6  0E00               	movlw	0
   569  0011C8  6E95               	movwf	3989,c	;volatile
   570                           
   571                           ;Current_Monitor.c: 154: TRISA=0xFF;
   572  0011CA  6892               	setf	3986,c	;volatile
   573                           
   574                           ;Current_Monitor.c: 155: Initialize_UART();
   575  0011CC  ECEA  F00A         	call	_Initialize_UART	;wreg free
   576                           
   577                           ;Current_Monitor.c: 157: sprintf(b,"Press S to Start Communication:");
   578  0011D0  0E35               	movlw	low _b
   579  0011D2  6E0D               	movwf	sprintf@sp,c
   580  0011D4  0E00               	movlw	high _b
   581  0011D6  6E0E               	movwf	sprintf@sp+1,c
   582  0011D8  0E2D               	movlw	low STR_1
   583  0011DA  6E0F               	movwf	sprintf@f,c
   584  0011DC  0E10               	movlw	high STR_1
   585  0011DE  6E10               	movwf	sprintf@f+1,c
   586  0011E0  EC35  F008         	call	_sprintf	;wreg free
   587                           
   588                           ;Current_Monitor.c: 159: Send_Sampling();
   589  0011E4  ECB7  F00A         	call	_Send_Sampling	;wreg free
   590  0011E8                     l1366:
   591                           
   592                           ;Current_Monitor.c: 164: Initialize_UART();
   593  0011E8  ECEA  F00A         	call	_Initialize_UART	;wreg free
   594                           
   595                           ;Current_Monitor.c: 165: Initialize_Analog();
   596  0011EC  ECD1  F00A         	call	_Initialize_Analog	;wreg free
   597                           
   598                           ;Current_Monitor.c: 166: Read_UART_Input();
   599  0011F0  ECF4  F00A         	call	_Read_UART_Input	;wreg free
   600                           
   601                           ;Current_Monitor.c: 168: Analog_Capture_ON ();
   602  0011F4  ECB3  F009         	call	_Analog_Capture_ON	;wreg free
   603                           
   604                           ;Current_Monitor.c: 173: for (int x=0,y=0;x<=50,y<=50;x++,y++)
   605  0011F8  0E00               	movlw	0
   606  0011FA  6E22               	movwf	main@x+1,c
   607  0011FC  0E00               	movlw	0
   608  0011FE  6E21               	movwf	main@x,c
   609  001200  0E00               	movlw	0
   610  001202  6E24               	movwf	main@y+1,c
   611  001204  0E00               	movlw	0
   612  001206  6E23               	movwf	main@y,c
   613  001208  D014               	goto	l1384
   614  00120A                     l1378:
   615                           
   616                           ;Current_Monitor.c: 174: {
   617                           ;Current_Monitor.c: 175: EEPROM_Write(x,Sample[y]);
   618  00120A  90D8               	bcf	status,0,c
   619  00120C  3423               	rlcf	main@y,w,c
   620  00120E  6ED9               	movwf	fsr2l,c
   621  001210  3424               	rlcf	main@y+1,w,c
   622  001212  6EDA               	movwf	fsr2h,c
   623  001214  0E60               	movlw	low _Sample
   624  001216  26D9               	addwf	fsr2l,f,c
   625  001218  0E00               	movlw	high _Sample
   626  00121A  22DA               	addwfc	fsr2h,f,c
   627  00121C  CFDE F001          	movff	postinc2,EEPROM_Write@value
   628  001220  CFDD F002          	movff	postdec2,EEPROM_Write@value+1
   629  001224  5021               	movf	main@x,w,c
   630  001226  EC9C  F00A         	call	_EEPROM_Write
   631  00122A  4A21               	infsnz	main@x,f,c
   632  00122C  2A22               	incf	main@x+1,f,c
   633  00122E  4A23               	infsnz	main@y,f,c
   634  001230  2A24               	incf	main@y+1,f,c
   635  001232                     l1384:
   636  001232  BE24               	btfsc	main@y+1,7,c
   637  001234  D7EA               	goto	l1378
   638  001236  5024               	movf	main@y+1,w,c
   639  001238  E104               	bnz	l1386
   640  00123A  0E33               	movlw	51
   641  00123C  5C23               	subwf	main@y,w,c
   642  00123E  A0D8               	btfss	status,0,c
   643  001240  D7E4               	goto	l1378
   644  001242                     l1386:
   645                           
   646                           ;Current_Monitor.c: 176: }
   647                           ;Current_Monitor.c: 179: if(Keyboard=='S')
   648  001242  0E53               	movlw	83
   649  001244  182D               	xorwf	_Keyboard,w,c
   650  001246  A4D8               	btfss	status,2,c
   651  001248  D048               	goto	l107
   652                           
   653                           ;Current_Monitor.c: 180: {
   654                           ;Current_Monitor.c: 181: Analog_Capture_OFF();
   655  00124A  ECFA  F00A         	call	_Analog_Capture_OFF	;wreg free
   656                           
   657                           ;Current_Monitor.c: 184: for(int x=0;x<=50;x++){
   658  00124E  0E00               	movlw	0
   659  001250  6E26               	movwf	main@x_571+1,c
   660  001252  0E00               	movlw	0
   661  001254  6E25               	movwf	main@x_571,c
   662  001256                     l1392:
   663  001256  BE26               	btfsc	main@x_571+1,7,c
   664  001258  D006               	goto	l1396
   665  00125A  5026               	movf	main@x_571+1,w,c
   666  00125C  E123               	bnz	l1410
   667  00125E  0E33               	movlw	51
   668  001260  5C25               	subwf	main@x_571,w,c
   669  001262  B0D8               	btfsc	status,0,c
   670  001264  D01F               	goto	l1410
   671  001266                     l1396:
   672                           
   673                           ;Current_Monitor.c: 186: EEPROM_Read(x);
   674  001266  5025               	movf	main@x_571,w,c
   675  001268  EC35  F00A         	call	_EEPROM_Read
   676                           
   677                           ;Current_Monitor.c: 188: int i =0;
   678  00126C  0E00               	movlw	0
   679  00126E  6E1E               	movwf	main@i+1,c
   680  001270  0E00               	movlw	0
   681  001272  6E1D               	movwf	main@i,c
   682                           
   683                           ;Current_Monitor.c: 189: i++;
   684  001274  4A1D               	infsnz	main@i,f,c
   685  001276  2A1E               	incf	main@i+1,f,c
   686                           
   687                           ;Current_Monitor.c: 190: sprintf(b,"Sampling number %d: %d mA :",x,result_EEPROM);
   688  001278  0E35               	movlw	low _b
   689  00127A  6E0D               	movwf	sprintf@sp,c
   690  00127C  0E00               	movlw	high _b
   691  00127E  6E0E               	movwf	sprintf@sp+1,c
   692  001280  0E4D               	movlw	low STR_2
   693  001282  6E0F               	movwf	sprintf@f,c
   694  001284  0E10               	movlw	high STR_2
   695  001286  6E10               	movwf	sprintf@f+1,c
   696  001288  C025  F011         	movff	main@x_571,?_sprintf+4
   697  00128C  C026  F012         	movff	main@x_571+1,?_sprintf+5
   698  001290  C02E  F013         	movff	_result_EEPROM,?_sprintf+6
   699  001294  6A14               	clrf	?_sprintf+7,c
   700  001296  EC35  F008         	call	_sprintf	;wreg free
   701                           
   702                           ;Current_Monitor.c: 192: Send_Sampling();
   703  00129A  ECB7  F00A         	call	_Send_Sampling	;wreg free
   704  00129E  4A25               	infsnz	main@x_571,f,c
   705  0012A0  2A26               	incf	main@x_571+1,f,c
   706  0012A2  D7D9               	goto	l1392
   707  0012A4                     l1410:
   708                           
   709                           ;Current_Monitor.c: 193: }
   710                           ;Current_Monitor.c: 195: if(Keyboard=='A'){
   711  0012A4  0E41               	movlw	65
   712  0012A6  182D               	xorwf	_Keyboard,w,c
   713  0012A8  A4D8               	btfss	status,2,c
   714  0012AA  D79E               	goto	l1366
   715                           
   716                           ;Current_Monitor.c: 197: int i =0;
   717  0012AC  0E00               	movlw	0
   718  0012AE  6E20               	movwf	main@i_574+1,c
   719  0012B0  0E00               	movlw	0
   720  0012B2  6E1F               	movwf	main@i_574,c
   721                           
   722                           ;Current_Monitor.c: 198: i++;
   723  0012B4  4A1F               	infsnz	main@i_574,f,c
   724  0012B6  2A20               	incf	main@i_574+1,f,c
   725                           
   726                           ;Current_Monitor.c: 199: sprintf(b,"Average of last 50 Samples: %d mA",Average);
   727  0012B8  0E35               	movlw	low _b
   728  0012BA  6E0D               	movwf	sprintf@sp,c
   729  0012BC  0E00               	movlw	high _b
   730  0012BE  6E0E               	movwf	sprintf@sp+1,c
   731  0012C0  0E0B               	movlw	low STR_3
   732  0012C2  6E0F               	movwf	sprintf@f,c
   733  0012C4  0E10               	movlw	high STR_3
   734  0012C6  6E10               	movwf	sprintf@f+1,c
   735  0012C8  C027  F011         	movff	_Average,?_sprintf+4
   736  0012CC  C028  F012         	movff	_Average+1,?_sprintf+5
   737  0012D0  EC35  F008         	call	_sprintf	;wreg free
   738                           
   739                           ;Current_Monitor.c: 201: Send_Sampling();
   740  0012D4  ECB7  F00A         	call	_Send_Sampling	;wreg free
   741                           
   742                           ;Current_Monitor.c: 205: }
   743                           ;Current_Monitor.c: 210: }
   744  0012D8  D787               	goto	l1366
   745  0012DA                     l107:
   746                           
   747                           ;Current_Monitor.c: 211: else {
   748                           ;Current_Monitor.c: 212: TXSTA1bits.TXEN=0;
   749  0012DA  9AAC               	bcf	4012,5,c	;volatile
   750                           
   751                           ;Current_Monitor.c: 213: Analog_Capture_ON();
   752  0012DC  ECB3  F009         	call	_Analog_Capture_ON	;wreg free
   753  0012E0  D783               	goto	l1366
   754  0012E2                     __end_of_main:
   755                           	opt stack 0
   756                           tblptru	equ	0xFF8
   757                           tblptrh	equ	0xFF7
   758                           tblptrl	equ	0xFF6
   759                           tablat	equ	0xFF5
   760                           postinc0	equ	0xFEE
   761                           wreg	equ	0xFE8
   762                           postinc2	equ	0xFDE
   763                           postdec2	equ	0xFDD
   764                           fsr2h	equ	0xFDA
   765                           fsr2l	equ	0xFD9
   766                           status	equ	0xFD8
   767                           
   768 ;; *************** function _sprintf *****************
   769 ;; Defined at:
   770 ;;		line 492 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;  sp              2   12[COMRAM] PTR unsigned char 
   773 ;;		 -> b(3), 
   774 ;;  f               2   14[COMRAM] PTR const unsigned char 
   775 ;;		 -> STR_3(34), STR_2(28), STR_1(32), 
   776 ;; Auto vars:     Size  Location     Type
   777 ;;  tmpval          4    0        struct .
   778 ;;  cp              3    0        PTR const unsigned char 
   779 ;;  val             2   25[COMRAM] unsigned int 
   780 ;;  ap              2   21[COMRAM] PTR void [1]
   781 ;;		 -> ?_sprintf(2), 
   782 ;;  len             2    0        unsigned int 
   783 ;;  c               1   27[COMRAM] char 
   784 ;;  prec            1   24[COMRAM] char 
   785 ;;  flag            1   23[COMRAM] unsigned char 
   786 ;; Return value:  Size  Location     Type
   787 ;;                  2   12[COMRAM] int 
   788 ;; Registers used:
   789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   790 ;; Tracked objects:
   791 ;;		On entry : 0/0
   792 ;;		On exit  : 0/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   795 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   796 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   797 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   798 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   799 ;;Total ram usage:       16 bytes
   800 ;; Hardware stack levels used:    1
   801 ;; Hardware stack levels required when called:    1
   802 ;; This function calls:
   803 ;;		___lwdiv
   804 ;;		___lwmod
   805 ;; This function is called by:
   806 ;;		_main
   807 ;; This function uses a non-reentrant model
   808 ;;
   809                           
   810                           	psect	text1
   811  00106A                     __ptext1:
   812                           	opt stack 0
   813  00106A                     _sprintf:
   814                           	opt stack 29
   815                           
   816                           ;doprnt.c: 494: va_list ap;
   817                           ;doprnt.c: 499: signed char c;
   818                           ;doprnt.c: 506: signed char prec;
   819                           ;doprnt.c: 508: unsigned char flag;
   820                           ;doprnt.c: 523: union {
   821                           ;doprnt.c: 524: unsigned long vd;
   822                           ;doprnt.c: 525: double integ;
   823                           ;doprnt.c: 526: } tmpval;
   824                           ;doprnt.c: 528: unsigned int val;
   825                           ;doprnt.c: 529: unsigned len;
   826                           ;doprnt.c: 530: const char * cp;
   827                           ;doprnt.c: 533: *ap = __va_start();
   828                           
   829                           ;incstack = 0
   830  00106A  0E11               	movlw	low (?_sprintf+4)
   831  00106C  6E16               	movwf	sprintf@ap,c
   832  00106E  0E00               	movlw	high (?_sprintf+4)
   833  001070  6E17               	movwf	sprintf@ap+1,c
   834                           
   835                           ;doprnt.c: 536: while(c = *f++) {
   836  001072  D094               	goto	l1310
   837  001074                     l1258:
   838                           
   839                           ;doprnt.c: 538: if(c != '%')
   840  001074  0E25               	movlw	37
   841  001076  181C               	xorwf	sprintf@c,w,c
   842  001078  B4D8               	btfsc	status,2,c
   843  00107A  D009               	goto	l1264
   844                           
   845                           ;doprnt.c: 540: {
   846                           ;doprnt.c: 541: ((*sp++ = (c)));
   847  00107C  C00D  FFD9         	movff	sprintf@sp,fsr2l
   848  001080  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   849  001084  C01C  FFDF         	movff	sprintf@c,indf2
   850  001088  4A0D               	infsnz	sprintf@sp,f,c
   851  00108A  2A0E               	incf	sprintf@sp+1,f,c
   852                           
   853                           ;doprnt.c: 542: continue;
   854  00108C  D087               	goto	l1310
   855  00108E                     l1264:
   856                           
   857                           ;doprnt.c: 543: }
   858                           ;doprnt.c: 548: flag = 0;
   859  00108E  0E00               	movlw	0
   860  001090  6E18               	movwf	sprintf@flag,c
   861                           
   862                           ;doprnt.c: 822: }
   863                           
   864                           ;doprnt.c: 813: continue;
   865                           
   866                           ;doprnt.c: 802: default:
   867                           
   868                           ;doprnt.c: 698: case 'i':
   869                           ;doprnt.c: 699: break;
   870                           
   871                           ;doprnt.c: 697: case 'd':
   872                           
   873                           ;doprnt.c: 638: goto alldone;
   874                           
   875                           ;doprnt.c: 637: case 0:
   876                           
   877                           ;doprnt.c: 635: switch(c = *f++) {
   878  001092  C00F  FFF6         	movff	sprintf@f,tblptrl
   879  001096  C010  FFF7         	movff	sprintf@f+1,tblptrh
   880  00109A  4A0F               	infsnz	sprintf@f,f,c
   881  00109C  2A10               	incf	sprintf@f+1,f,c
   882  00109E                     	if	0	;tblptru may be non-zero
   883  00109E                     	endif
   884  00109E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
   885  00109E  0E00               	movlw	low (__mediumconst shr (0+16))
   886  0010A0  6EF8               	movwf	tblptru,c
   887  0010A2                     	endif
   888  0010A2  0008               	tblrd		*
   889  0010A4  CFF5 F01C          	movff	tablat,sprintf@c
   890  0010A8  501C               	movf	sprintf@c,w,c
   891                           
   892                           ; Switch size 1, requested type "space"
   893                           ; Number of cases is 3, Range of values is 0 to 105
   894                           ; switch strategies available:
   895                           ; Name         Instructions Cycles
   896                           ; simple_byte           10     6 (average)
   897                           ;	Chosen strategy is simple_byte
   898  0010AA  0A00               	xorlw	0	; case 0
   899  0010AC  B4D8               	btfsc	status,2,c
   900  0010AE  D084               	goto	l1312
   901  0010B0  0A64               	xorlw	100	; case 100
   902  0010B2  B4D8               	btfsc	status,2,c
   903  0010B4  D003               	goto	l1270
   904  0010B6  0A0D               	xorlw	13	; case 105
   905  0010B8  A4D8               	btfss	status,2,c
   906  0010BA  D070               	goto	l1310
   907  0010BC                     l1270:
   908                           
   909                           ;doprnt.c: 1253: {
   910                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   911  0010BC  C016  FFD9         	movff	sprintf@ap,fsr2l
   912  0010C0  C017  FFDA         	movff	sprintf@ap+1,fsr2h
   913  0010C4  CFDE F01A          	movff	postinc2,sprintf@val
   914  0010C8  CFDD F01B          	movff	postdec2,sprintf@val+1
   915  0010CC  0E02               	movlw	2
   916  0010CE  2616               	addwf	sprintf@ap,f,c
   917  0010D0  0E00               	movlw	0
   918  0010D2  2217               	addwfc	sprintf@ap+1,f,c
   919                           
   920                           ;doprnt.c: 1261: if((int)val < 0) {
   921  0010D4  AE1B               	btfss	sprintf@val+1,7,c
   922  0010D6  D006               	goto	l1280
   923                           
   924                           ;doprnt.c: 1262: flag |= 0x03;
   925  0010D8  0E03               	movlw	3
   926  0010DA  1218               	iorwf	sprintf@flag,f,c
   927                           
   928                           ;doprnt.c: 1263: val = -val;
   929  0010DC  6C1A               	negf	sprintf@val,c
   930  0010DE  1E1B               	comf	sprintf@val+1,f,c
   931  0010E0  B0D8               	btfsc	status,0,c
   932  0010E2  2A1B               	incf	sprintf@val+1,f,c
   933  0010E4                     l1280:
   934                           
   935                           ;doprnt.c: 1264: }
   936                           ;doprnt.c: 1266: }
   937                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
   938  0010E4  0E01               	movlw	1
   939  0010E6  6E1C               	movwf	sprintf@c,c
   940  0010E8                     l1282:
   941  0010E8  0E05               	movlw	5
   942  0010EA  181C               	xorwf	sprintf@c,w,c
   943  0010EC  B4D8               	btfsc	status,2,c
   944  0010EE  D015               	goto	l1294
   945                           
   946                           ;doprnt.c: 1306: if(val < dpowers[c])
   947  0010F0  501C               	movf	sprintf@c,w,c
   948  0010F2  0D02               	mullw	2
   949  0010F4  0E01               	movlw	low _dpowers
   950  0010F6  24F3               	addwf	prodl,w,c
   951  0010F8  6EF6               	movwf	tblptrl,c
   952  0010FA  0E10               	movlw	high _dpowers
   953  0010FC  20F4               	addwfc	prodh,w,c
   954  0010FE  6EF7               	movwf	tblptrh,c
   955  001100                     	if	1	;There are 3 active tblptr bytes
   956  001100  6AF8               	clrf	tblptru,c
   957  001102  0E00               	movlw	low (__mediumconst shr (0+16))
   958  001104  22F8               	addwfc	tblptru,f,c
   959  001106                     	endif
   960  001106  0009               	tblrd		*+
   961  001108  50F5               	movf	tablat,w,c
   962  00110A  5C1A               	subwf	sprintf@val,w,c
   963  00110C  0009               	tblrd		*+
   964  00110E  50F5               	movf	tablat,w,c
   965  001110  581B               	subwfb	sprintf@val+1,w,c
   966  001112  A0D8               	btfss	status,0,c
   967  001114  D002               	goto	l1294
   968                           
   969                           ;doprnt.c: 1307: break;
   970  001116  2A1C               	incf	sprintf@c,f,c
   971  001118  D7E7               	goto	l1282
   972  00111A                     l1294:
   973                           
   974                           ;doprnt.c: 1422: {
   975                           ;doprnt.c: 1438: if(flag & 0x03)
   976  00111A  C018  F015         	movff	sprintf@flag,??_sprintf
   977  00111E  0E03               	movlw	3
   978  001120  1615               	andwf	??_sprintf,f,c
   979  001122  B4D8               	btfsc	status,2,c
   980  001124  D008               	goto	l1300
   981                           
   982                           ;doprnt.c: 1439: ((*sp++ = ('-')));
   983  001126  C00D  FFD9         	movff	sprintf@sp,fsr2l
   984  00112A  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   985  00112E  0E2D               	movlw	45
   986  001130  6EDF               	movwf	indf2,c
   987  001132  4A0D               	infsnz	sprintf@sp,f,c
   988  001134  2A0E               	incf	sprintf@sp+1,f,c
   989  001136                     l1300:
   990                           
   991                           ;doprnt.c: 1469: }
   992                           ;doprnt.c: 1472: prec = c;
   993  001136  C01C  F019         	movff	sprintf@c,sprintf@prec
   994                           
   995                           ;doprnt.c: 1474: while(prec--) {
   996  00113A  D02C               	goto	l1308
   997  00113C                     l1302:
   998                           
   999                           ;doprnt.c: 1478: {
  1000                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1001  00113C  5019               	movf	sprintf@prec,w,c
  1002  00113E  0D02               	mullw	2
  1003  001140  0E01               	movlw	low _dpowers
  1004  001142  24F3               	addwf	prodl,w,c
  1005  001144  6EF6               	movwf	tblptrl,c
  1006  001146  0E10               	movlw	high _dpowers
  1007  001148  20F4               	addwfc	prodh,w,c
  1008  00114A  6EF7               	movwf	tblptrh,c
  1009  00114C                     	if	1	;There are 3 active tblptr bytes
  1010  00114C  6AF8               	clrf	tblptru,c
  1011  00114E  0E00               	movlw	low (__mediumconst shr (0+16))
  1012  001150  22F8               	addwfc	tblptru,f,c
  1013  001152                     	endif
  1014  001152  0009               	tblrd		*+
  1015  001154  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1016  001158  000A               	tblrd		*-
  1017  00115A  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1018  00115E  C01A  F001         	movff	sprintf@val,___lwdiv@dividend
  1019  001162  C01B  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1020  001166  EC0C  F00A         	call	___lwdiv	;wreg free
  1021  00116A  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1022  00116E  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1023  001172  0E00               	movlw	0
  1024  001174  6E0B               	movwf	___lwmod@divisor+1,c
  1025  001176  0E0A               	movlw	10
  1026  001178  6E0A               	movwf	___lwmod@divisor,c
  1027  00117A  EC7B  F00A         	call	___lwmod	;wreg free
  1028  00117E  5008               	movf	?___lwmod,w,c
  1029  001180  0F30               	addlw	48
  1030  001182  6E1C               	movwf	sprintf@c,c
  1031                           
  1032                           ;doprnt.c: 1523: }
  1033                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1034  001184  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1035  001188  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1036  00118C  C01C  FFDF         	movff	sprintf@c,indf2
  1037  001190  4A0D               	infsnz	sprintf@sp,f,c
  1038  001192  2A0E               	incf	sprintf@sp+1,f,c
  1039  001194                     l1308:
  1040  001194  0619               	decf	sprintf@prec,f,c
  1041  001196  2819               	incf	sprintf@prec,w,c
  1042  001198  A4D8               	btfss	status,2,c
  1043  00119A  D7D0               	goto	l1302
  1044  00119C                     l1310:
  1045  00119C  C00F  FFF6         	movff	sprintf@f,tblptrl
  1046  0011A0  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1047  0011A4  4A0F               	infsnz	sprintf@f,f,c
  1048  0011A6  2A10               	incf	sprintf@f+1,f,c
  1049  0011A8                     	if	0	;tblptru may be non-zero
  1050  0011A8                     	endif
  1051  0011A8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1052  0011A8  0E00               	movlw	low (__mediumconst shr (0+16))
  1053  0011AA  6EF8               	movwf	tblptru,c
  1054  0011AC                     	endif
  1055  0011AC  0008               	tblrd		*
  1056  0011AE  CFF5 F01C          	movff	tablat,sprintf@c
  1057  0011B2  501C               	movf	sprintf@c,w,c
  1058  0011B4  A4D8               	btfss	status,2,c
  1059  0011B6  D75E               	goto	l1258
  1060  0011B8                     l1312:
  1061                           
  1062                           ;doprnt.c: 1538: *sp = 0;
  1063  0011B8  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1064  0011BC  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1065  0011C0  0E00               	movlw	0
  1066  0011C2  6EDF               	movwf	indf2,c
  1067  0011C4  0012               	return	
  1068  0011C6                     __end_of_sprintf:
  1069                           	opt stack 0
  1070                           tblptru	equ	0xFF8
  1071                           tblptrh	equ	0xFF7
  1072                           tblptrl	equ	0xFF6
  1073                           tablat	equ	0xFF5
  1074                           prodh	equ	0xFF4
  1075                           prodl	equ	0xFF3
  1076                           postinc0	equ	0xFEE
  1077                           wreg	equ	0xFE8
  1078                           indf2	equ	0xFDF
  1079                           postinc2	equ	0xFDE
  1080                           postdec2	equ	0xFDD
  1081                           fsr2h	equ	0xFDA
  1082                           fsr2l	equ	0xFD9
  1083                           status	equ	0xFD8
  1084                           
  1085 ;; *************** function ___lwmod *****************
  1086 ;; Defined at:
  1087 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;  dividend        2    7[COMRAM] unsigned int 
  1090 ;;  divisor         2    9[COMRAM] unsigned int 
  1091 ;; Auto vars:     Size  Location     Type
  1092 ;;  counter         1   11[COMRAM] unsigned char 
  1093 ;; Return value:  Size  Location     Type
  1094 ;;                  2    7[COMRAM] unsigned int 
  1095 ;; Registers used:
  1096 ;;		wreg, status,2, status,0
  1097 ;; Tracked objects:
  1098 ;;		On entry : 0/0
  1099 ;;		On exit  : 0/0
  1100 ;;		Unchanged: 0/0
  1101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1102 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1103 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1105 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1106 ;;Total ram usage:        5 bytes
  1107 ;; Hardware stack levels used:    1
  1108 ;; This function calls:
  1109 ;;		Nothing
  1110 ;; This function is called by:
  1111 ;;		_sprintf
  1112 ;; This function uses a non-reentrant model
  1113 ;;
  1114                           
  1115                           	psect	text2
  1116  0014F6                     __ptext2:
  1117                           	opt stack 0
  1118  0014F6                     ___lwmod:
  1119                           	opt stack 29
  1120                           
  1121                           ;incstack = 0
  1122  0014F6  500A               	movf	___lwmod@divisor,w,c
  1123  0014F8  100B               	iorwf	___lwmod@divisor+1,w,c
  1124  0014FA  B4D8               	btfsc	status,2,c
  1125  0014FC  D018               	goto	l619
  1126  0014FE  0E01               	movlw	1
  1127  001500  6E0C               	movwf	___lwmod@counter,c
  1128  001502  D004               	goto	l1246
  1129  001504                     l1244:
  1130  001504  90D8               	bcf	status,0,c
  1131  001506  360A               	rlcf	___lwmod@divisor,f,c
  1132  001508  360B               	rlcf	___lwmod@divisor+1,f,c
  1133  00150A  2A0C               	incf	___lwmod@counter,f,c
  1134  00150C                     l1246:
  1135  00150C  AE0B               	btfss	___lwmod@divisor+1,7,c
  1136  00150E  D7FA               	goto	l1244
  1137  001510                     l1248:
  1138  001510  500A               	movf	___lwmod@divisor,w,c
  1139  001512  5C08               	subwf	___lwmod@dividend,w,c
  1140  001514  500B               	movf	___lwmod@divisor+1,w,c
  1141  001516  5809               	subwfb	___lwmod@dividend+1,w,c
  1142  001518  A0D8               	btfss	status,0,c
  1143  00151A  D004               	goto	l1252
  1144  00151C  500A               	movf	___lwmod@divisor,w,c
  1145  00151E  5E08               	subwf	___lwmod@dividend,f,c
  1146  001520  500B               	movf	___lwmod@divisor+1,w,c
  1147  001522  5A09               	subwfb	___lwmod@dividend+1,f,c
  1148  001524                     l1252:
  1149  001524  90D8               	bcf	status,0,c
  1150  001526  320B               	rrcf	___lwmod@divisor+1,f,c
  1151  001528  320A               	rrcf	___lwmod@divisor,f,c
  1152  00152A  2E0C               	decfsz	___lwmod@counter,f,c
  1153  00152C  D7F1               	goto	l1248
  1154  00152E                     l619:
  1155  00152E  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1156  001532  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1157  001536  0012               	return		;funcret
  1158  001538                     __end_of___lwmod:
  1159                           	opt stack 0
  1160                           tblptru	equ	0xFF8
  1161                           tblptrh	equ	0xFF7
  1162                           tblptrl	equ	0xFF6
  1163                           tablat	equ	0xFF5
  1164                           prodh	equ	0xFF4
  1165                           prodl	equ	0xFF3
  1166                           postinc0	equ	0xFEE
  1167                           wreg	equ	0xFE8
  1168                           indf2	equ	0xFDF
  1169                           postinc2	equ	0xFDE
  1170                           postdec2	equ	0xFDD
  1171                           fsr2h	equ	0xFDA
  1172                           fsr2l	equ	0xFD9
  1173                           status	equ	0xFD8
  1174                           
  1175 ;; *************** function ___lwdiv *****************
  1176 ;; Defined at:
  1177 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  1178 ;; Parameters:    Size  Location     Type
  1179 ;;  dividend        2    0[COMRAM] unsigned int 
  1180 ;;  divisor         2    2[COMRAM] unsigned int 
  1181 ;; Auto vars:     Size  Location     Type
  1182 ;;  quotient        2    4[COMRAM] unsigned int 
  1183 ;;  counter         1    6[COMRAM] unsigned char 
  1184 ;; Return value:  Size  Location     Type
  1185 ;;                  2    0[COMRAM] unsigned int 
  1186 ;; Registers used:
  1187 ;;		wreg, status,2, status,0
  1188 ;; Tracked objects:
  1189 ;;		On entry : 0/0
  1190 ;;		On exit  : 0/0
  1191 ;;		Unchanged: 0/0
  1192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1193 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1194 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1196 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1197 ;;Total ram usage:        7 bytes
  1198 ;; Hardware stack levels used:    1
  1199 ;; This function calls:
  1200 ;;		Nothing
  1201 ;; This function is called by:
  1202 ;;		_sprintf
  1203 ;; This function uses a non-reentrant model
  1204 ;;
  1205                           
  1206                           	psect	text3
  1207  001418                     __ptext3:
  1208                           	opt stack 0
  1209  001418                     ___lwdiv:
  1210                           	opt stack 29
  1211                           
  1212                           ;incstack = 0
  1213  001418  0E00               	movlw	0
  1214  00141A  6E06               	movwf	___lwdiv@quotient+1,c
  1215  00141C  0E00               	movlw	0
  1216  00141E  6E05               	movwf	___lwdiv@quotient,c
  1217  001420  5003               	movf	___lwdiv@divisor,w,c
  1218  001422  1004               	iorwf	___lwdiv@divisor+1,w,c
  1219  001424  B4D8               	btfsc	status,2,c
  1220  001426  D01C               	goto	l609
  1221  001428  0E01               	movlw	1
  1222  00142A  6E07               	movwf	___lwdiv@counter,c
  1223  00142C  D004               	goto	l1226
  1224  00142E                     l1224:
  1225  00142E  90D8               	bcf	status,0,c
  1226  001430  3603               	rlcf	___lwdiv@divisor,f,c
  1227  001432  3604               	rlcf	___lwdiv@divisor+1,f,c
  1228  001434  2A07               	incf	___lwdiv@counter,f,c
  1229  001436                     l1226:
  1230  001436  AE04               	btfss	___lwdiv@divisor+1,7,c
  1231  001438  D7FA               	goto	l1224
  1232  00143A                     l1228:
  1233  00143A  90D8               	bcf	status,0,c
  1234  00143C  3605               	rlcf	___lwdiv@quotient,f,c
  1235  00143E  3606               	rlcf	___lwdiv@quotient+1,f,c
  1236  001440  5003               	movf	___lwdiv@divisor,w,c
  1237  001442  5C01               	subwf	___lwdiv@dividend,w,c
  1238  001444  5004               	movf	___lwdiv@divisor+1,w,c
  1239  001446  5802               	subwfb	___lwdiv@dividend+1,w,c
  1240  001448  A0D8               	btfss	status,0,c
  1241  00144A  D005               	goto	l1236
  1242  00144C  5003               	movf	___lwdiv@divisor,w,c
  1243  00144E  5E01               	subwf	___lwdiv@dividend,f,c
  1244  001450  5004               	movf	___lwdiv@divisor+1,w,c
  1245  001452  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1246  001454  8005               	bsf	___lwdiv@quotient,0,c
  1247  001456                     l1236:
  1248  001456  90D8               	bcf	status,0,c
  1249  001458  3204               	rrcf	___lwdiv@divisor+1,f,c
  1250  00145A  3203               	rrcf	___lwdiv@divisor,f,c
  1251  00145C  2E07               	decfsz	___lwdiv@counter,f,c
  1252  00145E  D7ED               	goto	l1228
  1253  001460                     l609:
  1254  001460  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1255  001464  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1256  001468  0012               	return		;funcret
  1257  00146A                     __end_of___lwdiv:
  1258                           	opt stack 0
  1259                           tblptru	equ	0xFF8
  1260                           tblptrh	equ	0xFF7
  1261                           tblptrl	equ	0xFF6
  1262                           tablat	equ	0xFF5
  1263                           prodh	equ	0xFF4
  1264                           prodl	equ	0xFF3
  1265                           postinc0	equ	0xFEE
  1266                           wreg	equ	0xFE8
  1267                           indf2	equ	0xFDF
  1268                           postinc2	equ	0xFDE
  1269                           postdec2	equ	0xFDD
  1270                           fsr2h	equ	0xFDA
  1271                           fsr2l	equ	0xFD9
  1272                           status	equ	0xFD8
  1273                           
  1274 ;; *************** function _Send_Sampling *****************
  1275 ;; Defined at:
  1276 ;;		line 266 in file "Current_Monitor.c"
  1277 ;; Parameters:    Size  Location     Type
  1278 ;;		None
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;  i               2    1[COMRAM] int 
  1281 ;; Return value:  Size  Location     Type
  1282 ;;                  1    wreg      void 
  1283 ;; Registers used:
  1284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1291 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1293 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1294 ;;Total ram usage:        2 bytes
  1295 ;; Hardware stack levels used:    1
  1296 ;; Hardware stack levels required when called:    1
  1297 ;; This function calls:
  1298 ;;		_Send_Command
  1299 ;; This function is called by:
  1300 ;;		_main
  1301 ;; This function uses a non-reentrant model
  1302 ;;
  1303                           
  1304                           	psect	text4
  1305  00156E                     __ptext4:
  1306                           	opt stack 0
  1307  00156E                     _Send_Sampling:
  1308                           	opt stack 29
  1309                           
  1310                           ;Current_Monitor.c: 268: int i=0;
  1311                           
  1312                           ;incstack = 0
  1313  00156E  0E00               	movlw	0
  1314  001570  6E03               	movwf	Send_Sampling@i+1,c
  1315  001572  0E00               	movlw	0
  1316  001574  6E02               	movwf	Send_Sampling@i,c
  1317                           
  1318                           ;Current_Monitor.c: 269: while (b[i]!='\0'){
  1319  001576  D00B               	goto	l994
  1320  001578                     l990:
  1321                           
  1322                           ;Current_Monitor.c: 270: Send_Command(b[i++]);
  1323  001578  0E35               	movlw	low _b
  1324  00157A  2402               	addwf	Send_Sampling@i,w,c
  1325  00157C  6ED9               	movwf	fsr2l,c
  1326  00157E  0E00               	movlw	high _b
  1327  001580  2003               	addwfc	Send_Sampling@i+1,w,c
  1328  001582  6EDA               	movwf	fsr2h,c
  1329  001584  50DF               	movf	indf2,w,c
  1330  001586  ECE0  F00A         	call	_Send_Command
  1331  00158A  4A02               	infsnz	Send_Sampling@i,f,c
  1332  00158C  2A03               	incf	Send_Sampling@i+1,f,c
  1333  00158E                     l994:
  1334  00158E  0E35               	movlw	low _b
  1335  001590  2402               	addwf	Send_Sampling@i,w,c
  1336  001592  6ED9               	movwf	fsr2l,c
  1337  001594  0E00               	movlw	high _b
  1338  001596  2003               	addwfc	Send_Sampling@i+1,w,c
  1339  001598  6EDA               	movwf	fsr2h,c
  1340  00159A  50DF               	movf	indf2,w,c
  1341  00159C  B4D8               	btfsc	status,2,c
  1342  00159E  0012               	return	
  1343  0015A0  D7EB               	goto	l990
  1344  0015A2                     __end_of_Send_Sampling:
  1345                           	opt stack 0
  1346                           tblptru	equ	0xFF8
  1347                           tblptrh	equ	0xFF7
  1348                           tblptrl	equ	0xFF6
  1349                           tablat	equ	0xFF5
  1350                           prodh	equ	0xFF4
  1351                           prodl	equ	0xFF3
  1352                           postinc0	equ	0xFEE
  1353                           wreg	equ	0xFE8
  1354                           indf2	equ	0xFDF
  1355                           postinc2	equ	0xFDE
  1356                           postdec2	equ	0xFDD
  1357                           fsr2h	equ	0xFDA
  1358                           fsr2l	equ	0xFD9
  1359                           status	equ	0xFD8
  1360                           
  1361 ;; *************** function _Send_Command *****************
  1362 ;; Defined at:
  1363 ;;		line 257 in file "Current_Monitor.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;  Command         1    wreg     unsigned char 
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;  Command         1    0[COMRAM] unsigned char 
  1368 ;; Return value:  Size  Location     Type
  1369 ;;                  1    wreg      void 
  1370 ;; Registers used:
  1371 ;;		wreg
  1372 ;; Tracked objects:
  1373 ;;		On entry : 0/0
  1374 ;;		On exit  : 0/0
  1375 ;;		Unchanged: 0/0
  1376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1378 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1380 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1381 ;;Total ram usage:        1 bytes
  1382 ;; Hardware stack levels used:    1
  1383 ;; This function calls:
  1384 ;;		Nothing
  1385 ;; This function is called by:
  1386 ;;		_Send_Sampling
  1387 ;;		_Send_Unit
  1388 ;; This function uses a non-reentrant model
  1389 ;;
  1390                           
  1391                           	psect	text5
  1392  0015C0                     __ptext5:
  1393                           	opt stack 0
  1394  0015C0                     _Send_Command:
  1395                           	opt stack 29
  1396                           
  1397                           ;incstack = 0
  1398                           ;Send_Command@Command stored from wreg
  1399  0015C0  6E01               	movwf	Send_Command@Command,c
  1400                           
  1401                           ;Current_Monitor.c: 259: TXREG1=Command;
  1402  0015C2  C001  FFAD         	movff	Send_Command@Command,4013	;volatile
  1403                           
  1404                           ;Current_Monitor.c: 260: _delay((unsigned long)((50)*(10000000/4000000.0)));
  1405  0015C6  0E29               	movlw	41
  1406  0015C8                     u697:
  1407  0015C8  2EE8               	decfsz	wreg,f,c
  1408  0015CA  D7FE               	bra	u697
  1409  0015CC  D000               	nop2	
  1410  0015CE                     l126:
  1411  0015CE  B89E               	btfsc	3998,4,c	;volatile
  1412  0015D0  0012               	return	
  1413  0015D2  D7FD               	goto	l126
  1414  0015D4                     __end_of_Send_Command:
  1415                           	opt stack 0
  1416                           tblptru	equ	0xFF8
  1417                           tblptrh	equ	0xFF7
  1418                           tblptrl	equ	0xFF6
  1419                           tablat	equ	0xFF5
  1420                           prodh	equ	0xFF4
  1421                           prodl	equ	0xFF3
  1422                           postinc0	equ	0xFEE
  1423                           wreg	equ	0xFE8
  1424                           indf2	equ	0xFDF
  1425                           postinc2	equ	0xFDE
  1426                           postdec2	equ	0xFDD
  1427                           fsr2h	equ	0xFDA
  1428                           fsr2l	equ	0xFD9
  1429                           status	equ	0xFD8
  1430                           
  1431 ;; *************** function _Read_UART_Input *****************
  1432 ;; Defined at:
  1433 ;;		line 244 in file "Current_Monitor.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;		None
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;		None
  1438 ;; Return value:  Size  Location     Type
  1439 ;;                  1    wreg      void 
  1440 ;; Registers used:
  1441 ;;		None
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1451 ;;Total ram usage:        0 bytes
  1452 ;; Hardware stack levels used:    1
  1453 ;; This function calls:
  1454 ;;		Nothing
  1455 ;; This function is called by:
  1456 ;;		_main
  1457 ;; This function uses a non-reentrant model
  1458 ;;
  1459                           
  1460                           	psect	text6
  1461  0015E8                     __ptext6:
  1462                           	opt stack 0
  1463  0015E8                     _Read_UART_Input:
  1464                           	opt stack 30
  1465                           
  1466                           ;Current_Monitor.c: 246: RCSTA1bits.CREN=1;
  1467                           
  1468                           ;incstack = 0
  1469  0015E8  88AB               	bsf	4011,4,c	;volatile
  1470  0015EA                     l120:
  1471  0015EA  AA9E               	btfss	3998,5,c	;volatile
  1472  0015EC  D7FE               	goto	l120
  1473                           
  1474                           ;Current_Monitor.c: 248: Keyboard=RCREG1;
  1475  0015EE  CFAE F02D          	movff	4014,_Keyboard	;volatile
  1476  0015F2  0012               	return		;funcret
  1477  0015F4                     __end_of_Read_UART_Input:
  1478                           	opt stack 0
  1479                           tblptru	equ	0xFF8
  1480                           tblptrh	equ	0xFF7
  1481                           tblptrl	equ	0xFF6
  1482                           tablat	equ	0xFF5
  1483                           prodh	equ	0xFF4
  1484                           prodl	equ	0xFF3
  1485                           postinc0	equ	0xFEE
  1486                           wreg	equ	0xFE8
  1487                           indf2	equ	0xFDF
  1488                           postinc2	equ	0xFDE
  1489                           postdec2	equ	0xFDD
  1490                           fsr2h	equ	0xFDA
  1491                           fsr2l	equ	0xFD9
  1492                           status	equ	0xFD8
  1493                           
  1494 ;; *************** function _Initialize_UART *****************
  1495 ;; Defined at:
  1496 ;;		line 225 in file "Current_Monitor.c"
  1497 ;; Parameters:    Size  Location     Type
  1498 ;;		None
  1499 ;; Auto vars:     Size  Location     Type
  1500 ;;		None
  1501 ;; Return value:  Size  Location     Type
  1502 ;;                  1    wreg      void 
  1503 ;; Registers used:
  1504 ;;		wreg, status,2
  1505 ;; Tracked objects:
  1506 ;;		On entry : 0/0
  1507 ;;		On exit  : 0/0
  1508 ;;		Unchanged: 0/0
  1509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1514 ;;Total ram usage:        0 bytes
  1515 ;; Hardware stack levels used:    1
  1516 ;; This function calls:
  1517 ;;		Nothing
  1518 ;; This function is called by:
  1519 ;;		_main
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text7
  1524  0015D4                     __ptext7:
  1525                           	opt stack 0
  1526  0015D4                     _Initialize_UART:
  1527                           	opt stack 30
  1528                           
  1529                           ;Current_Monitor.c: 228: TRISCbits.RC7=1;
  1530                           
  1531                           ;incstack = 0
  1532  0015D4  8E94               	bsf	3988,7,c	;volatile
  1533                           
  1534                           ;Current_Monitor.c: 229: TRISCbits.RC6=0;
  1535  0015D6  9C94               	bcf	3988,6,c	;volatile
  1536                           
  1537                           ;Current_Monitor.c: 234: TXSTA1bits.SYNC=0;
  1538  0015D8  98AC               	bcf	4012,4,c	;volatile
  1539                           
  1540                           ;Current_Monitor.c: 235: TXSTA1bits.BRGH=0;
  1541  0015DA  94AC               	bcf	4012,2,c	;volatile
  1542                           
  1543                           ;Current_Monitor.c: 236: BAUDCON1bits.BRG16=0;
  1544  0015DC  967E               	bcf	3966,3,c	;volatile
  1545                           
  1546                           ;Current_Monitor.c: 237: SPBRG1=15;
  1547  0015DE  0E0F               	movlw	15
  1548  0015E0  6EAF               	movwf	4015,c	;volatile
  1549                           
  1550                           ;Current_Monitor.c: 238: RCSTA1bits.SPEN=1;
  1551  0015E2  8EAB               	bsf	4011,7,c	;volatile
  1552                           
  1553                           ;Current_Monitor.c: 239: TXSTA1bits.TXEN=1;
  1554  0015E4  8AAC               	bsf	4012,5,c	;volatile
  1555  0015E6  0012               	return		;funcret
  1556  0015E8                     __end_of_Initialize_UART:
  1557                           	opt stack 0
  1558                           tblptru	equ	0xFF8
  1559                           tblptrh	equ	0xFF7
  1560                           tblptrl	equ	0xFF6
  1561                           tablat	equ	0xFF5
  1562                           prodh	equ	0xFF4
  1563                           prodl	equ	0xFF3
  1564                           postinc0	equ	0xFEE
  1565                           wreg	equ	0xFE8
  1566                           indf2	equ	0xFDF
  1567                           postinc2	equ	0xFDE
  1568                           postdec2	equ	0xFDD
  1569                           fsr2h	equ	0xFDA
  1570                           fsr2l	equ	0xFD9
  1571                           status	equ	0xFD8
  1572                           
  1573 ;; *************** function _Initialize_Analog *****************
  1574 ;; Defined at:
  1575 ;;		line 277 in file "Current_Monitor.c"
  1576 ;; Parameters:    Size  Location     Type
  1577 ;;		None
  1578 ;; Auto vars:     Size  Location     Type
  1579 ;;		None
  1580 ;; Return value:  Size  Location     Type
  1581 ;;                  1    wreg      void 
  1582 ;; Registers used:
  1583 ;;		wreg, status,2
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1593 ;;Total ram usage:        0 bytes
  1594 ;; Hardware stack levels used:    1
  1595 ;; This function calls:
  1596 ;;		Nothing
  1597 ;; This function is called by:
  1598 ;;		_main
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           	psect	text8
  1603  0015A2                     __ptext8:
  1604                           	opt stack 0
  1605  0015A2                     _Initialize_Analog:
  1606                           	opt stack 30
  1607                           
  1608                           ;Current_Monitor.c: 280: TRISA=0xff;
  1609                           
  1610                           ;incstack = 0
  1611  0015A2  6892               	setf	3986,c	;volatile
  1612                           
  1613                           ;Current_Monitor.c: 281: TRISD=0x00;
  1614  0015A4  0E00               	movlw	0
  1615  0015A6  6E95               	movwf	3989,c	;volatile
  1616                           
  1617                           ;Current_Monitor.c: 282: PORTD=0x00;
  1618  0015A8  0E00               	movlw	0
  1619  0015AA  6E83               	movwf	3971,c	;volatile
  1620                           
  1621                           ;Current_Monitor.c: 283: PORTA=0x00;
  1622  0015AC  0E00               	movlw	0
  1623  0015AE  6E80               	movwf	3968,c	;volatile
  1624                           
  1625                           ;Current_Monitor.c: 285: MEMCONbits.EBDIS=1;
  1626  0015B0  8E9C               	bsf	3996,7,c	;volatile
  1627                           
  1628                           ;Current_Monitor.c: 286: ADCON0=0b00000001;
  1629  0015B2  0E01               	movlw	1
  1630  0015B4  6EC2               	movwf	4034,c	;volatile
  1631                           
  1632                           ;Current_Monitor.c: 287: ADCON1=0b00000000;
  1633  0015B6  0E00               	movlw	0
  1634  0015B8  6EC1               	movwf	4033,c	;volatile
  1635                           
  1636                           ;Current_Monitor.c: 288: ADCON2=0b00000000;
  1637  0015BA  0E00               	movlw	0
  1638  0015BC  6EC0               	movwf	4032,c	;volatile
  1639  0015BE  0012               	return		;funcret
  1640  0015C0                     __end_of_Initialize_Analog:
  1641                           	opt stack 0
  1642                           tblptru	equ	0xFF8
  1643                           tblptrh	equ	0xFF7
  1644                           tblptrl	equ	0xFF6
  1645                           tablat	equ	0xFF5
  1646                           prodh	equ	0xFF4
  1647                           prodl	equ	0xFF3
  1648                           postinc0	equ	0xFEE
  1649                           wreg	equ	0xFE8
  1650                           indf2	equ	0xFDF
  1651                           postinc2	equ	0xFDE
  1652                           postdec2	equ	0xFDD
  1653                           fsr2h	equ	0xFDA
  1654                           fsr2l	equ	0xFD9
  1655                           status	equ	0xFD8
  1656                           
  1657 ;; *************** function _EEPROM_Write *****************
  1658 ;; Defined at:
  1659 ;;		line 336 in file "Current_Monitor.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;  address         1    wreg     unsigned char 
  1662 ;;  value           2    0[COMRAM] PTR unsigned char 
  1663 ;;		 -> RAM(3935), 
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;  address         1    3[COMRAM] unsigned char 
  1666 ;; Return value:  Size  Location     Type
  1667 ;;                  1    wreg      void 
  1668 ;; Registers used:
  1669 ;;		wreg, status,2
  1670 ;; Tracked objects:
  1671 ;;		On entry : 0/0
  1672 ;;		On exit  : 0/0
  1673 ;;		Unchanged: 0/0
  1674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1675 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1676 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1677 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1678 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1679 ;;Total ram usage:        4 bytes
  1680 ;; Hardware stack levels used:    1
  1681 ;; This function calls:
  1682 ;;		Nothing
  1683 ;; This function is called by:
  1684 ;;		_main
  1685 ;; This function uses a non-reentrant model
  1686 ;;
  1687                           
  1688                           	psect	text9
  1689  001538                     __ptext9:
  1690                           	opt stack 0
  1691  001538                     _EEPROM_Write:
  1692                           	opt stack 30
  1693                           
  1694                           ;incstack = 0
  1695                           ;EEPROM_Write@address stored from wreg
  1696  001538  6E04               	movwf	EEPROM_Write@address,c
  1697                           
  1698                           ;Current_Monitor.c: 340: _delay((unsigned long)((50)*(10000000/4000.0)));
  1699  00153A  0EA3               	movlw	163
  1700  00153C  6E03               	movwf	??_EEPROM_Write& (0+255),c
  1701  00153E  0E55               	movlw	85
  1702  001540                     u707:
  1703  001540  2EE8               	decfsz	wreg,f,c
  1704  001542  D7FE               	bra	u707
  1705  001544  2E03               	decfsz	??_EEPROM_Write& (0+255),f,c
  1706  001546  D7FC               	bra	u707
  1707  001548  F000               	nop	
  1708                           
  1709                           ;Current_Monitor.c: 341: EECON1bits.WREN=1;
  1710  00154A  84A6               	bsf	4006,2,c	;volatile
  1711                           
  1712                           ;Current_Monitor.c: 342: EEADR=address ;
  1713  00154C  C004  FFA9         	movff	EEPROM_Write@address,4009	;volatile
  1714                           
  1715                           ;Current_Monitor.c: 343: EEDATA=value;
  1716  001550  C001  FFA8         	movff	EEPROM_Write@value,4008	;volatile
  1717                           
  1718                           ;Current_Monitor.c: 344: EECON1bits.EEPGD=0;
  1719  001554  9EA6               	bcf	4006,7,c	;volatile
  1720                           
  1721                           ;Current_Monitor.c: 345: EECON1bits.CFGS=0;
  1722  001556  9CA6               	bcf	4006,6,c	;volatile
  1723                           
  1724                           ;Current_Monitor.c: 346: INTCONbits.GIE=0;
  1725  001558  9EF2               	bcf	intcon,7,c	;volatile
  1726                           
  1727                           ;Current_Monitor.c: 349: EECON2=0x55;
  1728  00155A  0E55               	movlw	85
  1729  00155C  6EA7               	movwf	4007,c	;volatile
  1730                           
  1731                           ;Current_Monitor.c: 350: EECON2=0xAA;
  1732  00155E  0EAA               	movlw	170
  1733  001560  6EA7               	movwf	4007,c	;volatile
  1734                           
  1735                           ;Current_Monitor.c: 351: EECON1bits.WR=1;
  1736  001562  82A6               	bsf	4006,1,c	;volatile
  1737                           
  1738                           ;Current_Monitor.c: 354: INTCONbits.GIE=1;
  1739  001564  8EF2               	bsf	intcon,7,c	;volatile
  1740  001566                     l157:
  1741  001566  B2A6               	btfsc	4006,1,c	;volatile
  1742  001568  D7FE               	goto	l157
  1743                           
  1744                           ;Current_Monitor.c: 356: EECON1bits.WREN = 0;
  1745  00156A  94A6               	bcf	4006,2,c	;volatile
  1746  00156C  0012               	return		;funcret
  1747  00156E                     __end_of_EEPROM_Write:
  1748                           	opt stack 0
  1749                           tblptru	equ	0xFF8
  1750                           tblptrh	equ	0xFF7
  1751                           tblptrl	equ	0xFF6
  1752                           tablat	equ	0xFF5
  1753                           prodh	equ	0xFF4
  1754                           prodl	equ	0xFF3
  1755                           intcon	equ	0xFF2
  1756                           postinc0	equ	0xFEE
  1757                           wreg	equ	0xFE8
  1758                           indf2	equ	0xFDF
  1759                           postinc2	equ	0xFDE
  1760                           postdec2	equ	0xFDD
  1761                           fsr2h	equ	0xFDA
  1762                           fsr2l	equ	0xFD9
  1763                           status	equ	0xFD8
  1764                           
  1765 ;; *************** function _EEPROM_Read *****************
  1766 ;; Defined at:
  1767 ;;		line 361 in file "Current_Monitor.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;  address         1    wreg     unsigned char 
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  address         1   12[COMRAM] unsigned char 
  1772 ;; Return value:  Size  Location     Type
  1773 ;;                  1    wreg      void 
  1774 ;; Registers used:
  1775 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1782 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1783 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1784 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1785 ;;Total ram usage:        3 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; Hardware stack levels required when called:    2
  1788 ;; This function calls:
  1789 ;;		_Average_Function
  1790 ;; This function is called by:
  1791 ;;		_main
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           	psect	text10
  1796  00146A                     __ptext10:
  1797                           	opt stack 0
  1798  00146A                     _EEPROM_Read:
  1799                           	opt stack 28
  1800                           
  1801                           ;incstack = 0
  1802                           ;EEPROM_Read@address stored from wreg
  1803  00146A  6E0D               	movwf	EEPROM_Read@address,c
  1804                           
  1805                           ;Current_Monitor.c: 366: _delay((unsigned long)((50)*(10000000/4000.0)));
  1806  00146C  0EA3               	movlw	163
  1807  00146E  6E0B               	movwf	??_EEPROM_Read& (0+255),c
  1808  001470  0E55               	movlw	85
  1809  001472                     u717:
  1810  001472  2EE8               	decfsz	wreg,f,c
  1811  001474  D7FE               	bra	u717
  1812  001476  2E0B               	decfsz	??_EEPROM_Read& (0+255),f,c
  1813  001478  D7FC               	bra	u717
  1814  00147A  F000               	nop	
  1815                           
  1816                           ;Current_Monitor.c: 367: EEADR=address;
  1817  00147C  C00D  FFA9         	movff	EEPROM_Read@address,4009	;volatile
  1818                           
  1819                           ;Current_Monitor.c: 368: EECON1bits.EEPGD=0;
  1820  001480  9EA6               	bcf	4006,7,c	;volatile
  1821                           
  1822                           ;Current_Monitor.c: 369: EECON1bits.CFGS=0;
  1823  001482  9CA6               	bcf	4006,6,c	;volatile
  1824                           
  1825                           ;Current_Monitor.c: 370: EECON1bits.RD=1;
  1826  001484  80A6               	bsf	4006,0,c	;volatile
  1827                           
  1828                           ;Current_Monitor.c: 371: result_EEPROM=EEDATA;
  1829  001486  CFA8 F02E          	movff	4008,_result_EEPROM	;volatile
  1830                           
  1831                           ;Current_Monitor.c: 372: Sample_for_Average[x++]=result_EEPROM;
  1832  00148A  502E               	movf	_result_EEPROM,w,c
  1833  00148C  6E0B               	movwf	??_EEPROM_Read& (0+255),c
  1834  00148E  6A0C               	clrf	(??_EEPROM_Read+1)& (0+255),c
  1835  001490  90D8               	bcf	status,0,c
  1836  001492  3429               	rlcf	_x,w,c
  1837  001494  6ED9               	movwf	fsr2l,c
  1838  001496  342A               	rlcf	_x+1,w,c
  1839  001498  6EDA               	movwf	fsr2h,c
  1840  00149A  0E00               	movlw	low _Sample_for_Average
  1841  00149C  26D9               	addwf	fsr2l,f,c
  1842  00149E  0E01               	movlw	high _Sample_for_Average
  1843  0014A0  22DA               	addwfc	fsr2h,f,c
  1844  0014A2  C00B  FFDE         	movff	??_EEPROM_Read,postinc2
  1845  0014A6  C00C  FFDD         	movff	??_EEPROM_Read+1,postdec2
  1846  0014AA  4A29               	infsnz	_x,f,c
  1847  0014AC  2A2A               	incf	_x+1,f,c
  1848                           
  1849                           ;Current_Monitor.c: 373: Average_Function();
  1850  0014AE  ECE1  F009         	call	_Average_Function	;wreg free
  1851  0014B2  0012               	return		;funcret
  1852  0014B4                     __end_of_EEPROM_Read:
  1853                           	opt stack 0
  1854                           tblptru	equ	0xFF8
  1855                           tblptrh	equ	0xFF7
  1856                           tblptrl	equ	0xFF6
  1857                           tablat	equ	0xFF5
  1858                           prodh	equ	0xFF4
  1859                           prodl	equ	0xFF3
  1860                           intcon	equ	0xFF2
  1861                           postinc0	equ	0xFEE
  1862                           wreg	equ	0xFE8
  1863                           indf2	equ	0xFDF
  1864                           postinc2	equ	0xFDE
  1865                           postdec2	equ	0xFDD
  1866                           fsr2h	equ	0xFDA
  1867                           fsr2l	equ	0xFD9
  1868                           status	equ	0xFD8
  1869                           
  1870 ;; *************** function _Average_Function *****************
  1871 ;; Defined at:
  1872 ;;		line 406 in file "Current_Monitor.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;		None
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;  x               2    8[COMRAM] int 
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      void 
  1879 ;; Registers used:
  1880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1889 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1890 ;;Total ram usage:        2 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    1
  1893 ;; This function calls:
  1894 ;;		___awdiv
  1895 ;; This function is called by:
  1896 ;;		_EEPROM_Read
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           	psect	text11
  1901  0013C2                     __ptext11:
  1902                           	opt stack 0
  1903  0013C2                     _Average_Function:
  1904                           	opt stack 28
  1905                           
  1906                           ;Current_Monitor.c: 408: for(int x=0;x<=50;x++){
  1907                           
  1908                           ;incstack = 0
  1909  0013C2  0E00               	movlw	0
  1910  0013C4  6E0A               	movwf	Average_Function@x+1,c
  1911  0013C6  0E00               	movlw	0
  1912  0013C8  6E09               	movwf	Average_Function@x,c
  1913  0013CA                     l1206:
  1914  0013CA  BE0A               	btfsc	Average_Function@x+1,7,c
  1915  0013CC  D006               	goto	l1210
  1916  0013CE  500A               	movf	Average_Function@x+1,w,c
  1917  0013D0  E114               	bnz	l1216
  1918  0013D2  0E33               	movlw	51
  1919  0013D4  5C09               	subwf	Average_Function@x,w,c
  1920  0013D6  B0D8               	btfsc	status,0,c
  1921  0013D8  D010               	goto	l1216
  1922  0013DA                     l1210:
  1923                           
  1924                           ;Current_Monitor.c: 409: Average +=Sample_for_Average[x];
  1925  0013DA  90D8               	bcf	status,0,c
  1926  0013DC  3409               	rlcf	Average_Function@x,w,c
  1927  0013DE  6ED9               	movwf	fsr2l,c
  1928  0013E0  340A               	rlcf	Average_Function@x+1,w,c
  1929  0013E2  6EDA               	movwf	fsr2h,c
  1930  0013E4  0E00               	movlw	low _Sample_for_Average
  1931  0013E6  26D9               	addwf	fsr2l,f,c
  1932  0013E8  0E01               	movlw	high _Sample_for_Average
  1933  0013EA  22DA               	addwfc	fsr2h,f,c
  1934  0013EC  50DE               	movf	postinc2,w,c
  1935  0013EE  2627               	addwf	_Average,f,c
  1936  0013F0  50DD               	movf	postdec2,w,c
  1937  0013F2  2228               	addwfc	_Average+1,f,c
  1938  0013F4  4A09               	infsnz	Average_Function@x,f,c
  1939  0013F6  2A0A               	incf	Average_Function@x+1,f,c
  1940  0013F8  D7E8               	goto	l1206
  1941  0013FA                     l1216:
  1942                           
  1943                           ;Current_Monitor.c: 411: }
  1944                           ;Current_Monitor.c: 412: Average=Average/50;
  1945  0013FA  C027  F001         	movff	_Average,___awdiv@dividend
  1946  0013FE  C028  F002         	movff	_Average+1,___awdiv@dividend+1
  1947  001402  0E00               	movlw	0
  1948  001404  6E04               	movwf	___awdiv@divisor+1,c
  1949  001406  0E32               	movlw	50
  1950  001408  6E03               	movwf	___awdiv@divisor,c
  1951  00140A  EC71  F009         	call	___awdiv	;wreg free
  1952  00140E  C001  F027         	movff	?___awdiv,_Average
  1953  001412  C002  F028         	movff	?___awdiv+1,_Average+1
  1954  001416  0012               	return		;funcret
  1955  001418                     __end_of_Average_Function:
  1956                           	opt stack 0
  1957                           tblptru	equ	0xFF8
  1958                           tblptrh	equ	0xFF7
  1959                           tblptrl	equ	0xFF6
  1960                           tablat	equ	0xFF5
  1961                           prodh	equ	0xFF4
  1962                           prodl	equ	0xFF3
  1963                           intcon	equ	0xFF2
  1964                           postinc0	equ	0xFEE
  1965                           wreg	equ	0xFE8
  1966                           indf2	equ	0xFDF
  1967                           postinc2	equ	0xFDE
  1968                           postdec2	equ	0xFDD
  1969                           fsr2h	equ	0xFDA
  1970                           fsr2l	equ	0xFD9
  1971                           status	equ	0xFD8
  1972                           
  1973 ;; *************** function ___awdiv *****************
  1974 ;; Defined at:
  1975 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;  dividend        2    0[COMRAM] int 
  1978 ;;  divisor         2    2[COMRAM] int 
  1979 ;; Auto vars:     Size  Location     Type
  1980 ;;  quotient        2    6[COMRAM] int 
  1981 ;;  sign            1    5[COMRAM] unsigned char 
  1982 ;;  counter         1    4[COMRAM] unsigned char 
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  2    0[COMRAM] int 
  1985 ;; Registers used:
  1986 ;;		wreg, status,2, status,0
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1992 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1995 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1996 ;;Total ram usage:        8 bytes
  1997 ;; Hardware stack levels used:    1
  1998 ;; This function calls:
  1999 ;;		Nothing
  2000 ;; This function is called by:
  2001 ;;		_Average_Function
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005                           	psect	text12
  2006  0012E2                     __ptext12:
  2007                           	opt stack 0
  2008  0012E2                     ___awdiv:
  2009                           	opt stack 28
  2010                           
  2011                           ;incstack = 0
  2012  0012E2  0E00               	movlw	0
  2013  0012E4  6E06               	movwf	___awdiv@sign,c
  2014  0012E6  AE04               	btfss	___awdiv@divisor+1,7,c
  2015  0012E8  D006               	goto	l1168
  2016  0012EA  6C03               	negf	___awdiv@divisor,c
  2017  0012EC  1E04               	comf	___awdiv@divisor+1,f,c
  2018  0012EE  B0D8               	btfsc	status,0,c
  2019  0012F0  2A04               	incf	___awdiv@divisor+1,f,c
  2020  0012F2  0E01               	movlw	1
  2021  0012F4  6E06               	movwf	___awdiv@sign,c
  2022  0012F6                     l1168:
  2023  0012F6  AE02               	btfss	___awdiv@dividend+1,7,c
  2024  0012F8  D006               	goto	l1174
  2025  0012FA  6C01               	negf	___awdiv@dividend,c
  2026  0012FC  1E02               	comf	___awdiv@dividend+1,f,c
  2027  0012FE  B0D8               	btfsc	status,0,c
  2028  001300  2A02               	incf	___awdiv@dividend+1,f,c
  2029  001302  0E01               	movlw	1
  2030  001304  1A06               	xorwf	___awdiv@sign,f,c
  2031  001306                     l1174:
  2032  001306  0E00               	movlw	0
  2033  001308  6E08               	movwf	___awdiv@quotient+1,c
  2034  00130A  0E00               	movlw	0
  2035  00130C  6E07               	movwf	___awdiv@quotient,c
  2036  00130E  5003               	movf	___awdiv@divisor,w,c
  2037  001310  1004               	iorwf	___awdiv@divisor+1,w,c
  2038  001312  B4D8               	btfsc	status,2,c
  2039  001314  D01C               	goto	l1196
  2040  001316  0E01               	movlw	1
  2041  001318  6E05               	movwf	___awdiv@counter,c
  2042  00131A  D004               	goto	l1182
  2043  00131C                     l1180:
  2044  00131C  90D8               	bcf	status,0,c
  2045  00131E  3603               	rlcf	___awdiv@divisor,f,c
  2046  001320  3604               	rlcf	___awdiv@divisor+1,f,c
  2047  001322  2A05               	incf	___awdiv@counter,f,c
  2048  001324                     l1182:
  2049  001324  AE04               	btfss	___awdiv@divisor+1,7,c
  2050  001326  D7FA               	goto	l1180
  2051  001328                     l1184:
  2052  001328  90D8               	bcf	status,0,c
  2053  00132A  3607               	rlcf	___awdiv@quotient,f,c
  2054  00132C  3608               	rlcf	___awdiv@quotient+1,f,c
  2055  00132E  5003               	movf	___awdiv@divisor,w,c
  2056  001330  5C01               	subwf	___awdiv@dividend,w,c
  2057  001332  5004               	movf	___awdiv@divisor+1,w,c
  2058  001334  5802               	subwfb	___awdiv@dividend+1,w,c
  2059  001336  A0D8               	btfss	status,0,c
  2060  001338  D005               	goto	l1192
  2061  00133A  5003               	movf	___awdiv@divisor,w,c
  2062  00133C  5E01               	subwf	___awdiv@dividend,f,c
  2063  00133E  5004               	movf	___awdiv@divisor+1,w,c
  2064  001340  5A02               	subwfb	___awdiv@dividend+1,f,c
  2065  001342  8007               	bsf	___awdiv@quotient,0,c
  2066  001344                     l1192:
  2067  001344  90D8               	bcf	status,0,c
  2068  001346  3204               	rrcf	___awdiv@divisor+1,f,c
  2069  001348  3203               	rrcf	___awdiv@divisor,f,c
  2070  00134A  2E05               	decfsz	___awdiv@counter,f,c
  2071  00134C  D7ED               	goto	l1184
  2072  00134E                     l1196:
  2073  00134E  5006               	movf	___awdiv@sign,w,c
  2074  001350  B4D8               	btfsc	status,2,c
  2075  001352  D004               	goto	l1200
  2076  001354  6C07               	negf	___awdiv@quotient,c
  2077  001356  1E08               	comf	___awdiv@quotient+1,f,c
  2078  001358  B0D8               	btfsc	status,0,c
  2079  00135A  2A08               	incf	___awdiv@quotient+1,f,c
  2080  00135C                     l1200:
  2081  00135C  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2082  001360  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2083  001364  0012               	return	
  2084  001366                     __end_of___awdiv:
  2085                           	opt stack 0
  2086                           tblptru	equ	0xFF8
  2087                           tblptrh	equ	0xFF7
  2088                           tblptrl	equ	0xFF6
  2089                           tablat	equ	0xFF5
  2090                           prodh	equ	0xFF4
  2091                           prodl	equ	0xFF3
  2092                           intcon	equ	0xFF2
  2093                           postinc0	equ	0xFEE
  2094                           wreg	equ	0xFE8
  2095                           indf2	equ	0xFDF
  2096                           postinc2	equ	0xFDE
  2097                           postdec2	equ	0xFDD
  2098                           fsr2h	equ	0xFDA
  2099                           fsr2l	equ	0xFD9
  2100                           status	equ	0xFD8
  2101                           
  2102 ;; *************** function _Analog_Capture_ON *****************
  2103 ;; Defined at:
  2104 ;;		line 295 in file "Current_Monitor.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;		None
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;  x               2    2[COMRAM] int 
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  1    wreg      void 
  2111 ;; Registers used:
  2112 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2121 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2122 ;;Total ram usage:        4 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; This function calls:
  2125 ;;		Nothing
  2126 ;; This function is called by:
  2127 ;;		_main
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           	psect	text13
  2132  001366                     __ptext13:
  2133                           	opt stack 0
  2134  001366                     _Analog_Capture_ON:
  2135                           	opt stack 30
  2136                           
  2137                           ;Current_Monitor.c: 297: for(int x=0;x<=50;x++){
  2138                           
  2139                           ;incstack = 0
  2140  001366  0E00               	movlw	0
  2141  001368  6E04               	movwf	Analog_Capture_ON@x+1,c
  2142  00136A  0E00               	movlw	0
  2143  00136C  6E03               	movwf	Analog_Capture_ON@x,c
  2144  00136E                     l1006:
  2145  00136E  BE04               	btfsc	Analog_Capture_ON@x+1,7,c
  2146  001370  D006               	goto	l141
  2147  001372  5004               	movf	Analog_Capture_ON@x+1,w,c
  2148  001374  E125               	bnz	l146
  2149  001376  0E33               	movlw	51
  2150  001378  5C03               	subwf	Analog_Capture_ON@x,w,c
  2151  00137A  B0D8               	btfsc	status,0,c
  2152  00137C  0012               	return	
  2153  00137E                     l141:
  2154                           
  2155                           ;Current_Monitor.c: 298: ADCON0bits.GO_DONE=1;
  2156  00137E  82C2               	bsf	4034,1,c	;volatile
  2157  001380                     l143:
  2158  001380  B2C2               	btfsc	4034,1,c	;volatile
  2159  001382  D7FE               	goto	l143
  2160                           
  2161                           ;Current_Monitor.c: 307: Sample[x]=ADRESH;
  2162  001384  50C4               	movf	4036,w,c	;volatile
  2163  001386  6E01               	movwf	??_Analog_Capture_ON& (0+255),c
  2164  001388  6A02               	clrf	(??_Analog_Capture_ON+1)& (0+255),c
  2165  00138A  90D8               	bcf	status,0,c
  2166  00138C  3403               	rlcf	Analog_Capture_ON@x,w,c
  2167  00138E  6ED9               	movwf	fsr2l,c
  2168  001390  3404               	rlcf	Analog_Capture_ON@x+1,w,c
  2169  001392  6EDA               	movwf	fsr2h,c
  2170  001394  0E60               	movlw	low _Sample
  2171  001396  26D9               	addwf	fsr2l,f,c
  2172  001398  0E00               	movlw	high _Sample
  2173  00139A  22DA               	addwfc	fsr2h,f,c
  2174  00139C  C001  FFDE         	movff	??_Analog_Capture_ON,postinc2
  2175  0013A0  C002  FFDD         	movff	??_Analog_Capture_ON+1,postdec2
  2176                           
  2177                           ;Current_Monitor.c: 309: _delay((unsigned long)((500)*(10000000/4000.0)));
  2178  0013A4  0E07               	movlw	7
  2179  0013A6  6E02               	movwf	(??_Analog_Capture_ON+1)& (0+255),c
  2180  0013A8  0E58               	movlw	88
  2181  0013AA  6E01               	movwf	??_Analog_Capture_ON& (0+255),c
  2182  0013AC  0E5A               	movlw	90
  2183  0013AE                     u727:
  2184  0013AE  2EE8               	decfsz	wreg,f,c
  2185  0013B0  D7FE               	bra	u727
  2186  0013B2  2E01               	decfsz	??_Analog_Capture_ON& (0+255),f,c
  2187  0013B4  D7FC               	bra	u727
  2188  0013B6  2E02               	decfsz	(??_Analog_Capture_ON+1)& (0+255),f,c
  2189  0013B8  D7FA               	bra	u727
  2190  0013BA  4A03               	infsnz	Analog_Capture_ON@x,f,c
  2191  0013BC  2A04               	incf	Analog_Capture_ON@x+1,f,c
  2192  0013BE  D7D7               	goto	l1006
  2193  0013C0                     l146:
  2194  0013C0  0012               	return		;funcret
  2195  0013C2                     __end_of_Analog_Capture_ON:
  2196                           	opt stack 0
  2197                           tblptru	equ	0xFF8
  2198                           tblptrh	equ	0xFF7
  2199                           tblptrl	equ	0xFF6
  2200                           tablat	equ	0xFF5
  2201                           prodh	equ	0xFF4
  2202                           prodl	equ	0xFF3
  2203                           intcon	equ	0xFF2
  2204                           postinc0	equ	0xFEE
  2205                           wreg	equ	0xFE8
  2206                           indf2	equ	0xFDF
  2207                           postinc2	equ	0xFDE
  2208                           postdec2	equ	0xFDD
  2209                           fsr2h	equ	0xFDA
  2210                           fsr2l	equ	0xFD9
  2211                           status	equ	0xFD8
  2212                           
  2213 ;; *************** function _Analog_Capture_OFF *****************
  2214 ;; Defined at:
  2215 ;;		line 318 in file "Current_Monitor.c"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;		None
  2218 ;; Auto vars:     Size  Location     Type
  2219 ;;		None
  2220 ;; Return value:  Size  Location     Type
  2221 ;;                  1    wreg      void 
  2222 ;; Registers used:
  2223 ;;		None
  2224 ;; Tracked objects:
  2225 ;;		On entry : 0/0
  2226 ;;		On exit  : 0/0
  2227 ;;		Unchanged: 0/0
  2228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2233 ;;Total ram usage:        0 bytes
  2234 ;; Hardware stack levels used:    1
  2235 ;; This function calls:
  2236 ;;		Nothing
  2237 ;; This function is called by:
  2238 ;;		_main
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242                           	psect	text14
  2243  0015F4                     __ptext14:
  2244                           	opt stack 0
  2245  0015F4                     _Analog_Capture_OFF:
  2246                           	opt stack 30
  2247                           
  2248                           ;Current_Monitor.c: 319: ADCON0bits.ADON=0;
  2249                           
  2250                           ;incstack = 0
  2251  0015F4  90C2               	bcf	4034,0,c	;volatile
  2252  0015F6  0012               	return		;funcret
  2253  0015F8                     __end_of_Analog_Capture_OFF:
  2254                           	opt stack 0
  2255                           tblptru	equ	0xFF8
  2256                           tblptrh	equ	0xFF7
  2257                           tblptrl	equ	0xFF6
  2258                           tablat	equ	0xFF5
  2259                           prodh	equ	0xFF4
  2260                           prodl	equ	0xFF3
  2261                           intcon	equ	0xFF2
  2262                           postinc0	equ	0xFEE
  2263                           wreg	equ	0xFE8
  2264                           indf2	equ	0xFDF
  2265                           postinc2	equ	0xFDE
  2266                           postdec2	equ	0xFDD
  2267                           fsr2h	equ	0xFDA
  2268                           fsr2l	equ	0xFD9
  2269                           status	equ	0xFD8
  2270                           tblptru	equ	0xFF8
  2271                           tblptrh	equ	0xFF7
  2272                           tblptrl	equ	0xFF6
  2273                           tablat	equ	0xFF5
  2274                           prodh	equ	0xFF4
  2275                           prodl	equ	0xFF3
  2276                           intcon	equ	0xFF2
  2277                           postinc0	equ	0xFEE
  2278                           wreg	equ	0xFE8
  2279                           indf2	equ	0xFDF
  2280                           postinc2	equ	0xFDE
  2281                           postdec2	equ	0xFDD
  2282                           fsr2h	equ	0xFDA
  2283                           fsr2l	equ	0xFD9
  2284                           status	equ	0xFD8
  2285                           
  2286                           	psect	rparam
  2287  0000                     tblptru	equ	0xFF8
  2288                           tblptrh	equ	0xFF7
  2289                           tblptrl	equ	0xFF6
  2290                           tablat	equ	0xFF5
  2291                           prodh	equ	0xFF4
  2292                           prodl	equ	0xFF3
  2293                           intcon	equ	0xFF2
  2294                           postinc0	equ	0xFEE
  2295                           wreg	equ	0xFE8
  2296                           indf2	equ	0xFDF
  2297                           postinc2	equ	0xFDE
  2298                           postdec2	equ	0xFDD
  2299                           fsr2h	equ	0xFDA
  2300                           fsr2l	equ	0xFD9
  2301                           status	equ	0xFD8


Data Sizes:
    Strings     94
    Constant    10
    Data        2
    BSS         267
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     38      57
    BANK0           160      0     150
    BANK1           256      0     100
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_3(CODE[34]), STR_2(CODE[28]), STR_1(CODE[32]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 3
		 -> b(COMRAM[3]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    EEPROM_Write@value	PTR unsigned char  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Send_Sampling->_Send_Command
    _EEPROM_Read->_Average_Function
    _Average_Function->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    2318
                                             28 COMRAM    10    10      0
                 _Analog_Capture_OFF
                  _Analog_Capture_ON
                        _EEPROM_Read
                       _EEPROM_Write
                  _Initialize_Analog
                    _Initialize_UART
                    _Read_UART_Input
                      _Send_Sampling
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    17      8    1438
                                             12 COMRAM    16     8      8
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Send_Sampling                                        2     2      0      45
                                              1 COMRAM     2     2      0
                       _Send_Command
 ---------------------------------------------------------------------------------
 (2) _Send_Command                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Read_UART_Input                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Initialize_UART                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Initialize_Analog                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         4     2      2     108
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Read                                          3     3      0     518
                                             10 COMRAM     3     3      0
                   _Average_Function
 ---------------------------------------------------------------------------------
 (2) _Average_Function                                     2     2      0     496
                                              8 COMRAM     2     2      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Analog_Capture_ON                                    4     4      0      45
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Analog_Capture_OFF                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Analog_Capture_OFF
   _Analog_Capture_ON
   _EEPROM_Read
     _Average_Function
       ___awdiv
   _EEPROM_Write
   _Initialize_Analog
   _Initialize_UART
   _Read_UART_Input
   _Send_Sampling
     _Send_Command
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      64       7       39.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      96       5       93.8%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     26      39       1       60.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     133      32        0.0%
DATA                 0      0     133       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Apr 12 16:39:01 2017

                          _a 002B                            _b 0035                            _x 0029  
               ___awdiv@sign 0006                  __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                __CFG_OSC$HS 000000                 __CFG_CP4$OFF 000000                 __CFG_CP5$OFF 000000  
               __CFG_CP6$OFF 000000            ??_Read_UART_Input 0001                 __CFG_CP7$OFF 000000  
                __CFG_LVP$ON 000000                  __CFG_WDT$ON 000000                          l120 15EA  
                        l107 12DA                          l141 137E                          l126 15CE  
                        l143 1380                          l146 13C0                          l157 1566  
                        l609 1460                          l619 152E                          l990 1578  
                        l994 158E                 __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000  
                        u707 1540                          u717 1472                          u727 13AE  
                        u697 15C8                          wreg 000FE8                   _TXSTA1bits 000FAC  
               __CFG_MODE$MC 000000                         l1006 136E                         l1200 135C  
                       l1210 13DA                         l1300 1136                         l1206 13CA  
                       l1302 113C                         l1310 119C                         l1216 13FA  
                       l1224 142E                         l1312 11B8                         l1226 1436  
                       l1410 12A4                         l1180 131C                         l1236 1456  
                       l1228 143A                         l1252 1524                         l1244 1504  
                       l1308 1194                         l1182 1324                         l1174 1306  
                       l1246 150C                         l1270 10BC                         l1192 1344  
                       l1184 1328                         l1168 12F6                         l1248 1510  
                       l1280 10E4                         l1264 108E                         l1282 10E8  
                       l1258 1074                         l1196 134E                         l1294 111A  
                       l1366 11E8                         l1392 1256                         l1384 1232  
                       l1386 1242                         l1378 120A                         l1396 1266  
                       STR_1 102D                         STR_2 104D                         STR_3 100B  
               _Voltage_Drop 0034                         _main 11C6                         _text 0038  
                       fsr2h 000FDA                         indf2 000FDF                         fsr2l 000FD9  
                       prodh 000FF4                         prodl 000FF3                         start 0000  
              __CFG_IESO$OFF 000000                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
       __end_of_EEPROM_Write 156E                 _BAUDCON1bits 000F7E                __CFG_WAIT$OFF 000000  
                      ?_main 0001              __end_of___awdiv 1366                        _EEADR 000FA9  
            ___awdiv@divisor 0003              __end_of___lwdiv 146A              __end_of___lwmod 1538  
            ___awdiv@counter 0005                        _PORTA 000F80                        _PORTD 000F83  
                      _TRISA 000F92                        _TRISD 000F95                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000                __CFG_WRT4$OFF 000000                __CFG_WRT5$OFF 000000  
              __CFG_WRT6$OFF 000000                __CFG_WRT7$OFF 000000               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000               __CFG_EBTR4$OFF 000000               __CFG_EBTR5$OFF 000000  
             __CFG_EBTR6$OFF 000000               __CFG_EBTR7$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000  
            __end_of_dpowers 100B                        main@i 001D                        main@x 0021  
                      main@y 0023                        tablat 000FF5                        status 000FD8  
            __end_of_sprintf 11C6         __size_of_EEPROM_Read 004A              __initialization 14B4  
               __end_of_main 12E2                       ??_main 001D             _Average_Function 13C2  
              __activetblptr 000003                       _ADCON0 000FC2                       _ADCON1 000FC1  
                     _ADCON2 000FC0               Send_Sampling@i 0002                       _ADRESH 000FC4  
                     _EEDATA 000FA8                       _EECON2 000FA7             ___awdiv@dividend 0001  
            __CFG_BBSIZ$BB2K 000000                       _RCREG1 000FAE                       _SPBRG1 000FAF  
                     _TXREG1 000FAD           _Sample_for_Average 0100               __CFG_XINST$OFF 000000  
                     _Sample 0060                    ??___awdiv 0005               __CFG_STVREN$ON 000000  
                  ??___lwdiv 0005                    ??___lwmod 000C                       clear_0 14D2  
                     clear_1 14DE                       clear_2 14EA             ___awdiv@quotient 0007  
              ?_Send_Command 0001                 __pdataCOMRAM 0038                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                  ??_sprintf 0015               _EEPROM_address 002F                   __accesstop 0060  
    __end_of__initialization 14F0            EEPROM_Write@value 0001                ___rparam_used 000001  
      __size_of_EEPROM_Write 0036              _Read_UART_Input 15E8               __pcstackCOMRAM 0001  
   __size_of_Initialize_UART 0014               ??_Send_Command 0001       __size_of_Send_Sampling 0034  
               _EEPROM_Write 1538                   __pbssBANK0 0060                   __pbssBANK1 0100  
 __end_of_Analog_Capture_OFF 15F8      __end_of_Read_UART_Input 15F4                      _Average 0027  
   __end_of_Average_Function 1418                      _Current 0033                      __Hparam 0000  
                    __Lparam 0000                      ___awdiv 12E2                _Send_Sampling 156E  
                    ___lwdiv 1418                      ___lwmod 14F6                 __psmallconst 1000  
                    __pcinit 14B4                      __ramtop 1000                      __ptext0 11C6  
                    __ptext1 106A                      __ptext2 14F6                      __ptext3 1418  
                    __ptext4 156E                      __ptext5 15C0                      __ptext6 15E8  
                    __ptext7 15D4                      __ptext8 15A2                      __ptext9 1538  
                    _dpowers 1001            ??_Initialize_UART 0001                _Sample_Number 0030  
                    _sprintf 106A         end_of_initialization 14F0                ??_EEPROM_Read 000B  
       __end_of_Send_Command 15D4               ?_Send_Sampling 0001                      postdec2 000FDD  
                    postinc0 000FEE                      postinc2 000FDE                    _TRISCbits 000F94  
           ?_Read_UART_Input 0001          __end_of_EEPROM_Read 14B4                __pidataCOMRAM 15F8  
        start_initialization 14B4              ??_Send_Sampling 0002           _Analog_Capture_OFF 15F4  
           __CFG_LPT1OSC$OFF 000000          ?_Analog_Capture_OFF 0001                  __pbssCOMRAM 0027  
      __size_of_Send_Command 0014                  sprintf@flag 0018                  _EEPROM_Read 146A  
                sprintf@prec 0019                  _EEPROM_read 00C4         ??_Analog_Capture_OFF 0001  
          ?_Average_Function 0001             ___lwdiv@dividend 0001            __CFG_CCP2MX$PORTC 000000  
         ??_Average_Function 0009              _Initialize_UART 15D4                     ?___awdiv 0001  
                   ?___lwdiv 0001                     ?___lwmod 0008            _Initialize_Analog 15A2  
                __smallconst 1000                 _Send_Command 15C0           ?_Initialize_Analog 0001  
           ___lwdiv@quotient 0005                     _EEPROM_W 0031                     ?_sprintf 000D  
        ??_Initialize_Analog 0001                     _PIR1bits 000F9E        __CFG_DATABW$DATA16BIT 000000  
           __CFG_WDTPS$32768 000000          Send_Command@Command 0001    __end_of_Initialize_Analog 15C0  
          __CFG_ECCPMX$PORTE 000000                   _ADCON0bits 000FC2                    main@i_574 001F  
                  main@x_571 0025                     _Keyboard 002D      __end_of_Initialize_UART 15E8  
                 _EECON1bits 000FA6                     __Hrparam 0000                     __Lrparam 0000  
                   _Resistor 0032           __CFG_BOREN$SBORDIS 000000            _Analog_Capture_ON 1366  
           __size_of___awdiv 0084           ?_Analog_Capture_ON 0001             __size_of___lwdiv 0052  
           __size_of___lwmod 0042                _result_EEPROM 002E                   sprintf@val 001A  
        ??_Analog_Capture_ON 0001              ___lwdiv@divisor 0003              ___lwdiv@counter 0007  
                   __ptext10 146A                     __ptext11 13C2                     __ptext12 12E2  
                   __ptext13 1366                     __ptext14 15F4                ?_EEPROM_Write 0001  
           __size_of_sprintf 015C                __size_of_main 011C    __end_of_Analog_Capture_ON 13C2  
         Analog_Capture_ON@x 0003     __size_of_Read_UART_Input 000C                   _MEMCONbits 000F9C  
 __size_of_Initialize_Analog 001E        __CFG_ADDRBW$ADDR20BIT 000000                   _INTCONbits 000FF2  
             ??_EEPROM_Write 0003                    sprintf@ap 0016                    sprintf@sp 000D  
           ___lwmod@dividend 0008                 ?_EEPROM_Read 0001             ?_Initialize_UART 0001  
                 _RCSTA1bits 000FAB           EEPROM_Read@address 000D        __end_of_Send_Sampling 15A2  
          Average_Function@x 0009    __size_of_Average_Function 0056                     sprintf@c 001C  
                   sprintf@f 000F              ___lwmod@divisor 000A              ___lwmod@counter 000C  
__size_of_Analog_Capture_OFF 0004          EEPROM_Write@address 0004   __size_of_Analog_Capture_ON 005C  
