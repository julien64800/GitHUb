

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Apr 12 20:25:36 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29  0000                     
    30                           ; Version 1.41
    31                           ; Generated 25/01/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F8722 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	idataCOMRAM
    66  00165C                     __pidataCOMRAM:
    67                           	opt stack 0
    68                           
    69                           ;initializer for _text
    70  00165C  0D                 	db	13
    71  00165D  20                 	db	32
    72                           
    73                           	psect	smallconst
    74  001000                     __psmallconst:
    75                           	opt stack 0
    76  001000  00                 	db	0
    77  001001                     _dpowers:
    78                           	opt stack 0
    79  001001  0001               	dw	1
    80  001003  000A               	dw	10
    81  001005  0064               	dw	100
    82  001007  03E8               	dw	1000
    83  001009  2710               	dw	10000
    84  00100B                     __end_of_dpowers:
    85                           	opt stack 0
    86  0000                     _EECON2	set	4007
    87  0000                     _INTCONbits	set	4082
    88  0000                     _EEDATA	set	4008
    89  0000                     _EEADR	set	4009
    90  0000                     _EECON1bits	set	4006
    91  0000                     _ADRESH	set	4036
    92  0000                     _ADCON0bits	set	4034
    93  0000                     _ADCON2	set	4032
    94  0000                     _ADCON1	set	4033
    95  0000                     _ADCON0	set	4034
    96  0000                     _MEMCONbits	set	3996
    97  0000                     _PORTA	set	3968
    98  0000                     _PORTD	set	3971
    99  0000                     _TXREG1	set	4013
   100  0000                     _RCREG1	set	4014
   101  0000                     _PIR1bits	set	3998
   102  0000                     _RCSTA1bits	set	4011
   103  0000                     _SPBRG1	set	4015
   104  0000                     _BAUDCON1bits	set	3966
   105  0000                     _TXSTA1bits	set	4012
   106  0000                     _TRISCbits	set	3988
   107  0000                     _TRISA	set	3986
   108  0000                     _TRISD	set	3989
   109  0000                     _RCONbits	set	4048
   110  00100B                     STR_2:
   111  00100B  41                 	db	65	;'A'
   112  00100C  63                 	db	99	;'c'
   113  00100D  71                 	db	113	;'q'
   114  00100E  75                 	db	117	;'u'
   115  00100F  69                 	db	105	;'i'
   116  001010  73                 	db	115	;'s'
   117  001011  69                 	db	105	;'i'
   118  001012  74                 	db	116	;'t'
   119  001013  69                 	db	105	;'i'
   120  001014  6F                 	db	111	;'o'
   121  001015  6E                 	db	110	;'n'
   122  001016  20                 	db	32
   123  001017  63                 	db	99	;'c'
   124  001018  6F                 	db	111	;'o'
   125  001019  6D                 	db	109	;'m'
   126  00101A  70                 	db	112	;'p'
   127  00101B  6C                 	db	108	;'l'
   128  00101C  65                 	db	101	;'e'
   129  00101D  74                 	db	116	;'t'
   130  00101E  65                 	db	101	;'e'
   131  00101F  64                 	db	100	;'d'
   132  001020  20                 	db	32
   133  001021  70                 	db	112	;'p'
   134  001022  72                 	db	114	;'r'
   135  001023  65                 	db	101	;'e'
   136  001024  73                 	db	115	;'s'
   137  001025  73                 	db	115	;'s'
   138  001026  20                 	db	32
   139  001027  53                 	db	83	;'S'
   140  001028  20                 	db	32
   141  001029  74                 	db	116	;'t'
   142  00102A  6F                 	db	111	;'o'
   143  00102B  20                 	db	32
   144  00102C  72                 	db	114	;'r'
   145  00102D  65                 	db	101	;'e'
   146  00102E  61                 	db	97	;'a'
   147  00102F  64                 	db	100	;'d'
   148  001030  20                 	db	32
   149  001031  6F                 	db	111	;'o'
   150  001032  72                 	db	114	;'r'
   151  001033  20                 	db	32
   152  001034  52                 	db	82	;'R'
   153  001035  20                 	db	32
   154  001036  74                 	db	116	;'t'
   155  001037  6F                 	db	111	;'o'
   156  001038  20                 	db	32
   157  001039  72                 	db	114	;'r'
   158  00103A  65                 	db	101	;'e'
   159  00103B  73                 	db	115	;'s'
   160  00103C  65                 	db	101	;'e'
   161  00103D  74                 	db	116	;'t'
   162  00103E  3A                 	db	58	;':'
   163  00103F  20                 	db	32
   164  001040  0A                 	db	10
   165  001041  00                 	db	0
   166  001042                     STR_1:
   167  001042  41                 	db	65	;'A'
   168  001043  63                 	db	99	;'c'
   169  001044  71                 	db	113	;'q'
   170  001045  75                 	db	117	;'u'
   171  001046  69                 	db	105	;'i'
   172  001047  73                 	db	115	;'s'
   173  001048  69                 	db	105	;'i'
   174  001049  74                 	db	116	;'t'
   175  00104A  69                 	db	105	;'i'
   176  00104B  6F                 	db	111	;'o'
   177  00104C  6E                 	db	110	;'n'
   178  00104D  20                 	db	32
   179  00104E  69                 	db	105	;'i'
   180  00104F  6E                 	db	110	;'n'
   181  001050  20                 	db	32
   182  001051  70                 	db	112	;'p'
   183  001052  72                 	db	114	;'r'
   184  001053  6F                 	db	111	;'o'
   185  001054  67                 	db	103	;'g'
   186  001055  72                 	db	114	;'r'
   187  001056  65                 	db	101	;'e'
   188  001057  73                 	db	115	;'s'
   189  001058  73                 	db	115	;'s'
   190  001059  20                 	db	32
   191  00105A  70                 	db	112	;'p'
   192  00105B  6C                 	db	108	;'l'
   193  00105C  65                 	db	101	;'e'
   194  00105D  61                 	db	97	;'a'
   195  00105E  73                 	db	115	;'s'
   196  00105F  65                 	db	101	;'e'
   197  001060  20                 	db	32
   198  001061  77                 	db	119	;'w'
   199  001062  61                 	db	97	;'a'
   200  001063  69                 	db	105	;'i'
   201  001064  74                 	db	116	;'t'
   202  001065  3A                 	db	58	;':'
   203  001066  20                 	db	32
   204  001067  0A                 	db	10
   205  001068  00                 	db	0
   206  001069                     STR_5:
   207  001069  41                 	db	65	;'A'
   208  00106A  76                 	db	118	;'v'
   209  00106B  65                 	db	101	;'e'
   210  00106C  72                 	db	114	;'r'
   211  00106D  61                 	db	97	;'a'
   212  00106E  67                 	db	103	;'g'
   213  00106F  65                 	db	101	;'e'
   214  001070  20                 	db	32
   215  001071  6F                 	db	111	;'o'
   216  001072  66                 	db	102	;'f'
   217  001073  20                 	db	32
   218  001074  6C                 	db	108	;'l'
   219  001075  61                 	db	97	;'a'
   220  001076  73                 	db	115	;'s'
   221  001077  74                 	db	116	;'t'
   222  001078  20                 	db	32
   223  001079  35                 	db	53	;'5'
   224  00107A  30                 	db	48	;'0'
   225  00107B  20                 	db	32
   226  00107C  53                 	db	83	;'S'
   227  00107D  61                 	db	97	;'a'
   228  00107E  6D                 	db	109	;'m'
   229  00107F  70                 	db	112	;'p'
   230  001080  6C                 	db	108	;'l'
   231  001081  65                 	db	101	;'e'
   232  001082  73                 	db	115	;'s'
   233  001083  3A                 	db	58	;':'
   234  001084  20                 	db	32
   235  001085  25                 	db	37
   236  001086  64                 	db	100	;'d'
   237  001087  20                 	db	32
   238  001088  6D                 	db	109	;'m'
   239  001089  41                 	db	65	;'A'
   240  00108A  20                 	db	32
   241  00108B  0A                 	db	10
   242  00108C  00                 	db	0
   243  00108D                     STR_4:
   244  00108D  53                 	db	83	;'S'
   245  00108E  61                 	db	97	;'a'
   246  00108F  6D                 	db	109	;'m'
   247  001090  70                 	db	112	;'p'
   248  001091  6C                 	db	108	;'l'
   249  001092  69                 	db	105	;'i'
   250  001093  6E                 	db	110	;'n'
   251  001094  67                 	db	103	;'g'
   252  001095  20                 	db	32
   253  001096  6E                 	db	110	;'n'
   254  001097  75                 	db	117	;'u'
   255  001098  6D                 	db	109	;'m'
   256  001099  62                 	db	98	;'b'
   257  00109A  65                 	db	101	;'e'
   258  00109B  72                 	db	114	;'r'
   259  00109C  20                 	db	32
   260  00109D  25                 	db	37
   261  00109E  64                 	db	100	;'d'
   262  00109F  3A                 	db	58	;':'
   263  0010A0  20                 	db	32
   264  0010A1  25                 	db	37
   265  0010A2  64                 	db	100	;'d'
   266  0010A3  20                 	db	32
   267  0010A4  6D                 	db	109	;'m'
   268  0010A5  41                 	db	65	;'A'
   269  0010A6  20                 	db	32
   270  0010A7  3A                 	db	58	;':'
   271  0010A8  0A                 	db	10
   272  0010A9  00                 	db	0
   273  0010AA                     STR_3:
   274  0010AA  50                 	db	80	;'P'
   275  0010AB  6C                 	db	108	;'l'
   276  0010AC  65                 	db	101	;'e'
   277  0010AD  61                 	db	97	;'a'
   278  0010AE  73                 	db	115	;'s'
   279  0010AF  65                 	db	101	;'e'
   280  0010B0  20                 	db	32
   281  0010B1  77                 	db	119	;'w'
   282  0010B2  61                 	db	97	;'a'
   283  0010B3  69                 	db	105	;'i'
   284  0010B4  74                 	db	116	;'t'
   285  0010B5  2E                 	db	46
   286  0010B6  2E                 	db	46
   287  0010B7  2E                 	db	46
   288  0010B8  2E                 	db	46
   289  0010B9  2E                 	db	46
   290  0010BA  2E                 	db	46
   291  0010BB  20                 	db	32
   292  0010BC  0A                 	db	10
   293  0010BD  00                 	db	0
   294                           
   295                           ; #config settings
   296  0010BE  00                 	db	0	; dummy byte at the end
   297  0000                     
   298                           	psect	cinit
   299  0014F8                     __pcinit:
   300                           	opt stack 0
   301  0014F8                     start_initialization:
   302                           	opt stack 0
   303  0014F8                     __initialization:
   304                           	opt stack 0
   305                           
   306                           ; Initialize objects allocated to COMRAM (2 bytes)
   307                           ; load TBLPTR registers with __pidataCOMRAM
   308  0014F8  0E5C               	movlw	low __pidataCOMRAM
   309  0014FA  6EF6               	movwf	tblptrl,c
   310  0014FC  0E16               	movlw	high __pidataCOMRAM
   311  0014FE  6EF7               	movwf	tblptrh,c
   312  001500  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   313  001502  6EF8               	movwf	tblptru,c
   314  001504  0009               	tblrd		*+	;fetch initializer
   315  001506  CFF5 F038          	movff	tablat,__pdataCOMRAM
   316  00150A  0009               	tblrd		*+	;fetch initializer
   317  00150C  CFF5 F039          	movff	tablat,__pdataCOMRAM+1
   318                           
   319                           ; Clear objects allocated to BANK1 (100 bytes)
   320  001510  EE01  F000         	lfsr	0,__pbssBANK1
   321  001514  0E64               	movlw	100
   322  001516                     clear_0:
   323  001516  6AEE               	clrf	postinc0,c
   324  001518  06E8               	decf	wreg,f,c
   325  00151A  E1FD               	bnz	clear_0
   326                           
   327                           ; Clear objects allocated to BANK0 (150 bytes)
   328  00151C  EE00  F060         	lfsr	0,__pbssBANK0
   329  001520  0E96               	movlw	150
   330  001522                     clear_1:
   331  001522  6AEE               	clrf	postinc0,c
   332  001524  06E8               	decf	wreg,f,c
   333  001526  E1FD               	bnz	clear_1
   334                           
   335                           ; Clear objects allocated to COMRAM (17 bytes)
   336  001528  EE00  F027         	lfsr	0,__pbssCOMRAM
   337  00152C  0E11               	movlw	17
   338  00152E                     clear_2:
   339  00152E  6AEE               	clrf	postinc0,c
   340  001530  06E8               	decf	wreg,f,c
   341  001532  E1FD               	bnz	clear_2
   342  001534                     end_of_initialization:
   343                           	opt stack 0
   344  001534                     __end_of__initialization:
   345                           	opt stack 0
   346  001534  0100               	movlb	0
   347  001536  EF0E  F009         	goto	_main	;jump to C main() function
   348                           tblptru	equ	0xFF8
   349                           tblptrh	equ	0xFF7
   350                           tblptrl	equ	0xFF6
   351                           tablat	equ	0xFF5
   352                           postinc0	equ	0xFEE
   353                           wreg	equ	0xFE8
   354                           
   355                           	psect	bssCOMRAM
   356  000027                     __pbssCOMRAM:
   357                           	opt stack 0
   358  000027                     _Average:
   359                           	opt stack 0
   360  000027                     	ds	2
   361  000029                     _x:
   362                           	opt stack 0
   363  000029                     	ds	2
   364  00002B                     _a:
   365                           	opt stack 0
   366  00002B                     	ds	2
   367  00002D                     _Keyboard:
   368                           	opt stack 0
   369  00002D                     	ds	1
   370  00002E                     _result_EEPROM:
   371                           	opt stack 0
   372  00002E                     	ds	1
   373  00002F                     _EEPROM_address:
   374                           	opt stack 0
   375  00002F                     	ds	1
   376  000030                     _Sample_Number:
   377                           	opt stack 0
   378  000030                     	ds	1
   379  000031                     _EEPROM_W:
   380                           	opt stack 0
   381  000031                     	ds	1
   382  000032                     _Resistor:
   383                           	opt stack 0
   384  000032                     	ds	1
   385  000033                     _Current:
   386                           	opt stack 0
   387  000033                     	ds	1
   388  000034                     _Voltage_Drop:
   389                           	opt stack 0
   390  000034                     	ds	1
   391  000035                     _b:
   392                           	opt stack 0
   393  000035                     	ds	3
   394                           tblptru	equ	0xFF8
   395                           tblptrh	equ	0xFF7
   396                           tblptrl	equ	0xFF6
   397                           tablat	equ	0xFF5
   398                           postinc0	equ	0xFEE
   399                           wreg	equ	0xFE8
   400                           
   401                           	psect	dataCOMRAM
   402  000038                     __pdataCOMRAM:
   403                           	opt stack 0
   404  000038                     _text:
   405                           	opt stack 0
   406  000038                     	ds	2
   407                           tblptru	equ	0xFF8
   408                           tblptrh	equ	0xFF7
   409                           tblptrl	equ	0xFF6
   410                           tablat	equ	0xFF5
   411                           postinc0	equ	0xFEE
   412                           wreg	equ	0xFE8
   413                           
   414                           	psect	bssBANK0
   415  000060                     __pbssBANK0:
   416                           	opt stack 0
   417  000060                     _Sample:
   418                           	opt stack 0
   419  000060                     	ds	100
   420  0000C4                     _EEPROM_read:
   421                           	opt stack 0
   422  0000C4                     	ds	50
   423                           tblptru	equ	0xFF8
   424                           tblptrh	equ	0xFF7
   425                           tblptrl	equ	0xFF6
   426                           tablat	equ	0xFF5
   427                           postinc0	equ	0xFEE
   428                           wreg	equ	0xFE8
   429                           
   430                           	psect	bssBANK1
   431  000100                     __pbssBANK1:
   432                           	opt stack 0
   433  000100                     _Sample_for_Average:
   434                           	opt stack 0
   435  000100                     	ds	100
   436                           tblptru	equ	0xFF8
   437                           tblptrh	equ	0xFF7
   438                           tblptrl	equ	0xFF6
   439                           tablat	equ	0xFF5
   440                           postinc0	equ	0xFEE
   441                           wreg	equ	0xFE8
   442                           
   443                           	psect	cstackCOMRAM
   444  000001                     __pcstackCOMRAM:
   445                           	opt stack 0
   446  000001                     ??_Analog_Capture_ON:
   447  000001                     ?___awdiv:
   448                           	opt stack 0
   449  000001                     ?___lwdiv:
   450                           	opt stack 0
   451  000001                     Send_to_UART@i:
   452                           	opt stack 0
   453  000001                     EEPROM_Write@value:
   454                           	opt stack 0
   455  000001                     ___awdiv@dividend:
   456                           	opt stack 0
   457  000001                     ___lwdiv@dividend:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x0
   461  000001                     	ds	2
   462  000003                     EEPROM_Write@address:
   463                           	opt stack 0
   464  000003                     Analog_Capture_ON@x:
   465                           	opt stack 0
   466  000003                     ___awdiv@divisor:
   467                           	opt stack 0
   468  000003                     ___lwdiv@divisor:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x2
   472  000003                     	ds	2
   473  000005                     ___awdiv@counter:
   474                           	opt stack 0
   475  000005                     ___lwdiv@quotient:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x4
   479  000005                     	ds	1
   480  000006                     ___awdiv@sign:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x5
   484  000006                     	ds	1
   485  000007                     ___lwdiv@counter:
   486                           	opt stack 0
   487  000007                     ___awdiv@quotient:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x6
   491  000007                     	ds	1
   492  000008                     ?___lwmod:
   493                           	opt stack 0
   494  000008                     ___lwmod@dividend:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x7
   498  000008                     	ds	1
   499  000009                     Average_Function@x:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x8
   503  000009                     	ds	1
   504  00000A                     ___lwmod@divisor:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x9
   508  00000A                     	ds	1
   509  00000B                     ??_EEPROM_Read:
   510                           
   511                           ; 1 bytes @ 0xA
   512  00000B                     	ds	1
   513  00000C                     ___lwmod@counter:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0xB
   517  00000C                     	ds	1
   518  00000D                     ?_sprintf:
   519                           	opt stack 0
   520  00000D                     EEPROM_Read@address:
   521                           	opt stack 0
   522  00000D                     sprintf@sp:
   523                           	opt stack 0
   524                           
   525                           ; 2 bytes @ 0xC
   526  00000D                     	ds	2
   527  00000F                     sprintf@f:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0xE
   531  00000F                     	ds	6
   532  000015                     ??_sprintf:
   533                           
   534                           ; 1 bytes @ 0x14
   535  000015                     	ds	1
   536  000016                     sprintf@ap:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x15
   540  000016                     	ds	2
   541  000018                     sprintf@flag:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0x17
   545  000018                     	ds	1
   546  000019                     sprintf@prec:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0x18
   550  000019                     	ds	1
   551  00001A                     sprintf@val:
   552                           	opt stack 0
   553                           
   554                           ; 2 bytes @ 0x19
   555  00001A                     	ds	2
   556  00001C                     sprintf@c:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x1B
   560  00001C                     	ds	1
   561  00001D                     main@i:
   562                           	opt stack 0
   563                           
   564                           ; 2 bytes @ 0x1C
   565  00001D                     	ds	2
   566  00001F                     main@i_648:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x1E
   570  00001F                     	ds	2
   571  000021                     main@x:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x20
   575  000021                     	ds	2
   576  000023                     main@y:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x22
   580  000023                     	ds	2
   581  000025                     main@x_645:
   582                           	opt stack 0
   583                           
   584                           ; 2 bytes @ 0x24
   585  000025                     	ds	2
   586                           tblptru	equ	0xFF8
   587                           tblptrh	equ	0xFF7
   588                           tblptrl	equ	0xFF6
   589                           tablat	equ	0xFF5
   590                           postinc0	equ	0xFEE
   591                           wreg	equ	0xFE8
   592                           
   593 ;;
   594 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   595 ;;
   596 ;; *************** function _main *****************
   597 ;; Defined at:
   598 ;;		line 140 in file "Current_Monitor.c"
   599 ;; Parameters:    Size  Location     Type
   600 ;;		None
   601 ;; Auto vars:     Size  Location     Type
   602 ;;  i               2   28[COMRAM] int 
   603 ;;  x               2   36[COMRAM] int 
   604 ;;  i               2   30[COMRAM] int 
   605 ;;  y               2   34[COMRAM] int 
   606 ;;  x               2   32[COMRAM] int 
   607 ;; Return value:  Size  Location     Type
   608 ;;                  1    wreg      void 
   609 ;; Registers used:
   610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   611 ;; Tracked objects:
   612 ;;		On entry : 0/0
   613 ;;		On exit  : 0/0
   614 ;;		Unchanged: 0/0
   615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   617 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   619 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   620 ;;Total ram usage:       10 bytes
   621 ;; Hardware stack levels required when called:    3
   622 ;; This function calls:
   623 ;;		_Analog_Capture_OFF
   624 ;;		_Analog_Capture_ON
   625 ;;		_EEPROM_Read
   626 ;;		_EEPROM_Write
   627 ;;		_Initialize_Analog
   628 ;;		_Initialize_UART
   629 ;;		_Read_UART_Input
   630 ;;		_Send_to_UART
   631 ;;		_sprintf
   632 ;; This function is called by:
   633 ;;		Startup code after reset
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637                           	psect	text0
   638  00121C                     __ptext0:
   639                           	opt stack 0
   640  00121C                     _main:
   641                           	opt stack 28
   642                           
   643                           ;Current_Monitor.c: 142: RCONbits.RI=0;
   644                           
   645                           ;incstack = 0
   646  00121C  98D0               	bcf	4048,4,c	;volatile
   647                           
   648                           ;Current_Monitor.c: 143: TRISD=0x00;
   649  00121E  0E00               	movlw	0
   650  001220  6E95               	movwf	3989,c	;volatile
   651                           
   652                           ;Current_Monitor.c: 144: TRISA=0xFF;
   653  001222  6892               	setf	3986,c	;volatile
   654                           
   655                           ;Current_Monitor.c: 145: Initialize_UART();
   656  001224  EC1C  F00B         	call	_Initialize_UART	;wreg free
   657                           
   658                           ;Current_Monitor.c: 146: sprintf(b,"Acquisition in progress please wait: \n");
   659  001228  0E35               	movlw	low _b
   660  00122A  6E0D               	movwf	sprintf@sp,c
   661  00122C  0E00               	movlw	high _b
   662  00122E  6E0E               	movwf	sprintf@sp+1,c
   663  001230  0E42               	movlw	low STR_1
   664  001232  6E0F               	movwf	sprintf@f,c
   665  001234  0E10               	movlw	high STR_1
   666  001236  6E10               	movwf	sprintf@f+1,c
   667  001238  EC60  F008         	call	_sprintf	;wreg free
   668                           
   669                           ;Current_Monitor.c: 147: Send_to_UART();
   670  00123C  ECBE  F00A         	call	_Send_to_UART	;wreg free
   671                           
   672                           ;Current_Monitor.c: 148: Initialize_Analog();
   673  001240  EC0D  F00B         	call	_Initialize_Analog	;wreg free
   674                           
   675                           ;Current_Monitor.c: 149: Analog_Capture_ON ();
   676  001244  ECF1  F009         	call	_Analog_Capture_ON	;wreg free
   677                           
   678                           ;Current_Monitor.c: 151: for (int x=0,y=0;x<=50,y<=50;x++,y++)
   679  001248  0E00               	movlw	0
   680  00124A  6E22               	movwf	main@x+1,c
   681  00124C  0E00               	movlw	0
   682  00124E  6E21               	movwf	main@x,c
   683  001250  0E00               	movlw	0
   684  001252  6E24               	movwf	main@y+1,c
   685  001254  0E00               	movlw	0
   686  001256  6E23               	movwf	main@y,c
   687  001258  D014               	goto	l1366
   688  00125A                     l1360:
   689                           
   690                           ;Current_Monitor.c: 152: {
   691                           ;Current_Monitor.c: 153: EEPROM_Write(x,Sample[y]);
   692  00125A  90D8               	bcf	status,0,c
   693  00125C  3423               	rlcf	main@y,w,c
   694  00125E  6ED9               	movwf	fsr2l,c
   695  001260  3424               	rlcf	main@y+1,w,c
   696  001262  6EDA               	movwf	fsr2h,c
   697  001264  0E60               	movlw	low _Sample
   698  001266  26D9               	addwf	fsr2l,f,c
   699  001268  0E00               	movlw	high _Sample
   700  00126A  22DA               	addwfc	fsr2h,f,c
   701  00126C  CFDE F001          	movff	postinc2,EEPROM_Write@value
   702  001270  CFDD F002          	movff	postdec2,EEPROM_Write@value+1
   703  001274  5021               	movf	main@x,w,c
   704  001276  ECFA  F00A         	call	_EEPROM_Write
   705  00127A  4A21               	infsnz	main@x,f,c
   706  00127C  2A22               	incf	main@x+1,f,c
   707  00127E  4A23               	infsnz	main@y,f,c
   708  001280  2A24               	incf	main@y+1,f,c
   709  001282                     l1366:
   710  001282  BE24               	btfsc	main@y+1,7,c
   711  001284  D7EA               	goto	l1360
   712  001286  5024               	movf	main@y+1,w,c
   713  001288  E104               	bnz	l1368
   714  00128A  0E33               	movlw	51
   715  00128C  5C23               	subwf	main@y,w,c
   716  00128E  A0D8               	btfss	status,0,c
   717  001290  D7E4               	goto	l1360
   718  001292                     l1368:
   719                           
   720                           ;Current_Monitor.c: 158: {
   721                           ;Current_Monitor.c: 159: sprintf(b,"Acquisition completed press S to read or R to reset:
      +                           \n");
   722  001292  0E35               	movlw	low _b
   723  001294  6E0D               	movwf	sprintf@sp,c
   724  001296  0E00               	movlw	high _b
   725  001298  6E0E               	movwf	sprintf@sp+1,c
   726  00129A  0E0B               	movlw	low STR_2
   727  00129C  6E0F               	movwf	sprintf@f,c
   728  00129E  0E10               	movlw	high STR_2
   729  0012A0  6E10               	movwf	sprintf@f+1,c
   730  0012A2  EC60  F008         	call	_sprintf	;wreg free
   731                           
   732                           ;Current_Monitor.c: 160: Send_to_UART();
   733  0012A6  ECBE  F00A         	call	_Send_to_UART	;wreg free
   734                           
   735                           ;Current_Monitor.c: 161: Read_UART_Input();
   736  0012AA  EC26  F00B         	call	_Read_UART_Input	;wreg free
   737                           
   738                           ;Current_Monitor.c: 162: if(Keyboard=='R')
   739  0012AE  0E52               	movlw	82
   740  0012B0  182D               	xorwf	_Keyboard,w,c
   741  0012B2  B4D8               	btfsc	status,2,c
   742                           
   743                           ;Current_Monitor.c: 163: {
   744                           ;Current_Monitor.c: 164: RCONbits.RI=1;
   745  0012B4  88D0               	bsf	4048,4,c	;volatile
   746                           
   747                           ;Current_Monitor.c: 165: }
   748                           ;Current_Monitor.c: 167: if(Keyboard=='S')
   749  0012B6  0E53               	movlw	83
   750  0012B8  182D               	xorwf	_Keyboard,w,c
   751  0012BA  A4D8               	btfss	status,2,c
   752  0012BC  D7EA               	goto	l1368
   753                           
   754                           ;Current_Monitor.c: 168: {
   755                           ;Current_Monitor.c: 169: sprintf(b,"Please wait...... \n");
   756  0012BE  0E35               	movlw	low _b
   757  0012C0  6E0D               	movwf	sprintf@sp,c
   758  0012C2  0E00               	movlw	high _b
   759  0012C4  6E0E               	movwf	sprintf@sp+1,c
   760  0012C6  0EAA               	movlw	low STR_3
   761  0012C8  6E0F               	movwf	sprintf@f,c
   762  0012CA  0E10               	movlw	high STR_3
   763  0012CC  6E10               	movwf	sprintf@f+1,c
   764  0012CE  EC60  F008         	call	_sprintf	;wreg free
   765                           
   766                           ;Current_Monitor.c: 170: Send_to_UART();
   767  0012D2  ECBE  F00A         	call	_Send_to_UART	;wreg free
   768                           
   769                           ;Current_Monitor.c: 171: Analog_Capture_OFF();
   770  0012D6  EC2C  F00B         	call	_Analog_Capture_OFF	;wreg free
   771                           
   772                           ;Current_Monitor.c: 174: for(int x=0;x<=50;x++){
   773  0012DA  0E00               	movlw	0
   774  0012DC  6E26               	movwf	main@x_645+1,c
   775  0012DE  0E00               	movlw	0
   776  0012E0  6E25               	movwf	main@x_645,c
   777  0012E2                     l1388:
   778  0012E2  BE26               	btfsc	main@x_645+1,7,c
   779  0012E4  D006               	goto	l1392
   780  0012E6  5026               	movf	main@x_645+1,w,c
   781  0012E8  E123               	bnz	l1406
   782  0012EA  0E33               	movlw	51
   783  0012EC  5C25               	subwf	main@x_645,w,c
   784  0012EE  B0D8               	btfsc	status,0,c
   785  0012F0  D01F               	goto	l1406
   786  0012F2                     l1392:
   787                           
   788                           ;Current_Monitor.c: 176: EEPROM_Read(x);
   789  0012F2  5025               	movf	main@x_645,w,c
   790  0012F4  ECDD  F00A         	call	_EEPROM_Read
   791                           
   792                           ;Current_Monitor.c: 178: int i =0;
   793  0012F8  0E00               	movlw	0
   794  0012FA  6E1E               	movwf	main@i+1,c
   795  0012FC  0E00               	movlw	0
   796  0012FE  6E1D               	movwf	main@i,c
   797                           
   798                           ;Current_Monitor.c: 179: i++;
   799  001300  4A1D               	infsnz	main@i,f,c
   800  001302  2A1E               	incf	main@i+1,f,c
   801                           
   802                           ;Current_Monitor.c: 180: sprintf(b,"Sampling number %d: %d mA :\n",x,result_EEPROM);
   803  001304  0E35               	movlw	low _b
   804  001306  6E0D               	movwf	sprintf@sp,c
   805  001308  0E00               	movlw	high _b
   806  00130A  6E0E               	movwf	sprintf@sp+1,c
   807  00130C  0E8D               	movlw	low STR_4
   808  00130E  6E0F               	movwf	sprintf@f,c
   809  001310  0E10               	movlw	high STR_4
   810  001312  6E10               	movwf	sprintf@f+1,c
   811  001314  C025  F011         	movff	main@x_645,?_sprintf+4
   812  001318  C026  F012         	movff	main@x_645+1,?_sprintf+5
   813  00131C  C02E  F013         	movff	_result_EEPROM,?_sprintf+6
   814  001320  6A14               	clrf	?_sprintf+7,c
   815  001322  EC60  F008         	call	_sprintf	;wreg free
   816                           
   817                           ;Current_Monitor.c: 182: Send_to_UART();
   818  001326  ECBE  F00A         	call	_Send_to_UART	;wreg free
   819  00132A  4A25               	infsnz	main@x_645,f,c
   820  00132C  2A26               	incf	main@x_645+1,f,c
   821  00132E  D7D9               	goto	l1388
   822  001330                     l1406:
   823                           
   824                           ;Current_Monitor.c: 183: }
   825                           ;Current_Monitor.c: 187: int i =0;
   826  001330  0E00               	movlw	0
   827  001332  6E20               	movwf	main@i_648+1,c
   828  001334  0E00               	movlw	0
   829  001336  6E1F               	movwf	main@i_648,c
   830                           
   831                           ;Current_Monitor.c: 188: i++;
   832  001338  4A1F               	infsnz	main@i_648,f,c
   833  00133A  2A20               	incf	main@i_648+1,f,c
   834                           
   835                           ;Current_Monitor.c: 189: sprintf(b,"Average of last 50 Samples: %d mA \n",Average);
   836  00133C  0E35               	movlw	low _b
   837  00133E  6E0D               	movwf	sprintf@sp,c
   838  001340  0E00               	movlw	high _b
   839  001342  6E0E               	movwf	sprintf@sp+1,c
   840  001344  0E69               	movlw	low STR_5
   841  001346  6E0F               	movwf	sprintf@f,c
   842  001348  0E10               	movlw	high STR_5
   843  00134A  6E10               	movwf	sprintf@f+1,c
   844  00134C  C027  F011         	movff	_Average,?_sprintf+4
   845  001350  C028  F012         	movff	_Average+1,?_sprintf+5
   846  001354  EC60  F008         	call	_sprintf	;wreg free
   847                           
   848                           ;Current_Monitor.c: 191: Send_to_UART();
   849  001358  ECBE  F00A         	call	_Send_to_UART	;wreg free
   850  00135C  D79A               	goto	l1368
   851  00135E                     __end_of_main:
   852                           	opt stack 0
   853                           tblptru	equ	0xFF8
   854                           tblptrh	equ	0xFF7
   855                           tblptrl	equ	0xFF6
   856                           tablat	equ	0xFF5
   857                           postinc0	equ	0xFEE
   858                           wreg	equ	0xFE8
   859                           postinc2	equ	0xFDE
   860                           postdec2	equ	0xFDD
   861                           fsr2h	equ	0xFDA
   862                           fsr2l	equ	0xFD9
   863                           status	equ	0xFD8
   864                           
   865 ;; *************** function _sprintf *****************
   866 ;; Defined at:
   867 ;;		line 492 in file "/Applications/microchip/xc8/v1.41/sources/common/doprnt.c"
   868 ;; Parameters:    Size  Location     Type
   869 ;;  sp              2   12[COMRAM] PTR unsigned char 
   870 ;;		 -> b(3), 
   871 ;;  f               2   14[COMRAM] PTR const unsigned char 
   872 ;;		 -> STR_5(36), STR_4(29), STR_3(20), STR_2(55), 
   873 ;;		 -> STR_1(39), 
   874 ;; Auto vars:     Size  Location     Type
   875 ;;  tmpval          4    0        struct .
   876 ;;  cp              3    0        PTR const unsigned char 
   877 ;;  val             2   25[COMRAM] unsigned int 
   878 ;;  ap              2   21[COMRAM] PTR void [1]
   879 ;;		 -> ?_sprintf(2), 
   880 ;;  len             2    0        unsigned int 
   881 ;;  c               1   27[COMRAM] char 
   882 ;;  prec            1   24[COMRAM] char 
   883 ;;  flag            1   23[COMRAM] unsigned char 
   884 ;; Return value:  Size  Location     Type
   885 ;;                  2   12[COMRAM] int 
   886 ;; Registers used:
   887 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   893 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   894 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   895 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   896 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   897 ;;Total ram usage:       16 bytes
   898 ;; Hardware stack levels used:    1
   899 ;; Hardware stack levels required when called:    1
   900 ;; This function calls:
   901 ;;		___lwdiv
   902 ;;		___lwmod
   903 ;; This function is called by:
   904 ;;		_main
   905 ;; This function uses a non-reentrant model
   906 ;;
   907                           
   908                           	psect	text1
   909  0010C0                     __ptext1:
   910                           	opt stack 0
   911  0010C0                     _sprintf:
   912                           	opt stack 29
   913                           
   914                           ;doprnt.c: 494: va_list ap;
   915                           ;doprnt.c: 499: signed char c;
   916                           ;doprnt.c: 506: signed char prec;
   917                           ;doprnt.c: 508: unsigned char flag;
   918                           ;doprnt.c: 523: union {
   919                           ;doprnt.c: 524: unsigned long vd;
   920                           ;doprnt.c: 525: double integ;
   921                           ;doprnt.c: 526: } tmpval;
   922                           ;doprnt.c: 528: unsigned int val;
   923                           ;doprnt.c: 529: unsigned len;
   924                           ;doprnt.c: 530: const char * cp;
   925                           ;doprnt.c: 533: *ap = __va_start();
   926                           
   927                           ;incstack = 0
   928  0010C0  0E11               	movlw	low (?_sprintf+4)
   929  0010C2  6E16               	movwf	sprintf@ap,c
   930  0010C4  0E00               	movlw	high (?_sprintf+4)
   931  0010C6  6E17               	movwf	sprintf@ap+1,c
   932                           
   933                           ;doprnt.c: 536: while(c = *f++) {
   934  0010C8  D094               	goto	l1298
   935  0010CA                     l1246:
   936                           
   937                           ;doprnt.c: 538: if(c != '%')
   938  0010CA  0E25               	movlw	37
   939  0010CC  181C               	xorwf	sprintf@c,w,c
   940  0010CE  B4D8               	btfsc	status,2,c
   941  0010D0  D009               	goto	l1252
   942                           
   943                           ;doprnt.c: 540: {
   944                           ;doprnt.c: 541: ((*sp++ = (c)));
   945  0010D2  C00D  FFD9         	movff	sprintf@sp,fsr2l
   946  0010D6  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
   947  0010DA  C01C  FFDF         	movff	sprintf@c,indf2
   948  0010DE  4A0D               	infsnz	sprintf@sp,f,c
   949  0010E0  2A0E               	incf	sprintf@sp+1,f,c
   950                           
   951                           ;doprnt.c: 542: continue;
   952  0010E2  D087               	goto	l1298
   953  0010E4                     l1252:
   954                           
   955                           ;doprnt.c: 543: }
   956                           ;doprnt.c: 548: flag = 0;
   957  0010E4  0E00               	movlw	0
   958  0010E6  6E18               	movwf	sprintf@flag,c
   959                           
   960                           ;doprnt.c: 822: }
   961                           
   962                           ;doprnt.c: 813: continue;
   963                           
   964                           ;doprnt.c: 802: default:
   965                           
   966                           ;doprnt.c: 698: case 'i':
   967                           ;doprnt.c: 699: break;
   968                           
   969                           ;doprnt.c: 697: case 'd':
   970                           
   971                           ;doprnt.c: 638: goto alldone;
   972                           
   973                           ;doprnt.c: 637: case 0:
   974                           
   975                           ;doprnt.c: 635: switch(c = *f++) {
   976  0010E8  C00F  FFF6         	movff	sprintf@f,tblptrl
   977  0010EC  C010  FFF7         	movff	sprintf@f+1,tblptrh
   978  0010F0  4A0F               	infsnz	sprintf@f,f,c
   979  0010F2  2A10               	incf	sprintf@f+1,f,c
   980  0010F4                     	if	0	;tblptru may be non-zero
   981  0010F4                     	endif
   982  0010F4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
   983  0010F4  0E00               	movlw	low (__mediumconst shr (0+16))
   984  0010F6  6EF8               	movwf	tblptru,c
   985  0010F8                     	endif
   986  0010F8  0008               	tblrd		*
   987  0010FA  CFF5 F01C          	movff	tablat,sprintf@c
   988  0010FE  501C               	movf	sprintf@c,w,c
   989                           
   990                           ; Switch size 1, requested type "space"
   991                           ; Number of cases is 3, Range of values is 0 to 105
   992                           ; switch strategies available:
   993                           ; Name         Instructions Cycles
   994                           ; simple_byte           10     6 (average)
   995                           ;	Chosen strategy is simple_byte
   996  001100  0A00               	xorlw	0	; case 0
   997  001102  B4D8               	btfsc	status,2,c
   998  001104  D084               	goto	l1300
   999  001106  0A64               	xorlw	100	; case 100
  1000  001108  B4D8               	btfsc	status,2,c
  1001  00110A  D003               	goto	l1258
  1002  00110C  0A0D               	xorlw	13	; case 105
  1003  00110E  A4D8               	btfss	status,2,c
  1004  001110  D070               	goto	l1298
  1005  001112                     l1258:
  1006                           
  1007                           ;doprnt.c: 1253: {
  1008                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1009  001112  C016  FFD9         	movff	sprintf@ap,fsr2l
  1010  001116  C017  FFDA         	movff	sprintf@ap+1,fsr2h
  1011  00111A  CFDE F01A          	movff	postinc2,sprintf@val
  1012  00111E  CFDD F01B          	movff	postdec2,sprintf@val+1
  1013  001122  0E02               	movlw	2
  1014  001124  2616               	addwf	sprintf@ap,f,c
  1015  001126  0E00               	movlw	0
  1016  001128  2217               	addwfc	sprintf@ap+1,f,c
  1017                           
  1018                           ;doprnt.c: 1261: if((int)val < 0) {
  1019  00112A  AE1B               	btfss	sprintf@val+1,7,c
  1020  00112C  D006               	goto	l1268
  1021                           
  1022                           ;doprnt.c: 1262: flag |= 0x03;
  1023  00112E  0E03               	movlw	3
  1024  001130  1218               	iorwf	sprintf@flag,f,c
  1025                           
  1026                           ;doprnt.c: 1263: val = -val;
  1027  001132  6C1A               	negf	sprintf@val,c
  1028  001134  1E1B               	comf	sprintf@val+1,f,c
  1029  001136  B0D8               	btfsc	status,0,c
  1030  001138  2A1B               	incf	sprintf@val+1,f,c
  1031  00113A                     l1268:
  1032                           
  1033                           ;doprnt.c: 1264: }
  1034                           ;doprnt.c: 1266: }
  1035                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1036  00113A  0E01               	movlw	1
  1037  00113C  6E1C               	movwf	sprintf@c,c
  1038  00113E                     l1270:
  1039  00113E  0E05               	movlw	5
  1040  001140  181C               	xorwf	sprintf@c,w,c
  1041  001142  B4D8               	btfsc	status,2,c
  1042  001144  D015               	goto	l1282
  1043                           
  1044                           ;doprnt.c: 1306: if(val < dpowers[c])
  1045  001146  501C               	movf	sprintf@c,w,c
  1046  001148  0D02               	mullw	2
  1047  00114A  0E01               	movlw	low _dpowers
  1048  00114C  24F3               	addwf	prodl,w,c
  1049  00114E  6EF6               	movwf	tblptrl,c
  1050  001150  0E10               	movlw	high _dpowers
  1051  001152  20F4               	addwfc	prodh,w,c
  1052  001154  6EF7               	movwf	tblptrh,c
  1053  001156                     	if	1	;There are 3 active tblptr bytes
  1054  001156  6AF8               	clrf	tblptru,c
  1055  001158  0E00               	movlw	low (__mediumconst shr (0+16))
  1056  00115A  22F8               	addwfc	tblptru,f,c
  1057  00115C                     	endif
  1058  00115C  0009               	tblrd		*+
  1059  00115E  50F5               	movf	tablat,w,c
  1060  001160  5C1A               	subwf	sprintf@val,w,c
  1061  001162  0009               	tblrd		*+
  1062  001164  50F5               	movf	tablat,w,c
  1063  001166  581B               	subwfb	sprintf@val+1,w,c
  1064  001168  A0D8               	btfss	status,0,c
  1065  00116A  D002               	goto	l1282
  1066                           
  1067                           ;doprnt.c: 1307: break;
  1068  00116C  2A1C               	incf	sprintf@c,f,c
  1069  00116E  D7E7               	goto	l1270
  1070  001170                     l1282:
  1071                           
  1072                           ;doprnt.c: 1422: {
  1073                           ;doprnt.c: 1438: if(flag & 0x03)
  1074  001170  C018  F015         	movff	sprintf@flag,??_sprintf
  1075  001174  0E03               	movlw	3
  1076  001176  1615               	andwf	??_sprintf,f,c
  1077  001178  B4D8               	btfsc	status,2,c
  1078  00117A  D008               	goto	l1288
  1079                           
  1080                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1081  00117C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1082  001180  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1083  001184  0E2D               	movlw	45
  1084  001186  6EDF               	movwf	indf2,c
  1085  001188  4A0D               	infsnz	sprintf@sp,f,c
  1086  00118A  2A0E               	incf	sprintf@sp+1,f,c
  1087  00118C                     l1288:
  1088                           
  1089                           ;doprnt.c: 1469: }
  1090                           ;doprnt.c: 1472: prec = c;
  1091  00118C  C01C  F019         	movff	sprintf@c,sprintf@prec
  1092                           
  1093                           ;doprnt.c: 1474: while(prec--) {
  1094  001190  D02C               	goto	l1296
  1095  001192                     l1290:
  1096                           
  1097                           ;doprnt.c: 1478: {
  1098                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1099  001192  5019               	movf	sprintf@prec,w,c
  1100  001194  0D02               	mullw	2
  1101  001196  0E01               	movlw	low _dpowers
  1102  001198  24F3               	addwf	prodl,w,c
  1103  00119A  6EF6               	movwf	tblptrl,c
  1104  00119C  0E10               	movlw	high _dpowers
  1105  00119E  20F4               	addwfc	prodh,w,c
  1106  0011A0  6EF7               	movwf	tblptrh,c
  1107  0011A2                     	if	1	;There are 3 active tblptr bytes
  1108  0011A2  6AF8               	clrf	tblptru,c
  1109  0011A4  0E00               	movlw	low (__mediumconst shr (0+16))
  1110  0011A6  22F8               	addwfc	tblptru,f,c
  1111  0011A8                     	endif
  1112  0011A8  0009               	tblrd		*+
  1113  0011AA  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1114  0011AE  000A               	tblrd		*-
  1115  0011B0  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1116  0011B4  C01A  F001         	movff	sprintf@val,___lwdiv@dividend
  1117  0011B8  C01B  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1118  0011BC  EC53  F00A         	call	___lwdiv	;wreg free
  1119  0011C0  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1120  0011C4  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1121  0011C8  0E00               	movlw	0
  1122  0011CA  6E0B               	movwf	___lwmod@divisor+1,c
  1123  0011CC  0E0A               	movlw	10
  1124  0011CE  6E0A               	movwf	___lwmod@divisor,c
  1125  0011D0  EC9D  F00A         	call	___lwmod	;wreg free
  1126  0011D4  5008               	movf	?___lwmod,w,c
  1127  0011D6  0F30               	addlw	48
  1128  0011D8  6E1C               	movwf	sprintf@c,c
  1129                           
  1130                           ;doprnt.c: 1523: }
  1131                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1132  0011DA  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1133  0011DE  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1134  0011E2  C01C  FFDF         	movff	sprintf@c,indf2
  1135  0011E6  4A0D               	infsnz	sprintf@sp,f,c
  1136  0011E8  2A0E               	incf	sprintf@sp+1,f,c
  1137  0011EA                     l1296:
  1138  0011EA  0619               	decf	sprintf@prec,f,c
  1139  0011EC  2819               	incf	sprintf@prec,w,c
  1140  0011EE  A4D8               	btfss	status,2,c
  1141  0011F0  D7D0               	goto	l1290
  1142  0011F2                     l1298:
  1143  0011F2  C00F  FFF6         	movff	sprintf@f,tblptrl
  1144  0011F6  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1145  0011FA  4A0F               	infsnz	sprintf@f,f,c
  1146  0011FC  2A10               	incf	sprintf@f+1,f,c
  1147  0011FE                     	if	0	;tblptru may be non-zero
  1148  0011FE                     	endif
  1149  0011FE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1150  0011FE  0E00               	movlw	low (__mediumconst shr (0+16))
  1151  001200  6EF8               	movwf	tblptru,c
  1152  001202                     	endif
  1153  001202  0008               	tblrd		*
  1154  001204  CFF5 F01C          	movff	tablat,sprintf@c
  1155  001208  501C               	movf	sprintf@c,w,c
  1156  00120A  A4D8               	btfss	status,2,c
  1157  00120C  D75E               	goto	l1246
  1158  00120E                     l1300:
  1159                           
  1160                           ;doprnt.c: 1538: *sp = 0;
  1161  00120E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1162  001212  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1163  001216  0E00               	movlw	0
  1164  001218  6EDF               	movwf	indf2,c
  1165  00121A  0012               	return	
  1166  00121C                     __end_of_sprintf:
  1167                           	opt stack 0
  1168                           tblptru	equ	0xFF8
  1169                           tblptrh	equ	0xFF7
  1170                           tblptrl	equ	0xFF6
  1171                           tablat	equ	0xFF5
  1172                           prodh	equ	0xFF4
  1173                           prodl	equ	0xFF3
  1174                           postinc0	equ	0xFEE
  1175                           wreg	equ	0xFE8
  1176                           indf2	equ	0xFDF
  1177                           postinc2	equ	0xFDE
  1178                           postdec2	equ	0xFDD
  1179                           fsr2h	equ	0xFDA
  1180                           fsr2l	equ	0xFD9
  1181                           status	equ	0xFD8
  1182                           
  1183 ;; *************** function ___lwmod *****************
  1184 ;; Defined at:
  1185 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwmod.c"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;  dividend        2    7[COMRAM] unsigned int 
  1188 ;;  divisor         2    9[COMRAM] unsigned int 
  1189 ;; Auto vars:     Size  Location     Type
  1190 ;;  counter         1   11[COMRAM] unsigned char 
  1191 ;; Return value:  Size  Location     Type
  1192 ;;                  2    7[COMRAM] unsigned int 
  1193 ;; Registers used:
  1194 ;;		wreg, status,2, status,0
  1195 ;; Tracked objects:
  1196 ;;		On entry : 0/0
  1197 ;;		On exit  : 0/0
  1198 ;;		Unchanged: 0/0
  1199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1200 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1201 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1203 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1204 ;;Total ram usage:        5 bytes
  1205 ;; Hardware stack levels used:    1
  1206 ;; This function calls:
  1207 ;;		Nothing
  1208 ;; This function is called by:
  1209 ;;		_sprintf
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           
  1213                           	psect	text2
  1214  00153A                     __ptext2:
  1215                           	opt stack 0
  1216  00153A                     ___lwmod:
  1217                           	opt stack 29
  1218                           
  1219                           ;incstack = 0
  1220  00153A  500A               	movf	___lwmod@divisor,w,c
  1221  00153C  100B               	iorwf	___lwmod@divisor+1,w,c
  1222  00153E  B4D8               	btfsc	status,2,c
  1223  001540  D018               	goto	l613
  1224  001542  0E01               	movlw	1
  1225  001544  6E0C               	movwf	___lwmod@counter,c
  1226  001546  D004               	goto	l1234
  1227  001548                     l1232:
  1228  001548  90D8               	bcf	status,0,c
  1229  00154A  360A               	rlcf	___lwmod@divisor,f,c
  1230  00154C  360B               	rlcf	___lwmod@divisor+1,f,c
  1231  00154E  2A0C               	incf	___lwmod@counter,f,c
  1232  001550                     l1234:
  1233  001550  AE0B               	btfss	___lwmod@divisor+1,7,c
  1234  001552  D7FA               	goto	l1232
  1235  001554                     l1236:
  1236  001554  500A               	movf	___lwmod@divisor,w,c
  1237  001556  5C08               	subwf	___lwmod@dividend,w,c
  1238  001558  500B               	movf	___lwmod@divisor+1,w,c
  1239  00155A  5809               	subwfb	___lwmod@dividend+1,w,c
  1240  00155C  A0D8               	btfss	status,0,c
  1241  00155E  D004               	goto	l1240
  1242  001560  500A               	movf	___lwmod@divisor,w,c
  1243  001562  5E08               	subwf	___lwmod@dividend,f,c
  1244  001564  500B               	movf	___lwmod@divisor+1,w,c
  1245  001566  5A09               	subwfb	___lwmod@dividend+1,f,c
  1246  001568                     l1240:
  1247  001568  90D8               	bcf	status,0,c
  1248  00156A  320B               	rrcf	___lwmod@divisor+1,f,c
  1249  00156C  320A               	rrcf	___lwmod@divisor,f,c
  1250  00156E  2E0C               	decfsz	___lwmod@counter,f,c
  1251  001570  D7F1               	goto	l1236
  1252  001572                     l613:
  1253  001572  C008  F008         	movff	___lwmod@dividend,?___lwmod
  1254  001576  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  1255  00157A  0012               	return		;funcret
  1256  00157C                     __end_of___lwmod:
  1257                           	opt stack 0
  1258                           tblptru	equ	0xFF8
  1259                           tblptrh	equ	0xFF7
  1260                           tblptrl	equ	0xFF6
  1261                           tablat	equ	0xFF5
  1262                           prodh	equ	0xFF4
  1263                           prodl	equ	0xFF3
  1264                           postinc0	equ	0xFEE
  1265                           wreg	equ	0xFE8
  1266                           indf2	equ	0xFDF
  1267                           postinc2	equ	0xFDE
  1268                           postdec2	equ	0xFDD
  1269                           fsr2h	equ	0xFDA
  1270                           fsr2l	equ	0xFD9
  1271                           status	equ	0xFD8
  1272                           
  1273 ;; *************** function ___lwdiv *****************
  1274 ;; Defined at:
  1275 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/lwdiv.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;  dividend        2    0[COMRAM] unsigned int 
  1278 ;;  divisor         2    2[COMRAM] unsigned int 
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;  quotient        2    4[COMRAM] unsigned int 
  1281 ;;  counter         1    6[COMRAM] unsigned char 
  1282 ;; Return value:  Size  Location     Type
  1283 ;;                  2    0[COMRAM] unsigned int 
  1284 ;; Registers used:
  1285 ;;		wreg, status,2, status,0
  1286 ;; Tracked objects:
  1287 ;;		On entry : 0/0
  1288 ;;		On exit  : 0/0
  1289 ;;		Unchanged: 0/0
  1290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1291 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1292 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1294 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1295 ;;Total ram usage:        7 bytes
  1296 ;; Hardware stack levels used:    1
  1297 ;; This function calls:
  1298 ;;		Nothing
  1299 ;; This function is called by:
  1300 ;;		_sprintf
  1301 ;; This function uses a non-reentrant model
  1302 ;;
  1303                           
  1304                           	psect	text3
  1305  0014A6                     __ptext3:
  1306                           	opt stack 0
  1307  0014A6                     ___lwdiv:
  1308                           	opt stack 29
  1309                           
  1310                           ;incstack = 0
  1311  0014A6  0E00               	movlw	0
  1312  0014A8  6E06               	movwf	___lwdiv@quotient+1,c
  1313  0014AA  0E00               	movlw	0
  1314  0014AC  6E05               	movwf	___lwdiv@quotient,c
  1315  0014AE  5003               	movf	___lwdiv@divisor,w,c
  1316  0014B0  1004               	iorwf	___lwdiv@divisor+1,w,c
  1317  0014B2  B4D8               	btfsc	status,2,c
  1318  0014B4  D01C               	goto	l603
  1319  0014B6  0E01               	movlw	1
  1320  0014B8  6E07               	movwf	___lwdiv@counter,c
  1321  0014BA  D004               	goto	l1214
  1322  0014BC                     l1212:
  1323  0014BC  90D8               	bcf	status,0,c
  1324  0014BE  3603               	rlcf	___lwdiv@divisor,f,c
  1325  0014C0  3604               	rlcf	___lwdiv@divisor+1,f,c
  1326  0014C2  2A07               	incf	___lwdiv@counter,f,c
  1327  0014C4                     l1214:
  1328  0014C4  AE04               	btfss	___lwdiv@divisor+1,7,c
  1329  0014C6  D7FA               	goto	l1212
  1330  0014C8                     l1216:
  1331  0014C8  90D8               	bcf	status,0,c
  1332  0014CA  3605               	rlcf	___lwdiv@quotient,f,c
  1333  0014CC  3606               	rlcf	___lwdiv@quotient+1,f,c
  1334  0014CE  5003               	movf	___lwdiv@divisor,w,c
  1335  0014D0  5C01               	subwf	___lwdiv@dividend,w,c
  1336  0014D2  5004               	movf	___lwdiv@divisor+1,w,c
  1337  0014D4  5802               	subwfb	___lwdiv@dividend+1,w,c
  1338  0014D6  A0D8               	btfss	status,0,c
  1339  0014D8  D005               	goto	l1224
  1340  0014DA  5003               	movf	___lwdiv@divisor,w,c
  1341  0014DC  5E01               	subwf	___lwdiv@dividend,f,c
  1342  0014DE  5004               	movf	___lwdiv@divisor+1,w,c
  1343  0014E0  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1344  0014E2  8005               	bsf	___lwdiv@quotient,0,c
  1345  0014E4                     l1224:
  1346  0014E4  90D8               	bcf	status,0,c
  1347  0014E6  3204               	rrcf	___lwdiv@divisor+1,f,c
  1348  0014E8  3203               	rrcf	___lwdiv@divisor,f,c
  1349  0014EA  2E07               	decfsz	___lwdiv@counter,f,c
  1350  0014EC  D7ED               	goto	l1216
  1351  0014EE                     l603:
  1352  0014EE  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1353  0014F2  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1354  0014F6  0012               	return		;funcret
  1355  0014F8                     __end_of___lwdiv:
  1356                           	opt stack 0
  1357                           tblptru	equ	0xFF8
  1358                           tblptrh	equ	0xFF7
  1359                           tblptrl	equ	0xFF6
  1360                           tablat	equ	0xFF5
  1361                           prodh	equ	0xFF4
  1362                           prodl	equ	0xFF3
  1363                           postinc0	equ	0xFEE
  1364                           wreg	equ	0xFE8
  1365                           indf2	equ	0xFDF
  1366                           postinc2	equ	0xFDE
  1367                           postdec2	equ	0xFDD
  1368                           fsr2h	equ	0xFDA
  1369                           fsr2l	equ	0xFD9
  1370                           status	equ	0xFD8
  1371                           
  1372 ;; *************** function _Send_to_UART *****************
  1373 ;; Defined at:
  1374 ;;		line 247 in file "Current_Monitor.c"
  1375 ;; Parameters:    Size  Location     Type
  1376 ;;		None
  1377 ;; Auto vars:     Size  Location     Type
  1378 ;;  i               2    0[COMRAM] int 
  1379 ;; Return value:  Size  Location     Type
  1380 ;;                  1    wreg      void 
  1381 ;; Registers used:
  1382 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1383 ;; Tracked objects:
  1384 ;;		On entry : 0/0
  1385 ;;		On exit  : 0/0
  1386 ;;		Unchanged: 0/0
  1387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1389 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1391 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1392 ;;Total ram usage:        2 bytes
  1393 ;; Hardware stack levels used:    1
  1394 ;; This function calls:
  1395 ;;		Nothing
  1396 ;; This function is called by:
  1397 ;;		_main
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           
  1401                           	psect	text4
  1402  00157C                     __ptext4:
  1403                           	opt stack 0
  1404  00157C                     _Send_to_UART:
  1405                           	opt stack 30
  1406                           
  1407                           ;Current_Monitor.c: 250: int i=0;
  1408                           
  1409                           ;incstack = 0
  1410  00157C  0E00               	movlw	0
  1411  00157E  6E02               	movwf	Send_to_UART@i+1,c
  1412  001580  0E00               	movlw	0
  1413  001582  6E01               	movwf	Send_to_UART@i,c
  1414                           
  1415                           ;Current_Monitor.c: 252: while (b[i]!='\0')
  1416  001584  D010               	goto	l986
  1417  001586                     l980:
  1418                           
  1419                           ;Current_Monitor.c: 253: {
  1420                           ;Current_Monitor.c: 255: TXREG1=(b[i++]);
  1421  001586  0E35               	movlw	low _b
  1422  001588  2401               	addwf	Send_to_UART@i,w,c
  1423  00158A  6ED9               	movwf	fsr2l,c
  1424  00158C  0E00               	movlw	high _b
  1425  00158E  2002               	addwfc	Send_to_UART@i+1,w,c
  1426  001590  6EDA               	movwf	fsr2h,c
  1427  001592  50DF               	movf	indf2,w,c
  1428  001594  6EAD               	movwf	4013,c	;volatile
  1429  001596  4A01               	infsnz	Send_to_UART@i,f,c
  1430  001598  2A02               	incf	Send_to_UART@i+1,f,c
  1431                           
  1432                           ;Current_Monitor.c: 256: _delay((unsigned long)((50)*(10000000/4000000.0)));
  1433  00159A  0E29               	movlw	41
  1434  00159C                     u687:
  1435  00159C  2EE8               	decfsz	wreg,f,c
  1436  00159E  D7FE               	bra	u687
  1437  0015A0  D000               	nop2	
  1438  0015A2                     l129:
  1439  0015A2  A89E               	btfss	3998,4,c	;volatile
  1440  0015A4  D7FE               	goto	l129
  1441  0015A6                     l986:
  1442  0015A6  0E35               	movlw	low _b
  1443  0015A8  2401               	addwf	Send_to_UART@i,w,c
  1444  0015AA  6ED9               	movwf	fsr2l,c
  1445  0015AC  0E00               	movlw	high _b
  1446  0015AE  2002               	addwfc	Send_to_UART@i+1,w,c
  1447  0015B0  6EDA               	movwf	fsr2h,c
  1448  0015B2  50DF               	movf	indf2,w,c
  1449  0015B4  B4D8               	btfsc	status,2,c
  1450  0015B6  0012               	return	
  1451  0015B8  D7E6               	goto	l980
  1452  0015BA                     __end_of_Send_to_UART:
  1453                           	opt stack 0
  1454                           tblptru	equ	0xFF8
  1455                           tblptrh	equ	0xFF7
  1456                           tblptrl	equ	0xFF6
  1457                           tablat	equ	0xFF5
  1458                           prodh	equ	0xFF4
  1459                           prodl	equ	0xFF3
  1460                           postinc0	equ	0xFEE
  1461                           wreg	equ	0xFE8
  1462                           indf2	equ	0xFDF
  1463                           postinc2	equ	0xFDE
  1464                           postdec2	equ	0xFDD
  1465                           fsr2h	equ	0xFDA
  1466                           fsr2l	equ	0xFD9
  1467                           status	equ	0xFD8
  1468                           
  1469 ;; *************** function _Read_UART_Input *****************
  1470 ;; Defined at:
  1471 ;;		line 230 in file "Current_Monitor.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;		None
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;		None
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  1    wreg      void 
  1478 ;; Registers used:
  1479 ;;		None
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1489 ;;Total ram usage:        0 bytes
  1490 ;; Hardware stack levels used:    1
  1491 ;; This function calls:
  1492 ;;		Nothing
  1493 ;; This function is called by:
  1494 ;;		_main
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498                           	psect	text5
  1499  00164C                     __ptext5:
  1500                           	opt stack 0
  1501  00164C                     _Read_UART_Input:
  1502                           	opt stack 30
  1503                           
  1504                           ;Current_Monitor.c: 233: RCSTA1bits.CREN=1;
  1505                           
  1506                           ;incstack = 0
  1507  00164C  88AB               	bsf	4011,4,c	;volatile
  1508  00164E                     l121:
  1509  00164E  AA9E               	btfss	3998,5,c	;volatile
  1510  001650  D7FE               	goto	l121
  1511                           
  1512                           ;Current_Monitor.c: 235: Keyboard=RCREG1;
  1513  001652  CFAE F02D          	movff	4014,_Keyboard	;volatile
  1514  001656  0012               	return		;funcret
  1515  001658                     __end_of_Read_UART_Input:
  1516                           	opt stack 0
  1517                           tblptru	equ	0xFF8
  1518                           tblptrh	equ	0xFF7
  1519                           tblptrl	equ	0xFF6
  1520                           tablat	equ	0xFF5
  1521                           prodh	equ	0xFF4
  1522                           prodl	equ	0xFF3
  1523                           postinc0	equ	0xFEE
  1524                           wreg	equ	0xFE8
  1525                           indf2	equ	0xFDF
  1526                           postinc2	equ	0xFDE
  1527                           postdec2	equ	0xFDD
  1528                           fsr2h	equ	0xFDA
  1529                           fsr2l	equ	0xFD9
  1530                           status	equ	0xFD8
  1531                           
  1532 ;; *************** function _Initialize_UART *****************
  1533 ;; Defined at:
  1534 ;;		line 211 in file "Current_Monitor.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;		None
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;		None
  1539 ;; Return value:  Size  Location     Type
  1540 ;;                  1    wreg      void 
  1541 ;; Registers used:
  1542 ;;		wreg, status,2
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1552 ;;Total ram usage:        0 bytes
  1553 ;; Hardware stack levels used:    1
  1554 ;; This function calls:
  1555 ;;		Nothing
  1556 ;; This function is called by:
  1557 ;;		_main
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	text6
  1562  001638                     __ptext6:
  1563                           	opt stack 0
  1564  001638                     _Initialize_UART:
  1565                           	opt stack 30
  1566                           
  1567                           ;Current_Monitor.c: 214: TRISCbits.RC7=1;
  1568                           
  1569                           ;incstack = 0
  1570  001638  8E94               	bsf	3988,7,c	;volatile
  1571                           
  1572                           ;Current_Monitor.c: 215: TRISCbits.RC6=0;
  1573  00163A  9C94               	bcf	3988,6,c	;volatile
  1574                           
  1575                           ;Current_Monitor.c: 220: TXSTA1bits.SYNC=0;
  1576  00163C  98AC               	bcf	4012,4,c	;volatile
  1577                           
  1578                           ;Current_Monitor.c: 221: TXSTA1bits.BRGH=0;
  1579  00163E  94AC               	bcf	4012,2,c	;volatile
  1580                           
  1581                           ;Current_Monitor.c: 222: BAUDCON1bits.BRG16=0;
  1582  001640  967E               	bcf	3966,3,c	;volatile
  1583                           
  1584                           ;Current_Monitor.c: 223: SPBRG1=15;
  1585  001642  0E0F               	movlw	15
  1586  001644  6EAF               	movwf	4015,c	;volatile
  1587                           
  1588                           ;Current_Monitor.c: 224: RCSTA1bits.SPEN=1;
  1589  001646  8EAB               	bsf	4011,7,c	;volatile
  1590                           
  1591                           ;Current_Monitor.c: 225: TXSTA1bits.TXEN=1;
  1592  001648  8AAC               	bsf	4012,5,c	;volatile
  1593  00164A  0012               	return		;funcret
  1594  00164C                     __end_of_Initialize_UART:
  1595                           	opt stack 0
  1596                           tblptru	equ	0xFF8
  1597                           tblptrh	equ	0xFF7
  1598                           tblptrl	equ	0xFF6
  1599                           tablat	equ	0xFF5
  1600                           prodh	equ	0xFF4
  1601                           prodl	equ	0xFF3
  1602                           postinc0	equ	0xFEE
  1603                           wreg	equ	0xFE8
  1604                           indf2	equ	0xFDF
  1605                           postinc2	equ	0xFDE
  1606                           postdec2	equ	0xFDD
  1607                           fsr2h	equ	0xFDA
  1608                           fsr2l	equ	0xFD9
  1609                           status	equ	0xFD8
  1610                           
  1611 ;; *************** function _Initialize_Analog *****************
  1612 ;; Defined at:
  1613 ;;		line 264 in file "Current_Monitor.c"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;		None
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;		None
  1618 ;; Return value:  Size  Location     Type
  1619 ;;                  1    wreg      void 
  1620 ;; Registers used:
  1621 ;;		wreg, status,2
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1631 ;;Total ram usage:        0 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; This function calls:
  1634 ;;		Nothing
  1635 ;; This function is called by:
  1636 ;;		_main
  1637 ;; This function uses a non-reentrant model
  1638 ;;
  1639                           
  1640                           	psect	text7
  1641  00161A                     __ptext7:
  1642                           	opt stack 0
  1643  00161A                     _Initialize_Analog:
  1644                           	opt stack 30
  1645                           
  1646                           ;Current_Monitor.c: 268: TRISA=0xff;
  1647                           
  1648                           ;incstack = 0
  1649  00161A  6892               	setf	3986,c	;volatile
  1650                           
  1651                           ;Current_Monitor.c: 269: TRISD=0x00;
  1652  00161C  0E00               	movlw	0
  1653  00161E  6E95               	movwf	3989,c	;volatile
  1654                           
  1655                           ;Current_Monitor.c: 270: PORTD=0x00;
  1656  001620  0E00               	movlw	0
  1657  001622  6E83               	movwf	3971,c	;volatile
  1658                           
  1659                           ;Current_Monitor.c: 271: PORTA=0x00;
  1660  001624  0E00               	movlw	0
  1661  001626  6E80               	movwf	3968,c	;volatile
  1662                           
  1663                           ;Current_Monitor.c: 273: MEMCONbits.EBDIS=1;
  1664  001628  8E9C               	bsf	3996,7,c	;volatile
  1665                           
  1666                           ;Current_Monitor.c: 274: ADCON0=0b00000001;
  1667  00162A  0E01               	movlw	1
  1668  00162C  6EC2               	movwf	4034,c	;volatile
  1669                           
  1670                           ;Current_Monitor.c: 275: ADCON1=0b00000000;
  1671  00162E  0E00               	movlw	0
  1672  001630  6EC1               	movwf	4033,c	;volatile
  1673                           
  1674                           ;Current_Monitor.c: 276: ADCON2=0b00000000;
  1675  001632  0E00               	movlw	0
  1676  001634  6EC0               	movwf	4032,c	;volatile
  1677  001636  0012               	return		;funcret
  1678  001638                     __end_of_Initialize_Analog:
  1679                           	opt stack 0
  1680                           tblptru	equ	0xFF8
  1681                           tblptrh	equ	0xFF7
  1682                           tblptrl	equ	0xFF6
  1683                           tablat	equ	0xFF5
  1684                           prodh	equ	0xFF4
  1685                           prodl	equ	0xFF3
  1686                           postinc0	equ	0xFEE
  1687                           wreg	equ	0xFE8
  1688                           indf2	equ	0xFDF
  1689                           postinc2	equ	0xFDE
  1690                           postdec2	equ	0xFDD
  1691                           fsr2h	equ	0xFDA
  1692                           fsr2l	equ	0xFD9
  1693                           status	equ	0xFD8
  1694                           
  1695 ;; *************** function _EEPROM_Write *****************
  1696 ;; Defined at:
  1697 ;;		line 313 in file "Current_Monitor.c"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;  address         1    wreg     unsigned char 
  1700 ;;  value           2    0[COMRAM] PTR unsigned char 
  1701 ;;		 -> RAM(3935), 
  1702 ;; Auto vars:     Size  Location     Type
  1703 ;;  address         1    2[COMRAM] unsigned char 
  1704 ;; Return value:  Size  Location     Type
  1705 ;;                  1    wreg      void 
  1706 ;; Registers used:
  1707 ;;		wreg, status,2
  1708 ;; Tracked objects:
  1709 ;;		On entry : 0/0
  1710 ;;		On exit  : 0/0
  1711 ;;		Unchanged: 0/0
  1712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1713 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1714 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1716 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1717 ;;Total ram usage:        3 bytes
  1718 ;; Hardware stack levels used:    1
  1719 ;; This function calls:
  1720 ;;		Nothing
  1721 ;; This function is called by:
  1722 ;;		_main
  1723 ;; This function uses a non-reentrant model
  1724 ;;
  1725                           
  1726                           	psect	text8
  1727  0015F4                     __ptext8:
  1728                           	opt stack 0
  1729  0015F4                     _EEPROM_Write:
  1730                           	opt stack 30
  1731                           
  1732                           ;incstack = 0
  1733                           ;EEPROM_Write@address stored from wreg
  1734  0015F4  6E03               	movwf	EEPROM_Write@address,c
  1735                           
  1736                           ;Current_Monitor.c: 319: EECON1bits.WREN=1;
  1737  0015F6  84A6               	bsf	4006,2,c	;volatile
  1738                           
  1739                           ;Current_Monitor.c: 320: EEADR=address ;
  1740  0015F8  C003  FFA9         	movff	EEPROM_Write@address,4009	;volatile
  1741                           
  1742                           ;Current_Monitor.c: 321: EEDATA=value;
  1743  0015FC  C001  FFA8         	movff	EEPROM_Write@value,4008	;volatile
  1744                           
  1745                           ;Current_Monitor.c: 322: EECON1bits.EEPGD=0;
  1746  001600  9EA6               	bcf	4006,7,c	;volatile
  1747                           
  1748                           ;Current_Monitor.c: 323: EECON1bits.CFGS=0;
  1749  001602  9CA6               	bcf	4006,6,c	;volatile
  1750                           
  1751                           ;Current_Monitor.c: 324: INTCONbits.GIE=0;
  1752  001604  9EF2               	bcf	intcon,7,c	;volatile
  1753                           
  1754                           ;Current_Monitor.c: 327: EECON2=0x55;
  1755  001606  0E55               	movlw	85
  1756  001608  6EA7               	movwf	4007,c	;volatile
  1757                           
  1758                           ;Current_Monitor.c: 328: EECON2=0xAA;
  1759  00160A  0EAA               	movlw	170
  1760  00160C  6EA7               	movwf	4007,c	;volatile
  1761                           
  1762                           ;Current_Monitor.c: 329: EECON1bits.WR=1;
  1763  00160E  82A6               	bsf	4006,1,c	;volatile
  1764                           
  1765                           ;Current_Monitor.c: 332: INTCONbits.GIE=1;
  1766  001610  8EF2               	bsf	intcon,7,c	;volatile
  1767  001612                     l151:
  1768  001612  B2A6               	btfsc	4006,1,c	;volatile
  1769  001614  D7FE               	goto	l151
  1770                           
  1771                           ;Current_Monitor.c: 334: EECON1bits.WREN = 0;
  1772  001616  94A6               	bcf	4006,2,c	;volatile
  1773  001618  0012               	return		;funcret
  1774  00161A                     __end_of_EEPROM_Write:
  1775                           	opt stack 0
  1776                           tblptru	equ	0xFF8
  1777                           tblptrh	equ	0xFF7
  1778                           tblptrl	equ	0xFF6
  1779                           tablat	equ	0xFF5
  1780                           prodh	equ	0xFF4
  1781                           prodl	equ	0xFF3
  1782                           intcon	equ	0xFF2
  1783                           postinc0	equ	0xFEE
  1784                           wreg	equ	0xFE8
  1785                           indf2	equ	0xFDF
  1786                           postinc2	equ	0xFDE
  1787                           postdec2	equ	0xFDD
  1788                           fsr2h	equ	0xFDA
  1789                           fsr2l	equ	0xFD9
  1790                           status	equ	0xFD8
  1791                           
  1792 ;; *************** function _EEPROM_Read *****************
  1793 ;; Defined at:
  1794 ;;		line 339 in file "Current_Monitor.c"
  1795 ;; Parameters:    Size  Location     Type
  1796 ;;  address         1    wreg     unsigned char 
  1797 ;; Auto vars:     Size  Location     Type
  1798 ;;  address         1   12[COMRAM] unsigned char 
  1799 ;; Return value:  Size  Location     Type
  1800 ;;                  1    wreg      void 
  1801 ;; Registers used:
  1802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1803 ;; Tracked objects:
  1804 ;;		On entry : 0/0
  1805 ;;		On exit  : 0/0
  1806 ;;		Unchanged: 0/0
  1807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1809 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1810 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1811 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1812 ;;Total ram usage:        3 bytes
  1813 ;; Hardware stack levels used:    1
  1814 ;; Hardware stack levels required when called:    2
  1815 ;; This function calls:
  1816 ;;		_Average_Function
  1817 ;; This function is called by:
  1818 ;;		_main
  1819 ;; This function uses a non-reentrant model
  1820 ;;
  1821                           
  1822                           	psect	text9
  1823  0015BA                     __ptext9:
  1824                           	opt stack 0
  1825  0015BA                     _EEPROM_Read:
  1826                           	opt stack 28
  1827                           
  1828                           ;incstack = 0
  1829                           ;EEPROM_Read@address stored from wreg
  1830  0015BA  6E0D               	movwf	EEPROM_Read@address,c
  1831                           
  1832                           ;Current_Monitor.c: 346: EEADR=address;
  1833  0015BC  C00D  FFA9         	movff	EEPROM_Read@address,4009	;volatile
  1834                           
  1835                           ;Current_Monitor.c: 347: EECON1bits.EEPGD=0;
  1836  0015C0  9EA6               	bcf	4006,7,c	;volatile
  1837                           
  1838                           ;Current_Monitor.c: 348: EECON1bits.CFGS=0;
  1839  0015C2  9CA6               	bcf	4006,6,c	;volatile
  1840                           
  1841                           ;Current_Monitor.c: 349: EECON1bits.RD=1;
  1842  0015C4  80A6               	bsf	4006,0,c	;volatile
  1843                           
  1844                           ;Current_Monitor.c: 350: result_EEPROM=EEDATA;
  1845  0015C6  CFA8 F02E          	movff	4008,_result_EEPROM	;volatile
  1846                           
  1847                           ;Current_Monitor.c: 351: Sample_for_Average[x++]=result_EEPROM;
  1848  0015CA  502E               	movf	_result_EEPROM,w,c
  1849  0015CC  6E0B               	movwf	??_EEPROM_Read& (0+255),c
  1850  0015CE  6A0C               	clrf	(??_EEPROM_Read+1)& (0+255),c
  1851  0015D0  90D8               	bcf	status,0,c
  1852  0015D2  3429               	rlcf	_x,w,c
  1853  0015D4  6ED9               	movwf	fsr2l,c
  1854  0015D6  342A               	rlcf	_x+1,w,c
  1855  0015D8  6EDA               	movwf	fsr2h,c
  1856  0015DA  0E00               	movlw	low _Sample_for_Average
  1857  0015DC  26D9               	addwf	fsr2l,f,c
  1858  0015DE  0E01               	movlw	high _Sample_for_Average
  1859  0015E0  22DA               	addwfc	fsr2h,f,c
  1860  0015E2  C00B  FFDE         	movff	??_EEPROM_Read,postinc2
  1861  0015E6  C00C  FFDD         	movff	??_EEPROM_Read+1,postdec2
  1862  0015EA  4A29               	infsnz	_x,f,c
  1863  0015EC  2A2A               	incf	_x+1,f,c
  1864                           
  1865                           ;Current_Monitor.c: 352: Average_Function();
  1866  0015EE  EC28  F00A         	call	_Average_Function	;wreg free
  1867  0015F2  0012               	return		;funcret
  1868  0015F4                     __end_of_EEPROM_Read:
  1869                           	opt stack 0
  1870                           tblptru	equ	0xFF8
  1871                           tblptrh	equ	0xFF7
  1872                           tblptrl	equ	0xFF6
  1873                           tablat	equ	0xFF5
  1874                           prodh	equ	0xFF4
  1875                           prodl	equ	0xFF3
  1876                           intcon	equ	0xFF2
  1877                           postinc0	equ	0xFEE
  1878                           wreg	equ	0xFE8
  1879                           indf2	equ	0xFDF
  1880                           postinc2	equ	0xFDE
  1881                           postdec2	equ	0xFDD
  1882                           fsr2h	equ	0xFDA
  1883                           fsr2l	equ	0xFD9
  1884                           status	equ	0xFD8
  1885                           
  1886 ;; *************** function _Average_Function *****************
  1887 ;; Defined at:
  1888 ;;		line 388 in file "Current_Monitor.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;		None
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;  x               2    8[COMRAM] int 
  1893 ;; Return value:  Size  Location     Type
  1894 ;;                  1    wreg      void 
  1895 ;; Registers used:
  1896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1905 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1906 ;;Total ram usage:        2 bytes
  1907 ;; Hardware stack levels used:    1
  1908 ;; Hardware stack levels required when called:    1
  1909 ;; This function calls:
  1910 ;;		___awdiv
  1911 ;; This function is called by:
  1912 ;;		_EEPROM_Read
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           	psect	text10
  1917  001450                     __ptext10:
  1918                           	opt stack 0
  1919  001450                     _Average_Function:
  1920                           	opt stack 28
  1921                           
  1922                           ;Current_Monitor.c: 391: for(int x=1;x<=50;x++)
  1923                           
  1924                           ;incstack = 0
  1925  001450  0E00               	movlw	0
  1926  001452  6E0A               	movwf	Average_Function@x+1,c
  1927  001454  0E01               	movlw	1
  1928  001456  6E09               	movwf	Average_Function@x,c
  1929  001458                     l1194:
  1930  001458  BE0A               	btfsc	Average_Function@x+1,7,c
  1931  00145A  D006               	goto	l1198
  1932  00145C  500A               	movf	Average_Function@x+1,w,c
  1933  00145E  E114               	bnz	l1204
  1934  001460  0E33               	movlw	51
  1935  001462  5C09               	subwf	Average_Function@x,w,c
  1936  001464  B0D8               	btfsc	status,0,c
  1937  001466  D010               	goto	l1204
  1938  001468                     l1198:
  1939                           
  1940                           ;Current_Monitor.c: 392: {
  1941                           ;Current_Monitor.c: 393: Average +=Sample_for_Average[x];
  1942  001468  90D8               	bcf	status,0,c
  1943  00146A  3409               	rlcf	Average_Function@x,w,c
  1944  00146C  6ED9               	movwf	fsr2l,c
  1945  00146E  340A               	rlcf	Average_Function@x+1,w,c
  1946  001470  6EDA               	movwf	fsr2h,c
  1947  001472  0E00               	movlw	low _Sample_for_Average
  1948  001474  26D9               	addwf	fsr2l,f,c
  1949  001476  0E01               	movlw	high _Sample_for_Average
  1950  001478  22DA               	addwfc	fsr2h,f,c
  1951  00147A  50DE               	movf	postinc2,w,c
  1952  00147C  2627               	addwf	_Average,f,c
  1953  00147E  50DD               	movf	postdec2,w,c
  1954  001480  2228               	addwfc	_Average+1,f,c
  1955  001482  4A09               	infsnz	Average_Function@x,f,c
  1956  001484  2A0A               	incf	Average_Function@x+1,f,c
  1957  001486  D7E8               	goto	l1194
  1958  001488                     l1204:
  1959                           
  1960                           ;Current_Monitor.c: 395: }
  1961                           ;Current_Monitor.c: 396: Average=Average/50;
  1962  001488  C027  F001         	movff	_Average,___awdiv@dividend
  1963  00148C  C028  F002         	movff	_Average+1,___awdiv@dividend+1
  1964  001490  0E00               	movlw	0
  1965  001492  6E04               	movwf	___awdiv@divisor+1,c
  1966  001494  0E32               	movlw	50
  1967  001496  6E03               	movwf	___awdiv@divisor,c
  1968  001498  ECAF  F009         	call	___awdiv	;wreg free
  1969  00149C  C001  F027         	movff	?___awdiv,_Average
  1970  0014A0  C002  F028         	movff	?___awdiv+1,_Average+1
  1971  0014A4  0012               	return		;funcret
  1972  0014A6                     __end_of_Average_Function:
  1973                           	opt stack 0
  1974                           tblptru	equ	0xFF8
  1975                           tblptrh	equ	0xFF7
  1976                           tblptrl	equ	0xFF6
  1977                           tablat	equ	0xFF5
  1978                           prodh	equ	0xFF4
  1979                           prodl	equ	0xFF3
  1980                           intcon	equ	0xFF2
  1981                           postinc0	equ	0xFEE
  1982                           wreg	equ	0xFE8
  1983                           indf2	equ	0xFDF
  1984                           postinc2	equ	0xFDE
  1985                           postdec2	equ	0xFDD
  1986                           fsr2h	equ	0xFDA
  1987                           fsr2l	equ	0xFD9
  1988                           status	equ	0xFD8
  1989                           
  1990 ;; *************** function ___awdiv *****************
  1991 ;; Defined at:
  1992 ;;		line 8 in file "/Applications/microchip/xc8/v1.41/sources/common/awdiv.c"
  1993 ;; Parameters:    Size  Location     Type
  1994 ;;  dividend        2    0[COMRAM] int 
  1995 ;;  divisor         2    2[COMRAM] int 
  1996 ;; Auto vars:     Size  Location     Type
  1997 ;;  quotient        2    6[COMRAM] int 
  1998 ;;  sign            1    5[COMRAM] unsigned char 
  1999 ;;  counter         1    4[COMRAM] unsigned char 
  2000 ;; Return value:  Size  Location     Type
  2001 ;;                  2    0[COMRAM] int 
  2002 ;; Registers used:
  2003 ;;		wreg, status,2, status,0
  2004 ;; Tracked objects:
  2005 ;;		On entry : 0/0
  2006 ;;		On exit  : 0/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2009 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2010 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2012 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2013 ;;Total ram usage:        8 bytes
  2014 ;; Hardware stack levels used:    1
  2015 ;; This function calls:
  2016 ;;		Nothing
  2017 ;; This function is called by:
  2018 ;;		_Average_Function
  2019 ;; This function uses a non-reentrant model
  2020 ;;
  2021                           
  2022                           	psect	text11
  2023  00135E                     __ptext11:
  2024                           	opt stack 0
  2025  00135E                     ___awdiv:
  2026                           	opt stack 28
  2027                           
  2028                           ;incstack = 0
  2029  00135E  0E00               	movlw	0
  2030  001360  6E06               	movwf	___awdiv@sign,c
  2031  001362  AE04               	btfss	___awdiv@divisor+1,7,c
  2032  001364  D006               	goto	l1156
  2033  001366  6C03               	negf	___awdiv@divisor,c
  2034  001368  1E04               	comf	___awdiv@divisor+1,f,c
  2035  00136A  B0D8               	btfsc	status,0,c
  2036  00136C  2A04               	incf	___awdiv@divisor+1,f,c
  2037  00136E  0E01               	movlw	1
  2038  001370  6E06               	movwf	___awdiv@sign,c
  2039  001372                     l1156:
  2040  001372  AE02               	btfss	___awdiv@dividend+1,7,c
  2041  001374  D006               	goto	l1162
  2042  001376  6C01               	negf	___awdiv@dividend,c
  2043  001378  1E02               	comf	___awdiv@dividend+1,f,c
  2044  00137A  B0D8               	btfsc	status,0,c
  2045  00137C  2A02               	incf	___awdiv@dividend+1,f,c
  2046  00137E  0E01               	movlw	1
  2047  001380  1A06               	xorwf	___awdiv@sign,f,c
  2048  001382                     l1162:
  2049  001382  0E00               	movlw	0
  2050  001384  6E08               	movwf	___awdiv@quotient+1,c
  2051  001386  0E00               	movlw	0
  2052  001388  6E07               	movwf	___awdiv@quotient,c
  2053  00138A  5003               	movf	___awdiv@divisor,w,c
  2054  00138C  1004               	iorwf	___awdiv@divisor+1,w,c
  2055  00138E  B4D8               	btfsc	status,2,c
  2056  001390  D01C               	goto	l1184
  2057  001392  0E01               	movlw	1
  2058  001394  6E05               	movwf	___awdiv@counter,c
  2059  001396  D004               	goto	l1170
  2060  001398                     l1168:
  2061  001398  90D8               	bcf	status,0,c
  2062  00139A  3603               	rlcf	___awdiv@divisor,f,c
  2063  00139C  3604               	rlcf	___awdiv@divisor+1,f,c
  2064  00139E  2A05               	incf	___awdiv@counter,f,c
  2065  0013A0                     l1170:
  2066  0013A0  AE04               	btfss	___awdiv@divisor+1,7,c
  2067  0013A2  D7FA               	goto	l1168
  2068  0013A4                     l1172:
  2069  0013A4  90D8               	bcf	status,0,c
  2070  0013A6  3607               	rlcf	___awdiv@quotient,f,c
  2071  0013A8  3608               	rlcf	___awdiv@quotient+1,f,c
  2072  0013AA  5003               	movf	___awdiv@divisor,w,c
  2073  0013AC  5C01               	subwf	___awdiv@dividend,w,c
  2074  0013AE  5004               	movf	___awdiv@divisor+1,w,c
  2075  0013B0  5802               	subwfb	___awdiv@dividend+1,w,c
  2076  0013B2  A0D8               	btfss	status,0,c
  2077  0013B4  D005               	goto	l1180
  2078  0013B6  5003               	movf	___awdiv@divisor,w,c
  2079  0013B8  5E01               	subwf	___awdiv@dividend,f,c
  2080  0013BA  5004               	movf	___awdiv@divisor+1,w,c
  2081  0013BC  5A02               	subwfb	___awdiv@dividend+1,f,c
  2082  0013BE  8007               	bsf	___awdiv@quotient,0,c
  2083  0013C0                     l1180:
  2084  0013C0  90D8               	bcf	status,0,c
  2085  0013C2  3204               	rrcf	___awdiv@divisor+1,f,c
  2086  0013C4  3203               	rrcf	___awdiv@divisor,f,c
  2087  0013C6  2E05               	decfsz	___awdiv@counter,f,c
  2088  0013C8  D7ED               	goto	l1172
  2089  0013CA                     l1184:
  2090  0013CA  5006               	movf	___awdiv@sign,w,c
  2091  0013CC  B4D8               	btfsc	status,2,c
  2092  0013CE  D004               	goto	l1188
  2093  0013D0  6C07               	negf	___awdiv@quotient,c
  2094  0013D2  1E08               	comf	___awdiv@quotient+1,f,c
  2095  0013D4  B0D8               	btfsc	status,0,c
  2096  0013D6  2A08               	incf	___awdiv@quotient+1,f,c
  2097  0013D8                     l1188:
  2098  0013D8  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2099  0013DC  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2100  0013E0  0012               	return	
  2101  0013E2                     __end_of___awdiv:
  2102                           	opt stack 0
  2103                           tblptru	equ	0xFF8
  2104                           tblptrh	equ	0xFF7
  2105                           tblptrl	equ	0xFF6
  2106                           tablat	equ	0xFF5
  2107                           prodh	equ	0xFF4
  2108                           prodl	equ	0xFF3
  2109                           intcon	equ	0xFF2
  2110                           postinc0	equ	0xFEE
  2111                           wreg	equ	0xFE8
  2112                           indf2	equ	0xFDF
  2113                           postinc2	equ	0xFDE
  2114                           postdec2	equ	0xFDD
  2115                           fsr2h	equ	0xFDA
  2116                           fsr2l	equ	0xFD9
  2117                           status	equ	0xFD8
  2118                           
  2119 ;; *************** function _Analog_Capture_ON *****************
  2120 ;; Defined at:
  2121 ;;		line 283 in file "Current_Monitor.c"
  2122 ;; Parameters:    Size  Location     Type
  2123 ;;		None
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;  x               2    2[COMRAM] int 
  2126 ;; Return value:  Size  Location     Type
  2127 ;;                  1    wreg      void 
  2128 ;; Registers used:
  2129 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2130 ;; Tracked objects:
  2131 ;;		On entry : 0/0
  2132 ;;		On exit  : 0/0
  2133 ;;		Unchanged: 0/0
  2134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2136 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2137 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2138 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2139 ;;Total ram usage:        4 bytes
  2140 ;; Hardware stack levels used:    1
  2141 ;; This function calls:
  2142 ;;		Nothing
  2143 ;; This function is called by:
  2144 ;;		_main
  2145 ;; This function uses a non-reentrant model
  2146 ;;
  2147                           
  2148                           	psect	text12
  2149  0013E2                     __ptext12:
  2150                           	opt stack 0
  2151  0013E2                     _Analog_Capture_ON:
  2152                           	opt stack 30
  2153                           
  2154                           ;Current_Monitor.c: 286: for(int x=0;x<=50;x++)
  2155                           
  2156                           ;incstack = 0
  2157  0013E2  0E00               	movlw	0
  2158  0013E4  6E04               	movwf	Analog_Capture_ON@x+1,c
  2159  0013E6  0E00               	movlw	0
  2160  0013E8  6E03               	movwf	Analog_Capture_ON@x,c
  2161  0013EA                     l996:
  2162  0013EA  BE04               	btfsc	Analog_Capture_ON@x+1,7,c
  2163  0013EC  D006               	goto	l139
  2164  0013EE  5004               	movf	Analog_Capture_ON@x+1,w,c
  2165  0013F0  E12E               	bnz	l145
  2166  0013F2  0E33               	movlw	51
  2167  0013F4  5C03               	subwf	Analog_Capture_ON@x,w,c
  2168  0013F6  B0D8               	btfsc	status,0,c
  2169  0013F8  0012               	return	
  2170  0013FA                     l139:
  2171                           
  2172                           ;Current_Monitor.c: 287: {
  2173                           ;Current_Monitor.c: 288: ADCON0bits.GO_DONE=1;
  2174  0013FA  82C2               	bsf	4034,1,c	;volatile
  2175  0013FC                     l141:
  2176  0013FC  B2C2               	btfsc	4034,1,c	;volatile
  2177  0013FE  D7FE               	goto	l141
  2178                           
  2179                           ;Current_Monitor.c: 290: Sample[x]=ADRESH;
  2180  001400  50C4               	movf	4036,w,c	;volatile
  2181  001402  6E01               	movwf	??_Analog_Capture_ON& (0+255),c
  2182  001404  6A02               	clrf	(??_Analog_Capture_ON+1)& (0+255),c
  2183  001406  90D8               	bcf	status,0,c
  2184  001408  3403               	rlcf	Analog_Capture_ON@x,w,c
  2185  00140A  6ED9               	movwf	fsr2l,c
  2186  00140C  3404               	rlcf	Analog_Capture_ON@x+1,w,c
  2187  00140E  6EDA               	movwf	fsr2h,c
  2188  001410  0E60               	movlw	low _Sample
  2189  001412  26D9               	addwf	fsr2l,f,c
  2190  001414  0E00               	movlw	high _Sample
  2191  001416  22DA               	addwfc	fsr2h,f,c
  2192  001418  C001  FFDE         	movff	??_Analog_Capture_ON,postinc2
  2193  00141C  C002  FFDD         	movff	??_Analog_Capture_ON+1,postdec2
  2194                           
  2195                           ;Current_Monitor.c: 292: _delay((unsigned long)((500)*(10000000/4000.0)));
  2196  001420  0E07               	movlw	7
  2197  001422  6E02               	movwf	(??_Analog_Capture_ON+1)& (0+255),c
  2198  001424  0E58               	movlw	88
  2199  001426  6E01               	movwf	??_Analog_Capture_ON& (0+255),c
  2200  001428  0E5A               	movlw	90
  2201  00142A                     u697:
  2202  00142A  2EE8               	decfsz	wreg,f,c
  2203  00142C  D7FE               	bra	u697
  2204  00142E  2E01               	decfsz	??_Analog_Capture_ON& (0+255),f,c
  2205  001430  D7FC               	bra	u697
  2206  001432  2E02               	decfsz	(??_Analog_Capture_ON+1)& (0+255),f,c
  2207  001434  D7FA               	bra	u697
  2208                           
  2209                           ;Current_Monitor.c: 293: if(x==50)
  2210  001436  0E32               	movlw	50
  2211  001438  1803               	xorwf	Analog_Capture_ON@x,w,c
  2212  00143A  1004               	iorwf	Analog_Capture_ON@x+1,w,c
  2213  00143C  A4D8               	btfss	status,2,c
  2214  00143E  D004               	goto	l1008
  2215                           
  2216                           ;Current_Monitor.c: 294: {
  2217                           ;Current_Monitor.c: 295: x=51;
  2218  001440  0E00               	movlw	0
  2219  001442  6E04               	movwf	Analog_Capture_ON@x+1,c
  2220  001444  0E33               	movlw	51
  2221  001446  6E03               	movwf	Analog_Capture_ON@x,c
  2222  001448                     l1008:
  2223  001448  4A03               	infsnz	Analog_Capture_ON@x,f,c
  2224  00144A  2A04               	incf	Analog_Capture_ON@x+1,f,c
  2225  00144C  D7CE               	goto	l996
  2226  00144E                     l145:
  2227  00144E  0012               	return		;funcret
  2228  001450                     __end_of_Analog_Capture_ON:
  2229                           	opt stack 0
  2230                           tblptru	equ	0xFF8
  2231                           tblptrh	equ	0xFF7
  2232                           tblptrl	equ	0xFF6
  2233                           tablat	equ	0xFF5
  2234                           prodh	equ	0xFF4
  2235                           prodl	equ	0xFF3
  2236                           intcon	equ	0xFF2
  2237                           postinc0	equ	0xFEE
  2238                           wreg	equ	0xFE8
  2239                           indf2	equ	0xFDF
  2240                           postinc2	equ	0xFDE
  2241                           postdec2	equ	0xFDD
  2242                           fsr2h	equ	0xFDA
  2243                           fsr2l	equ	0xFD9
  2244                           status	equ	0xFD8
  2245                           
  2246 ;; *************** function _Analog_Capture_OFF *****************
  2247 ;; Defined at:
  2248 ;;		line 301 in file "Current_Monitor.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;		None
  2251 ;; Auto vars:     Size  Location     Type
  2252 ;;		None
  2253 ;; Return value:  Size  Location     Type
  2254 ;;                  1    wreg      void 
  2255 ;; Registers used:
  2256 ;;		None
  2257 ;; Tracked objects:
  2258 ;;		On entry : 0/0
  2259 ;;		On exit  : 0/0
  2260 ;;		Unchanged: 0/0
  2261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2266 ;;Total ram usage:        0 bytes
  2267 ;; Hardware stack levels used:    1
  2268 ;; This function calls:
  2269 ;;		Nothing
  2270 ;; This function is called by:
  2271 ;;		_main
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           	psect	text13
  2276  001658                     __ptext13:
  2277                           	opt stack 0
  2278  001658                     _Analog_Capture_OFF:
  2279                           	opt stack 30
  2280                           
  2281                           ;Current_Monitor.c: 303: ADCON0bits.ADON=0;
  2282                           
  2283                           ;incstack = 0
  2284  001658  90C2               	bcf	4034,0,c	;volatile
  2285  00165A  0012               	return		;funcret
  2286  00165C                     __end_of_Analog_Capture_OFF:
  2287                           	opt stack 0
  2288                           tblptru	equ	0xFF8
  2289                           tblptrh	equ	0xFF7
  2290                           tblptrl	equ	0xFF6
  2291                           tablat	equ	0xFF5
  2292                           prodh	equ	0xFF4
  2293                           prodl	equ	0xFF3
  2294                           intcon	equ	0xFF2
  2295                           postinc0	equ	0xFEE
  2296                           wreg	equ	0xFE8
  2297                           indf2	equ	0xFDF
  2298                           postinc2	equ	0xFDE
  2299                           postdec2	equ	0xFDD
  2300                           fsr2h	equ	0xFDA
  2301                           fsr2l	equ	0xFD9
  2302                           status	equ	0xFD8
  2303                           tblptru	equ	0xFF8
  2304                           tblptrh	equ	0xFF7
  2305                           tblptrl	equ	0xFF6
  2306                           tablat	equ	0xFF5
  2307                           prodh	equ	0xFF4
  2308                           prodl	equ	0xFF3
  2309                           intcon	equ	0xFF2
  2310                           postinc0	equ	0xFEE
  2311                           wreg	equ	0xFE8
  2312                           indf2	equ	0xFDF
  2313                           postinc2	equ	0xFDE
  2314                           postdec2	equ	0xFDD
  2315                           fsr2h	equ	0xFDA
  2316                           fsr2l	equ	0xFD9
  2317                           status	equ	0xFD8
  2318                           
  2319                           	psect	rparam
  2320  0000                     tblptru	equ	0xFF8
  2321                           tblptrh	equ	0xFF7
  2322                           tblptrl	equ	0xFF6
  2323                           tablat	equ	0xFF5
  2324                           prodh	equ	0xFF4
  2325                           prodl	equ	0xFF3
  2326                           intcon	equ	0xFF2
  2327                           postinc0	equ	0xFEE
  2328                           wreg	equ	0xFE8
  2329                           indf2	equ	0xFDF
  2330                           postinc2	equ	0xFDE
  2331                           postdec2	equ	0xFDD
  2332                           fsr2h	equ	0xFDA
  2333                           fsr2l	equ	0xFD9
  2334                           status	equ	0xFD8


Data Sizes:
    Strings     179
    Constant    10
    Data        2
    BSS         267
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     38      57
    BANK0           160      0     150
    BANK1           256      0     100
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 55
		 -> STR_5(CODE[36]), STR_4(CODE[29]), STR_3(CODE[20]), STR_2(CODE[55]), 
		 -> STR_1(CODE[39]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 3
		 -> b(COMRAM[3]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    EEPROM_Write@value	PTR unsigned char  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _EEPROM_Read->_Average_Function
    _Average_Function->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    2574
                                             28 COMRAM    10    10      0
                 _Analog_Capture_OFF
                  _Analog_Capture_ON
                        _EEPROM_Read
                       _EEPROM_Write
                  _Initialize_Analog
                    _Initialize_UART
                    _Read_UART_Input
                       _Send_to_UART
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    17      8    1694
                                             12 COMRAM    16     8      8
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Send_to_UART                                         2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Read_UART_Input                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Initialize_UART                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Initialize_Analog                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         3     1      2     108
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Read                                          3     3      0     518
                                             10 COMRAM     3     3      0
                   _Average_Function
 ---------------------------------------------------------------------------------
 (2) _Average_Function                                     2     2      0     496
                                              8 COMRAM     2     2      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Analog_Capture_ON                                    4     4      0      60
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Analog_Capture_OFF                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Analog_Capture_OFF
   _Analog_Capture_ON
   _EEPROM_Read
     _Average_Function
       ___awdiv
   _EEPROM_Write
   _Initialize_Analog
   _Initialize_UART
   _Read_UART_Input
   _Send_to_UART
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      64       7       39.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      96       5       93.8%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     26      39       1       60.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     133      32        0.0%
DATA                 0      0     133       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Apr 12 20:25:36 2017

                          _a 002B                            _b 0035                            _x 0029  
               ___awdiv@sign 0006                  __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                __CFG_OSC$HS 000000                 __CFG_CP4$OFF 000000                 __CFG_CP5$OFF 000000  
               __CFG_CP6$OFF 000000            ??_Read_UART_Input 0001                 __CFG_CP7$OFF 000000  
                __CFG_LVP$ON 000000                          l121 164E                          l141 13FC  
                        l151 1612                          l145 144E                          l129 15A2  
                        l139 13FA                          l603 14EE                          l613 1572  
                        l980 1586                          l986 15A6                          l996 13EA  
               __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000                          u687 159C  
                        u697 142A                          wreg 000FE8                   _TXSTA1bits 000FAC  
               __CFG_MODE$MC 000000                 __CFG_WDT$OFF 000000                         l1008 1448  
                       l1204 1488                         l1212 14BC                         l1300 120E  
                       l1214 14C4                         l1224 14E4                         l1216 14C8  
                       l1240 1568                         l1232 1548                         l1170 13A0  
                       l1162 1382                         l1234 1550                         l1180 13C0  
                       l1172 13A4                         l1156 1372                         l1236 1554  
                       l1252 10E4                         l1270 113E                         l1246 10CA  
                       l1406 1330                         l1168 1398                         l1184 13CA  
                       l1360 125A                         l1194 1458                         l1290 1192  
                       l1282 1170                         l1258 1112                         l1188 13D8  
                       l1268 113A                         l1198 1468                         l1366 1282  
                       l1296 11EA                         l1288 118C                         l1392 12F2  
                       l1368 1292                         l1298 11F2                         l1388 12E2  
                       STR_1 1042                         STR_2 100B                         STR_3 10AA  
                       STR_4 108D                         STR_5 1069                 _Voltage_Drop 0034  
                       _main 121C                         _text 0038                         fsr2h 000FDA  
                       indf2 000FDF                         fsr2l 000FD9                         prodh 000FF4  
                       prodl 000FF3                         start 0000                __CFG_IESO$OFF 000000  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000         __end_of_EEPROM_Write 161A  
               _BAUDCON1bits 000F7E                __CFG_WAIT$OFF 000000                        ?_main 0001  
            __end_of___awdiv 13E2                        _EEADR 000FA9              ___awdiv@divisor 0003  
            __end_of___lwdiv 14F8              __end_of___lwmod 157C              ___awdiv@counter 0005  
                      _PORTA 000F80                        _PORTD 000F83                        _TRISA 000F92  
                      _TRISD 000F95                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
              __CFG_WRT4$OFF 000000                __CFG_WRT5$OFF 000000                __CFG_WRT6$OFF 000000  
              __CFG_WRT7$OFF 000000               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
             __CFG_EBTR4$OFF 000000               __CFG_EBTR5$OFF 000000               __CFG_EBTR6$OFF 000000  
             __CFG_EBTR7$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000              __end_of_dpowers 100B  
                      main@i 001D                        main@x 0021                        main@y 0023  
                      tablat 000FF5                        status 000FD8              __end_of_sprintf 121C  
       __size_of_EEPROM_Read 003A              __initialization 14F8                 __end_of_main 135E  
                     ??_main 001D             _Average_Function 1450                __activetblptr 000003  
                     _ADCON0 000FC2                       _ADCON1 000FC1                       _ADCON2 000FC0  
                     _ADRESH 000FC4                       _EEDATA 000FA8                       _EECON2 000FA7  
           ___awdiv@dividend 0001              __CFG_BBSIZ$BB2K 000000                       _RCREG1 000FAE  
                     _SPBRG1 000FAF                       _TXREG1 000FAD           _Sample_for_Average 0100  
             __CFG_XINST$OFF 000000                       _Sample 0060                    ??___awdiv 0005  
                  ??___lwdiv 0005                Send_to_UART@i 0001                    ??___lwmod 000C  
                     clear_0 1516                       clear_1 1522                       clear_2 152E  
           ___awdiv@quotient 0007                 __pdataCOMRAM 0038                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                  ??_sprintf 0015               _EEPROM_address 002F                   __accesstop 0060  
    __end_of__initialization 1534            EEPROM_Write@value 0001                ___rparam_used 000001  
      __size_of_EEPROM_Write 0026              _Read_UART_Input 164C                ?_Send_to_UART 0001  
             __pcstackCOMRAM 0001     __size_of_Initialize_UART 0014                 _EEPROM_Write 15F4  
                 __pbssBANK0 0060                   __pbssBANK1 0100   __end_of_Analog_Capture_OFF 165C  
             ??_Send_to_UART 0001      __end_of_Read_UART_Input 1658                      _Average 0027  
   __end_of_Average_Function 14A6                      _Current 0033                      __Hparam 0000  
                    __Lparam 0000                      ___awdiv 135E                      ___lwdiv 14A6  
                    ___lwmod 153A                 __psmallconst 1000              __CFG_STVREN$OFF 000000  
                    __pcinit 14F8                      __ramtop 1000                      __ptext0 121C  
                    __ptext1 10C0                      __ptext2 153A                      __ptext3 14A6  
                    __ptext4 157C                      __ptext5 164C                      __ptext6 1638  
                    __ptext7 161A                      __ptext8 15F4                      __ptext9 15BA  
                    _dpowers 1001            ??_Initialize_UART 0001                _Sample_Number 0030  
                    _sprintf 10C0         end_of_initialization 1534                ??_EEPROM_Read 000B  
                    postdec2 000FDD                      postinc0 000FEE                      postinc2 000FDE  
                  _TRISCbits 000F94         __end_of_Send_to_UART 15BA             ?_Read_UART_Input 0001  
        __end_of_EEPROM_Read 15F4                __pidataCOMRAM 165C          start_initialization 14F8  
         _Analog_Capture_OFF 1658             __CFG_LPT1OSC$OFF 000000          ?_Analog_Capture_OFF 0001  
                __pbssCOMRAM 0027                  sprintf@flag 0018                  _EEPROM_Read 15BA  
                sprintf@prec 0019                  _EEPROM_read 00C4         ??_Analog_Capture_OFF 0001  
          ?_Average_Function 0001             ___lwdiv@dividend 0001            __CFG_CCP2MX$PORTC 000000  
         ??_Average_Function 0009              _Initialize_UART 1638                     ?___awdiv 0001  
                   ?___lwdiv 0001                     ?___lwmod 0008        __size_of_Send_to_UART 003E  
          _Initialize_Analog 161A                  __smallconst 1000           ?_Initialize_Analog 0001  
           ___lwdiv@quotient 0005                     _EEPROM_W 0031                     ?_sprintf 000D  
        ??_Initialize_Analog 0001                     _PIR1bits 000F9E        __CFG_DATABW$DATA16BIT 000000  
               _Send_to_UART 157C                     _RCONbits 000FD0             __CFG_WDTPS$32768 000000  
  __end_of_Initialize_Analog 1638            __CFG_ECCPMX$PORTE 000000                   _ADCON0bits 000FC2  
                  main@i_648 001F                    main@x_645 0025                     _Keyboard 002D  
    __end_of_Initialize_UART 164C                   _EECON1bits 000FA6                     __Hrparam 0000  
                   __Lrparam 0000                     _Resistor 0032           __CFG_BOREN$SBORDIS 000000  
          _Analog_Capture_ON 13E2             __size_of___awdiv 0084           ?_Analog_Capture_ON 0001  
           __size_of___lwdiv 0052             __size_of___lwmod 0042                _result_EEPROM 002E  
                 sprintf@val 001A          ??_Analog_Capture_ON 0001              ___lwdiv@divisor 0003  
            ___lwdiv@counter 0007                     __ptext10 1450                     __ptext11 135E  
                   __ptext12 13E2                     __ptext13 1658                ?_EEPROM_Write 0001  
           __size_of_sprintf 015C                __size_of_main 0142    __end_of_Analog_Capture_ON 1450  
         Analog_Capture_ON@x 0003     __size_of_Read_UART_Input 000C                   _MEMCONbits 000F9C  
 __size_of_Initialize_Analog 001E        __CFG_ADDRBW$ADDR20BIT 000000                   _INTCONbits 000FF2  
             ??_EEPROM_Write 0003                    sprintf@ap 0016                    sprintf@sp 000D  
           ___lwmod@dividend 0008                 ?_EEPROM_Read 0001             ?_Initialize_UART 0001  
                 _RCSTA1bits 000FAB           EEPROM_Read@address 000D            Average_Function@x 0009  
  __size_of_Average_Function 0056                     sprintf@c 001C                     sprintf@f 000F  
            ___lwmod@divisor 000A              ___lwmod@counter 000C  __size_of_Analog_Capture_OFF 0004  
        EEPROM_Write@address 0003   __size_of_Analog_Capture_ON 006E  
